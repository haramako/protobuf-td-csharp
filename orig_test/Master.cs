// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tools/Uploader/lib/master.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Master {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Master {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Master_PbxHeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PbxHeader, global::Master.PbxHeader.Builder> internal__static_Master_PbxHeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PbxHeader_IntIndexEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PbxHeader.Types.IntIndexEntry, global::Master.PbxHeader.Types.IntIndexEntry.Builder> internal__static_Master_PbxHeader_IntIndexEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PbxHeader_StringIndexEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PbxHeader.Types.StringIndexEntry, global::Master.PbxHeader.Types.StringIndexEntry.Builder> internal__static_Master_PbxHeader_StringIndexEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PresentCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PresentCommand, global::Master.PresentCommand.Builder> internal__static_Master_PresentCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PresentCommand_StackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PresentCommand.Types.StackItem, global::Master.PresentCommand.Types.StackItem.Builder> internal__static_Master_PresentCommand_StackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PresentCommand_Fang__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PresentCommand.Types.Fang, global::Master.PresentCommand.Types.Fang.Builder> internal__static_Master_PresentCommand_Fang__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PresentCommand_Armament__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PresentCommand.Types.Armament, global::Master.PresentCommand.Types.Armament.Builder> internal__static_Master_PresentCommand_Armament__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_FangTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.FangTemplate, global::Master.FangTemplate.Builder> internal__static_Master_FangTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_FangTemplate_StackItemBonus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.FangTemplate.Types.StackItemBonus, global::Master.FangTemplate.Types.StackItemBonus.Builder> internal__static_Master_FangTemplate_StackItemBonus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_FangTemplate_StackItemBonusEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.FangTemplate.Types.StackItemBonusEntry, global::Master.FangTemplate.Types.StackItemBonusEntry.Builder> internal__static_Master_FangTemplate_StackItemBonusEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_FangTemplate_DropStackItemBonusEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.FangTemplate.Types.DropStackItemBonusEntry, global::Master.FangTemplate.Types.DropStackItemBonusEntry.Builder> internal__static_Master_FangTemplate_DropStackItemBonusEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ActionSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ActionSkill, global::Master.ActionSkill.Builder> internal__static_Master_ActionSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PassiveSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PassiveSkill, global::Master.PassiveSkill.Builder> internal__static_Master_PassiveSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PvpSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PvpSkill, global::Master.PvpSkill.Builder> internal__static_Master_PvpSkill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PvpSoul__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PvpSoul, global::Master.PvpSoul.Builder> internal__static_Master_PvpSoul__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PvpAttribute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PvpAttribute, global::Master.PvpAttribute.Builder> internal__static_Master_PvpAttribute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_HomeLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.HomeLevel, global::Master.HomeLevel.Builder> internal__static_Master_HomeLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_MonsterLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.MonsterLevel, global::Master.MonsterLevel.Builder> internal__static_Master_MonsterLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_FangDrop__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.FangDrop, global::Master.FangDrop.Builder> internal__static_Master_FangDrop__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_LimitBreakType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.LimitBreakType, global::Master.LimitBreakType.Builder> internal__static_Master_LimitBreakType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_StackItemTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.StackItemTemplate, global::Master.StackItemTemplate.Builder> internal__static_Master_StackItemTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ExchangeShop__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ExchangeShop, global::Master.ExchangeShop.Builder> internal__static_Master_ExchangeShop__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ExchangeItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ExchangeItem, global::Master.ExchangeItem.Builder> internal__static_Master_ExchangeItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_EmeraldShopItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.EmeraldShopItem, global::Master.EmeraldShopItem.Builder> internal__static_Master_EmeraldShopItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PackItem, global::Master.PackItem.Builder> internal__static_Master_PackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PresentTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PresentTemplate, global::Master.PresentTemplate.Builder> internal__static_Master_PresentTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PvpLeague__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PvpLeague, global::Master.PvpLeague.Builder> internal__static_Master_PvpLeague__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PvpGrade__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PvpGrade, global::Master.PvpGrade.Builder> internal__static_Master_PvpGrade__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_PvpUnificationRule__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.PvpUnificationRule, global::Master.PvpUnificationRule.Builder> internal__static_Master_PvpUnificationRule__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_QuestTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.QuestTemplate, global::Master.QuestTemplate.Builder> internal__static_Master_QuestTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_UserStatTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.UserStatTemplate, global::Master.UserStatTemplate.Builder> internal__static_Master_UserStatTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_LoginSheet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.LoginSheet, global::Master.LoginSheet.Builder> internal__static_Master_LoginSheet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_LoginBonus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.LoginBonus, global::Master.LoginBonus.Builder> internal__static_Master_LoginBonus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_SpecialCutinOption__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.SpecialCutinOption, global::Master.SpecialCutinOption.Builder> internal__static_Master_SpecialCutinOption__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_SoundList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.SoundList, global::Master.SoundList.Builder> internal__static_Master_SoundList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_Enemy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.Enemy, global::Master.Enemy.Builder> internal__static_Master_Enemy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_Item__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.Item, global::Master.Item.Builder> internal__static_Master_Item__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ItemName__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ItemName, global::Master.ItemName.Builder> internal__static_Master_ItemName__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ItemNameDict__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ItemNameDict, global::Master.ItemNameDict.Builder> internal__static_Master_ItemNameDict__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ItemNameDict_List__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ItemNameDict.Types.List, global::Master.ItemNameDict.Types.List.Builder> internal__static_Master_ItemNameDict_List__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ItemNameDict_DictEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ItemNameDict.Types.DictEntry, global::Master.ItemNameDict.Types.DictEntry.Builder> internal__static_Master_ItemNameDict_DictEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_Trap__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.Trap, global::Master.Trap.Builder> internal__static_Master_Trap__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_StringData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.StringData, global::Master.StringData.Builder> internal__static_Master_StringData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_SoloDuel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.SoloDuel, global::Master.SoloDuel.Builder> internal__static_Master_SoloDuel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_RoomInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.RoomInfo, global::Master.RoomInfo.Builder> internal__static_Master_RoomInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_EnemyAnim__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.EnemyAnim, global::Master.EnemyAnim.Builder> internal__static_Master_EnemyAnim__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_EnemyAnimDistance__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.EnemyAnimDistance, global::Master.EnemyAnimDistance.Builder> internal__static_Master_EnemyAnimDistance__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_EnemyAnimSprite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.EnemyAnimSprite, global::Master.EnemyAnimSprite.Builder> internal__static_Master_EnemyAnimSprite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_ArmamentTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.ArmamentTemplate, global::Master.ArmamentTemplate.Builder> internal__static_Master_ArmamentTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_AbilityTemplate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.AbilityTemplate, global::Master.AbilityTemplate.Builder> internal__static_Master_AbilityTemplate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_MapAnimation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.MapAnimation, global::Master.MapAnimation.Builder> internal__static_Master_MapAnimation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_MapAnimation_Anim__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.MapAnimation.Types.Anim, global::Master.MapAnimation.Types.Anim.Builder> internal__static_Master_MapAnimation_Anim__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_MapAnimation_AnimationEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.MapAnimation.Types.AnimationEntry, global::Master.MapAnimation.Types.AnimationEntry.Builder> internal__static_Master_MapAnimation_AnimationEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_MapAnimation_EventAnimationEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.MapAnimation.Types.EventAnimationEntry, global::Master.MapAnimation.Types.EventAnimationEntry.Builder> internal__static_Master_MapAnimation_EventAnimationEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_MapIndex__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.MapIndex, global::Master.MapIndex.Builder> internal__static_Master_MapIndex__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_AreaData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.AreaData, global::Master.AreaData.Builder> internal__static_Master_AreaData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_DungeonData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.DungeonData, global::Master.DungeonData.Builder> internal__static_Master_DungeonData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_StageData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.StageData, global::Master.StageData.Builder> internal__static_Master_StageData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_RoomData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.RoomData, global::Master.RoomData.Builder> internal__static_Master_RoomData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_GoalSetData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.GoalSetData, global::Master.GoalSetData.Builder> internal__static_Master_GoalSetData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_StageSetItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.StageSetItem, global::Master.StageSetItem.Builder> internal__static_Master_StageSetItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_StageSetList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.StageSetList, global::Master.StageSetList.Builder> internal__static_Master_StageSetList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Master_StageSetData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Master.StageSetData, global::Master.StageSetData.Builder> internal__static_Master_StageSetData__FieldAccessorTable;
    #endregion
  }
  #region Enums
  public enum Property {
    NONE = 0,
    FIRE = 1,
    WATER = 2,
    TREE = 3,
    LIGHT = 4,
    DARK = 5,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PbxHeader : pb::GeneratedMessage<PbxHeader, PbxHeader.Builder> {
    public PbxHeader() { }
    private static readonly PbxHeader defaultInstance = new PbxHeader().MakeReadOnly();
    private static readonly string[] _pbxHeaderFieldNames = new string[] { "int_index", "string_index" };
    private static readonly uint[] _pbxHeaderFieldTags = new uint[] { 10, 18 };
    public static PbxHeader DefaultInstance {
      get { return defaultInstance; }
    }

    public override PbxHeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PbxHeader ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PbxHeader__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PbxHeader, PbxHeader.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PbxHeader__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class IntIndexEntry : pb::GeneratedMessage<IntIndexEntry, IntIndexEntry.Builder> {
        public IntIndexEntry() { }
        private static readonly IntIndexEntry defaultInstance = new IntIndexEntry().MakeReadOnly();
        private static readonly string[] _intIndexEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _intIndexEntryFieldTags = new uint[] { 8, 16 };
        public static IntIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override IntIndexEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override IntIndexEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_PbxHeader_IntIndexEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<IntIndexEntry, IntIndexEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_PbxHeader_IntIndexEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private int key_;
        public int Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private int value_;
        public int Value {
          get { return value_; }
          set { value_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _intIndexEntryFieldNames;
          if (Key != 0) {
            output.WriteInt32(1, field_names[0], Key);
          }
          if (Value != 0) {
            output.WriteInt32(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
          }
          if (Value != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static IntIndexEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static IntIndexEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static IntIndexEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IntIndexEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private IntIndexEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(IntIndexEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<IntIndexEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(IntIndexEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private IntIndexEntry result;

          private IntIndexEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              IntIndexEntry original = result;
              result = new IntIndexEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override IntIndexEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.PbxHeader.Types.IntIndexEntry.Descriptor; }
          }

          public override IntIndexEntry DefaultInstanceForType {
            get { return global::Master.PbxHeader.Types.IntIndexEntry.DefaultInstance; }
          }

          public override IntIndexEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is IntIndexEntry) {
              return MergeFrom((IntIndexEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(IntIndexEntry other) {
            if (other == global::Master.PbxHeader.Types.IntIndexEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != 0) {
              Key = other.Key;
            }
            if (other.Value != 0) {
              Value = other.Value;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_intIndexEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _intIndexEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.key_);
                  break;
                }
                case 16: {
                  input.ReadInt32(ref result.value_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(int value) {
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = 0;
            return this;
          }

          public int Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(int value) {
            PrepareBuilder();
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.value_ = 0;
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StringIndexEntry : pb::GeneratedMessage<StringIndexEntry, StringIndexEntry.Builder> {
        public StringIndexEntry() { }
        private static readonly StringIndexEntry defaultInstance = new StringIndexEntry().MakeReadOnly();
        private static readonly string[] _stringIndexEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _stringIndexEntryFieldTags = new uint[] { 10, 16 };
        public static StringIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override StringIndexEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override StringIndexEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_PbxHeader_StringIndexEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<StringIndexEntry, StringIndexEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_PbxHeader_StringIndexEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private string key_ = "";
        public string Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private int value_;
        public int Value {
          get { return value_; }
          set { value_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _stringIndexEntryFieldNames;
          if (Key != "") {
            output.WriteString(1, field_names[0], Key);
          }
          if (Value != 0) {
            output.WriteInt32(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != "") {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (Value != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static StringIndexEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StringIndexEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StringIndexEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StringIndexEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StringIndexEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StringIndexEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<StringIndexEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(StringIndexEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private StringIndexEntry result;

          private StringIndexEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              StringIndexEntry original = result;
              result = new StringIndexEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override StringIndexEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.PbxHeader.Types.StringIndexEntry.Descriptor; }
          }

          public override StringIndexEntry DefaultInstanceForType {
            get { return global::Master.PbxHeader.Types.StringIndexEntry.DefaultInstance; }
          }

          public override StringIndexEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is StringIndexEntry) {
              return MergeFrom((StringIndexEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(StringIndexEntry other) {
            if (other == global::Master.PbxHeader.Types.StringIndexEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != "") {
              Key = other.Key;
            }
            if (other.Value != 0) {
              Value = other.Value;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stringIndexEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stringIndexEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadString(ref result.key_);
                  break;
                }
                case 16: {
                  input.ReadInt32(ref result.value_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = "";
            return this;
          }

          public int Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(int value) {
            PrepareBuilder();
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.value_ = 0;
            return this;
          }
        }
      }

    }
    #endregion

    public const int IntIndexFieldNumber = 1;
    private pbc::PopsicleList<global::Master.PbxHeader.Types.IntIndexEntry> intIndex_ = new pbc::PopsicleList<global::Master.PbxHeader.Types.IntIndexEntry>();
    public scg::IList<global::Master.PbxHeader.Types.IntIndexEntry> IntIndexList {
      get { return intIndex_; }
    }
    public int IntIndexCount {
      get { return intIndex_.Count; }
    }
    public global::Master.PbxHeader.Types.IntIndexEntry GetIntIndex(int index) {
      return intIndex_[index];
    }

    public const int StringIndexFieldNumber = 2;
    private pbc::PopsicleList<global::Master.PbxHeader.Types.StringIndexEntry> stringIndex_ = new pbc::PopsicleList<global::Master.PbxHeader.Types.StringIndexEntry>();
    public scg::IList<global::Master.PbxHeader.Types.StringIndexEntry> StringIndexList {
      get { return stringIndex_; }
    }
    public int StringIndexCount {
      get { return stringIndex_.Count; }
    }
    public global::Master.PbxHeader.Types.StringIndexEntry GetStringIndex(int index) {
      return stringIndex_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pbxHeaderFieldNames;
      if (intIndex_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], intIndex_);
      }
      if (stringIndex_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], stringIndex_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::Master.PbxHeader.Types.IntIndexEntry element in IntIndexList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::Master.PbxHeader.Types.StringIndexEntry element in StringIndexList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PbxHeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PbxHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PbxHeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PbxHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PbxHeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PbxHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PbxHeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PbxHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PbxHeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PbxHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PbxHeader MakeReadOnly() {
      intIndex_.MakeReadOnly();
      stringIndex_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PbxHeader prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PbxHeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PbxHeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PbxHeader result;

      private PbxHeader PrepareBuilder() {
        if (resultIsReadOnly) {
          PbxHeader original = result;
          result = new PbxHeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PbxHeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PbxHeader.Descriptor; }
      }

      public override PbxHeader DefaultInstanceForType {
        get { return global::Master.PbxHeader.DefaultInstance; }
      }

      public override PbxHeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PbxHeader) {
          return MergeFrom((PbxHeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PbxHeader other) {
        if (other == global::Master.PbxHeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.intIndex_.Count != 0) {
          result.intIndex_.Add(other.intIndex_);
        }
        if (other.stringIndex_.Count != 0) {
          result.stringIndex_.Add(other.stringIndex_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pbxHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pbxHeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.intIndex_, global::Master.PbxHeader.Types.IntIndexEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.stringIndex_, global::Master.PbxHeader.Types.StringIndexEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::Master.PbxHeader.Types.IntIndexEntry> IntIndexList {
        get { return PrepareBuilder().intIndex_; }
      }
      public int IntIndexCount {
        get { return result.IntIndexCount; }
      }
      public global::Master.PbxHeader.Types.IntIndexEntry GetIntIndex(int index) {
        return result.GetIntIndex(index);
      }
      public Builder SetIntIndex(int index, global::Master.PbxHeader.Types.IntIndexEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.intIndex_[index] = value;
        return this;
      }
      public Builder SetIntIndex(int index, global::Master.PbxHeader.Types.IntIndexEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.intIndex_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIntIndex(global::Master.PbxHeader.Types.IntIndexEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.intIndex_.Add(value);
        return this;
      }
      public Builder AddIntIndex(global::Master.PbxHeader.Types.IntIndexEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.intIndex_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIntIndex(scg::IEnumerable<global::Master.PbxHeader.Types.IntIndexEntry> values) {
        PrepareBuilder();
        result.intIndex_.Add(values);
        return this;
      }
      public Builder ClearIntIndex() {
        PrepareBuilder();
        result.intIndex_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.PbxHeader.Types.StringIndexEntry> StringIndexList {
        get { return PrepareBuilder().stringIndex_; }
      }
      public int StringIndexCount {
        get { return result.StringIndexCount; }
      }
      public global::Master.PbxHeader.Types.StringIndexEntry GetStringIndex(int index) {
        return result.GetStringIndex(index);
      }
      public Builder SetStringIndex(int index, global::Master.PbxHeader.Types.StringIndexEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stringIndex_[index] = value;
        return this;
      }
      public Builder SetStringIndex(int index, global::Master.PbxHeader.Types.StringIndexEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stringIndex_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStringIndex(global::Master.PbxHeader.Types.StringIndexEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stringIndex_.Add(value);
        return this;
      }
      public Builder AddStringIndex(global::Master.PbxHeader.Types.StringIndexEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stringIndex_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStringIndex(scg::IEnumerable<global::Master.PbxHeader.Types.StringIndexEntry> values) {
        PrepareBuilder();
        result.stringIndex_.Add(values);
        return this;
      }
      public Builder ClearStringIndex() {
        PrepareBuilder();
        result.stringIndex_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PresentCommand : pb::GeneratedMessage<PresentCommand, PresentCommand.Builder> {
    public PresentCommand() { }
    private static readonly PresentCommand defaultInstance = new PresentCommand().MakeReadOnly();
    private static readonly string[] _presentCommandFieldNames = new string[] { "arms", "cards", "emerald", "gold", "scale", "stack_items" };
    private static readonly uint[] _presentCommandFieldTags = new uint[] { 50, 42, 8, 16, 24, 34 };
    public static PresentCommand DefaultInstance {
      get { return defaultInstance; }
    }

    public override PresentCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PresentCommand ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PresentCommand__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PresentCommand, PresentCommand.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PresentCommand__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StackItem : pb::GeneratedMessage<StackItem, StackItem.Builder> {
        public StackItem() { }
        private static readonly StackItem defaultInstance = new StackItem().MakeReadOnly();
        private static readonly string[] _stackItemFieldNames = new string[] { "id", "num" };
        private static readonly uint[] _stackItemFieldTags = new uint[] { 8, 16 };
        public static StackItem DefaultInstance {
          get { return defaultInstance; }
        }

        public override StackItem DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override StackItem ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_PresentCommand_StackItem__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<StackItem, StackItem.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_PresentCommand_StackItem__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private int id_;
        public int Id {
          get { return id_; }
          set { id_ = value; }
        }

        public const int NumFieldNumber = 2;
        private int num_;
        public int Num {
          get { return num_; }
          set { num_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _stackItemFieldNames;
          if (Id != 0) {
            output.WriteInt32(1, field_names[0], Id);
          }
          if (Num != 0) {
            output.WriteInt32(2, field_names[1], Num);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Id != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
          }
          if (Num != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static StackItem ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StackItem ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StackItem ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StackItem ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StackItem ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StackItem MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StackItem prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<StackItem, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(StackItem cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private StackItem result;

          private StackItem PrepareBuilder() {
            if (resultIsReadOnly) {
              StackItem original = result;
              result = new StackItem();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override StackItem MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.PresentCommand.Types.StackItem.Descriptor; }
          }

          public override StackItem DefaultInstanceForType {
            get { return global::Master.PresentCommand.Types.StackItem.DefaultInstance; }
          }

          public override StackItem BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is StackItem) {
              return MergeFrom((StackItem) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(StackItem other) {
            if (other == global::Master.PresentCommand.Types.StackItem.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Id != 0) {
              Id = other.Id;
            }
            if (other.Num != 0) {
              Num = other.Num;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stackItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stackItemFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.id_);
                  break;
                }
                case 16: {
                  input.ReadInt32(ref result.num_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.id_ = 0;
            return this;
          }

          public int Num {
            get { return result.Num; }
            set { SetNum(value); }
          }
          public Builder SetNum(int value) {
            PrepareBuilder();
            result.num_ = value;
            return this;
          }
          public Builder ClearNum() {
            PrepareBuilder();
            result.num_ = 0;
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Fang : pb::GeneratedMessage<Fang, Fang.Builder> {
        public Fang() { }
        private static readonly Fang defaultInstance = new Fang().MakeReadOnly();
        private static readonly string[] _fangFieldNames = new string[] { "card_id", "level", "num" };
        private static readonly uint[] _fangFieldTags = new uint[] { 8, 16, 24 };
        public static Fang DefaultInstance {
          get { return defaultInstance; }
        }

        public override Fang DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override Fang ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_PresentCommand_Fang__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Fang, Fang.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_PresentCommand_Fang__FieldAccessorTable; }
        }

        public const int CardIdFieldNumber = 1;
        private int cardId_;
        public int CardId {
          get { return cardId_; }
          set { cardId_ = value; }
        }

        public const int LevelFieldNumber = 2;
        private int level_;
        public int Level {
          get { return level_; }
          set { level_ = value; }
        }

        public const int NumFieldNumber = 3;
        private int num_;
        public int Num {
          get { return num_; }
          set { num_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _fangFieldNames;
          if (CardId != 0) {
            output.WriteInt32(1, field_names[0], CardId);
          }
          if (Level != 0) {
            output.WriteInt32(2, field_names[1], Level);
          }
          if (Num != 0) {
            output.WriteInt32(3, field_names[2], Num);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (CardId != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, CardId);
          }
          if (Level != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
          }
          if (Num != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Num);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Fang ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Fang ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Fang ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Fang ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Fang ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Fang ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Fang ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Fang ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Fang ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Fang ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Fang MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Fang prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Fang, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Fang cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private Fang result;

          private Fang PrepareBuilder() {
            if (resultIsReadOnly) {
              Fang original = result;
              result = new Fang();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override Fang MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.PresentCommand.Types.Fang.Descriptor; }
          }

          public override Fang DefaultInstanceForType {
            get { return global::Master.PresentCommand.Types.Fang.DefaultInstance; }
          }

          public override Fang BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Fang) {
              return MergeFrom((Fang) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(Fang other) {
            if (other == global::Master.PresentCommand.Types.Fang.DefaultInstance) return this;
            PrepareBuilder();
            if (other.CardId != 0) {
              CardId = other.CardId;
            }
            if (other.Level != 0) {
              Level = other.Level;
            }
            if (other.Num != 0) {
              Num = other.Num;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_fangFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _fangFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.cardId_);
                  break;
                }
                case 16: {
                  input.ReadInt32(ref result.level_);
                  break;
                }
                case 24: {
                  input.ReadInt32(ref result.num_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int CardId {
            get { return result.CardId; }
            set { SetCardId(value); }
          }
          public Builder SetCardId(int value) {
            PrepareBuilder();
            result.cardId_ = value;
            return this;
          }
          public Builder ClearCardId() {
            PrepareBuilder();
            result.cardId_ = 0;
            return this;
          }

          public int Level {
            get { return result.Level; }
            set { SetLevel(value); }
          }
          public Builder SetLevel(int value) {
            PrepareBuilder();
            result.level_ = value;
            return this;
          }
          public Builder ClearLevel() {
            PrepareBuilder();
            result.level_ = 0;
            return this;
          }

          public int Num {
            get { return result.Num; }
            set { SetNum(value); }
          }
          public Builder SetNum(int value) {
            PrepareBuilder();
            result.num_ = value;
            return this;
          }
          public Builder ClearNum() {
            PrepareBuilder();
            result.num_ = 0;
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Armament : pb::GeneratedMessage<Armament, Armament.Builder> {
        public Armament() { }
        private static readonly Armament defaultInstance = new Armament().MakeReadOnly();
        private static readonly string[] _armamentFieldNames = new string[] { "arm_id", "fixed_attack", "fixed_defense", "fixed_hp", "level", "num", "slot_num", "soul_id0", "soul_level0" };
        private static readonly uint[] _armamentFieldTags = new uint[] { 8, 32, 40, 24, 16, 72, 64, 48, 56 };
        public static Armament DefaultInstance {
          get { return defaultInstance; }
        }

        public override Armament DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override Armament ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_PresentCommand_Armament__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Armament, Armament.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_PresentCommand_Armament__FieldAccessorTable; }
        }

        public const int ArmIdFieldNumber = 1;
        private int armId_;
        public int ArmId {
          get { return armId_; }
          set { armId_ = value; }
        }

        public const int LevelFieldNumber = 2;
        private int level_;
        public int Level {
          get { return level_; }
          set { level_ = value; }
        }

        public const int FixedHpFieldNumber = 3;
        private int fixedHp_;
        public int FixedHp {
          get { return fixedHp_; }
          set { fixedHp_ = value; }
        }

        public const int FixedAttackFieldNumber = 4;
        private int fixedAttack_;
        public int FixedAttack {
          get { return fixedAttack_; }
          set { fixedAttack_ = value; }
        }

        public const int FixedDefenseFieldNumber = 5;
        private int fixedDefense_;
        public int FixedDefense {
          get { return fixedDefense_; }
          set { fixedDefense_ = value; }
        }

        public const int SoulId0FieldNumber = 6;
        private int soulId0_;
        public int SoulId0 {
          get { return soulId0_; }
          set { soulId0_ = value; }
        }

        public const int SoulLevel0FieldNumber = 7;
        private int soulLevel0_;
        public int SoulLevel0 {
          get { return soulLevel0_; }
          set { soulLevel0_ = value; }
        }

        public const int SlotNumFieldNumber = 8;
        private int slotNum_;
        public int SlotNum {
          get { return slotNum_; }
          set { slotNum_ = value; }
        }

        public const int NumFieldNumber = 9;
        private int num_;
        public int Num {
          get { return num_; }
          set { num_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _armamentFieldNames;
          if (ArmId != 0) {
            output.WriteInt32(1, field_names[0], ArmId);
          }
          if (Level != 0) {
            output.WriteInt32(2, field_names[4], Level);
          }
          if (FixedHp != 0) {
            output.WriteInt32(3, field_names[3], FixedHp);
          }
          if (FixedAttack != 0) {
            output.WriteInt32(4, field_names[1], FixedAttack);
          }
          if (FixedDefense != 0) {
            output.WriteInt32(5, field_names[2], FixedDefense);
          }
          if (SoulId0 != 0) {
            output.WriteInt32(6, field_names[7], SoulId0);
          }
          if (SoulLevel0 != 0) {
            output.WriteInt32(7, field_names[8], SoulLevel0);
          }
          if (SlotNum != 0) {
            output.WriteInt32(8, field_names[6], SlotNum);
          }
          if (Num != 0) {
            output.WriteInt32(9, field_names[5], Num);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (ArmId != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, ArmId);
          }
          if (Level != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
          }
          if (FixedHp != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, FixedHp);
          }
          if (FixedAttack != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(4, FixedAttack);
          }
          if (FixedDefense != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(5, FixedDefense);
          }
          if (SoulId0 != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(6, SoulId0);
          }
          if (SoulLevel0 != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(7, SoulLevel0);
          }
          if (SlotNum != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(8, SlotNum);
          }
          if (Num != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(9, Num);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Armament ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Armament ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Armament ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Armament ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Armament ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Armament ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Armament ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Armament ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Armament ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Armament ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Armament MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Armament prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Armament, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Armament cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private Armament result;

          private Armament PrepareBuilder() {
            if (resultIsReadOnly) {
              Armament original = result;
              result = new Armament();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override Armament MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.PresentCommand.Types.Armament.Descriptor; }
          }

          public override Armament DefaultInstanceForType {
            get { return global::Master.PresentCommand.Types.Armament.DefaultInstance; }
          }

          public override Armament BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Armament) {
              return MergeFrom((Armament) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(Armament other) {
            if (other == global::Master.PresentCommand.Types.Armament.DefaultInstance) return this;
            PrepareBuilder();
            if (other.ArmId != 0) {
              ArmId = other.ArmId;
            }
            if (other.Level != 0) {
              Level = other.Level;
            }
            if (other.FixedHp != 0) {
              FixedHp = other.FixedHp;
            }
            if (other.FixedAttack != 0) {
              FixedAttack = other.FixedAttack;
            }
            if (other.FixedDefense != 0) {
              FixedDefense = other.FixedDefense;
            }
            if (other.SoulId0 != 0) {
              SoulId0 = other.SoulId0;
            }
            if (other.SoulLevel0 != 0) {
              SoulLevel0 = other.SoulLevel0;
            }
            if (other.SlotNum != 0) {
              SlotNum = other.SlotNum;
            }
            if (other.Num != 0) {
              Num = other.Num;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_armamentFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _armamentFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.armId_);
                  break;
                }
                case 16: {
                  input.ReadInt32(ref result.level_);
                  break;
                }
                case 24: {
                  input.ReadInt32(ref result.fixedHp_);
                  break;
                }
                case 32: {
                  input.ReadInt32(ref result.fixedAttack_);
                  break;
                }
                case 40: {
                  input.ReadInt32(ref result.fixedDefense_);
                  break;
                }
                case 48: {
                  input.ReadInt32(ref result.soulId0_);
                  break;
                }
                case 56: {
                  input.ReadInt32(ref result.soulLevel0_);
                  break;
                }
                case 64: {
                  input.ReadInt32(ref result.slotNum_);
                  break;
                }
                case 72: {
                  input.ReadInt32(ref result.num_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int ArmId {
            get { return result.ArmId; }
            set { SetArmId(value); }
          }
          public Builder SetArmId(int value) {
            PrepareBuilder();
            result.armId_ = value;
            return this;
          }
          public Builder ClearArmId() {
            PrepareBuilder();
            result.armId_ = 0;
            return this;
          }

          public int Level {
            get { return result.Level; }
            set { SetLevel(value); }
          }
          public Builder SetLevel(int value) {
            PrepareBuilder();
            result.level_ = value;
            return this;
          }
          public Builder ClearLevel() {
            PrepareBuilder();
            result.level_ = 0;
            return this;
          }

          public int FixedHp {
            get { return result.FixedHp; }
            set { SetFixedHp(value); }
          }
          public Builder SetFixedHp(int value) {
            PrepareBuilder();
            result.fixedHp_ = value;
            return this;
          }
          public Builder ClearFixedHp() {
            PrepareBuilder();
            result.fixedHp_ = 0;
            return this;
          }

          public int FixedAttack {
            get { return result.FixedAttack; }
            set { SetFixedAttack(value); }
          }
          public Builder SetFixedAttack(int value) {
            PrepareBuilder();
            result.fixedAttack_ = value;
            return this;
          }
          public Builder ClearFixedAttack() {
            PrepareBuilder();
            result.fixedAttack_ = 0;
            return this;
          }

          public int FixedDefense {
            get { return result.FixedDefense; }
            set { SetFixedDefense(value); }
          }
          public Builder SetFixedDefense(int value) {
            PrepareBuilder();
            result.fixedDefense_ = value;
            return this;
          }
          public Builder ClearFixedDefense() {
            PrepareBuilder();
            result.fixedDefense_ = 0;
            return this;
          }

          public int SoulId0 {
            get { return result.SoulId0; }
            set { SetSoulId0(value); }
          }
          public Builder SetSoulId0(int value) {
            PrepareBuilder();
            result.soulId0_ = value;
            return this;
          }
          public Builder ClearSoulId0() {
            PrepareBuilder();
            result.soulId0_ = 0;
            return this;
          }

          public int SoulLevel0 {
            get { return result.SoulLevel0; }
            set { SetSoulLevel0(value); }
          }
          public Builder SetSoulLevel0(int value) {
            PrepareBuilder();
            result.soulLevel0_ = value;
            return this;
          }
          public Builder ClearSoulLevel0() {
            PrepareBuilder();
            result.soulLevel0_ = 0;
            return this;
          }

          public int SlotNum {
            get { return result.SlotNum; }
            set { SetSlotNum(value); }
          }
          public Builder SetSlotNum(int value) {
            PrepareBuilder();
            result.slotNum_ = value;
            return this;
          }
          public Builder ClearSlotNum() {
            PrepareBuilder();
            result.slotNum_ = 0;
            return this;
          }

          public int Num {
            get { return result.Num; }
            set { SetNum(value); }
          }
          public Builder SetNum(int value) {
            PrepareBuilder();
            result.num_ = value;
            return this;
          }
          public Builder ClearNum() {
            PrepareBuilder();
            result.num_ = 0;
            return this;
          }
        }
      }

    }
    #endregion

    public const int EmeraldFieldNumber = 1;
    private int emerald_;
    public int Emerald {
      get { return emerald_; }
      set { emerald_ = value; }
    }

    public const int GoldFieldNumber = 2;
    private int gold_;
    public int Gold {
      get { return gold_; }
      set { gold_ = value; }
    }

    public const int ScaleFieldNumber = 3;
    private int scale_;
    public int Scale {
      get { return scale_; }
      set { scale_ = value; }
    }

    public const int StackItemsFieldNumber = 4;
    private pbc::PopsicleList<global::Master.PresentCommand.Types.StackItem> stackItems_ = new pbc::PopsicleList<global::Master.PresentCommand.Types.StackItem>();
    public scg::IList<global::Master.PresentCommand.Types.StackItem> StackItemsList {
      get { return stackItems_; }
    }
    public int StackItemsCount {
      get { return stackItems_.Count; }
    }
    public global::Master.PresentCommand.Types.StackItem GetStackItems(int index) {
      return stackItems_[index];
    }

    public const int CardsFieldNumber = 5;
    private pbc::PopsicleList<global::Master.PresentCommand.Types.Fang> cards_ = new pbc::PopsicleList<global::Master.PresentCommand.Types.Fang>();
    public scg::IList<global::Master.PresentCommand.Types.Fang> CardsList {
      get { return cards_; }
    }
    public int CardsCount {
      get { return cards_.Count; }
    }
    public global::Master.PresentCommand.Types.Fang GetCards(int index) {
      return cards_[index];
    }

    public const int ArmsFieldNumber = 6;
    private pbc::PopsicleList<global::Master.PresentCommand.Types.Armament> arms_ = new pbc::PopsicleList<global::Master.PresentCommand.Types.Armament>();
    public scg::IList<global::Master.PresentCommand.Types.Armament> ArmsList {
      get { return arms_; }
    }
    public int ArmsCount {
      get { return arms_.Count; }
    }
    public global::Master.PresentCommand.Types.Armament GetArms(int index) {
      return arms_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _presentCommandFieldNames;
      if (Emerald != 0) {
        output.WriteInt32(1, field_names[2], Emerald);
      }
      if (Gold != 0) {
        output.WriteInt32(2, field_names[3], Gold);
      }
      if (Scale != 0) {
        output.WriteInt32(3, field_names[4], Scale);
      }
      if (stackItems_.Count > 0) {
        output.WriteMessageArray(4, field_names[5], stackItems_);
      }
      if (cards_.Count > 0) {
        output.WriteMessageArray(5, field_names[1], cards_);
      }
      if (arms_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], arms_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Emerald != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Emerald);
      }
      if (Gold != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Gold);
      }
      if (Scale != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Scale);
      }
      foreach (global::Master.PresentCommand.Types.StackItem element in StackItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::Master.PresentCommand.Types.Fang element in CardsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      foreach (global::Master.PresentCommand.Types.Armament element in ArmsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PresentCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresentCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresentCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresentCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresentCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresentCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PresentCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PresentCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PresentCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresentCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PresentCommand MakeReadOnly() {
      stackItems_.MakeReadOnly();
      cards_.MakeReadOnly();
      arms_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PresentCommand prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PresentCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PresentCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PresentCommand result;

      private PresentCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          PresentCommand original = result;
          result = new PresentCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PresentCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PresentCommand.Descriptor; }
      }

      public override PresentCommand DefaultInstanceForType {
        get { return global::Master.PresentCommand.DefaultInstance; }
      }

      public override PresentCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PresentCommand) {
          return MergeFrom((PresentCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PresentCommand other) {
        if (other == global::Master.PresentCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Emerald != 0) {
          Emerald = other.Emerald;
        }
        if (other.Gold != 0) {
          Gold = other.Gold;
        }
        if (other.Scale != 0) {
          Scale = other.Scale;
        }
        if (other.stackItems_.Count != 0) {
          result.stackItems_.Add(other.stackItems_);
        }
        if (other.cards_.Count != 0) {
          result.cards_.Add(other.cards_);
        }
        if (other.arms_.Count != 0) {
          result.arms_.Add(other.arms_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_presentCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _presentCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.emerald_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.gold_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.scale_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.stackItems_, global::Master.PresentCommand.Types.StackItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.cards_, global::Master.PresentCommand.Types.Fang.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.arms_, global::Master.PresentCommand.Types.Armament.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Emerald {
        get { return result.Emerald; }
        set { SetEmerald(value); }
      }
      public Builder SetEmerald(int value) {
        PrepareBuilder();
        result.emerald_ = value;
        return this;
      }
      public Builder ClearEmerald() {
        PrepareBuilder();
        result.emerald_ = 0;
        return this;
      }

      public int Gold {
        get { return result.Gold; }
        set { SetGold(value); }
      }
      public Builder SetGold(int value) {
        PrepareBuilder();
        result.gold_ = value;
        return this;
      }
      public Builder ClearGold() {
        PrepareBuilder();
        result.gold_ = 0;
        return this;
      }

      public int Scale {
        get { return result.Scale; }
        set { SetScale(value); }
      }
      public Builder SetScale(int value) {
        PrepareBuilder();
        result.scale_ = value;
        return this;
      }
      public Builder ClearScale() {
        PrepareBuilder();
        result.scale_ = 0;
        return this;
      }

      public pbc::IPopsicleList<global::Master.PresentCommand.Types.StackItem> StackItemsList {
        get { return PrepareBuilder().stackItems_; }
      }
      public int StackItemsCount {
        get { return result.StackItemsCount; }
      }
      public global::Master.PresentCommand.Types.StackItem GetStackItems(int index) {
        return result.GetStackItems(index);
      }
      public Builder SetStackItems(int index, global::Master.PresentCommand.Types.StackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stackItems_[index] = value;
        return this;
      }
      public Builder SetStackItems(int index, global::Master.PresentCommand.Types.StackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stackItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStackItems(global::Master.PresentCommand.Types.StackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stackItems_.Add(value);
        return this;
      }
      public Builder AddStackItems(global::Master.PresentCommand.Types.StackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stackItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStackItems(scg::IEnumerable<global::Master.PresentCommand.Types.StackItem> values) {
        PrepareBuilder();
        result.stackItems_.Add(values);
        return this;
      }
      public Builder ClearStackItems() {
        PrepareBuilder();
        result.stackItems_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.PresentCommand.Types.Fang> CardsList {
        get { return PrepareBuilder().cards_; }
      }
      public int CardsCount {
        get { return result.CardsCount; }
      }
      public global::Master.PresentCommand.Types.Fang GetCards(int index) {
        return result.GetCards(index);
      }
      public Builder SetCards(int index, global::Master.PresentCommand.Types.Fang value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cards_[index] = value;
        return this;
      }
      public Builder SetCards(int index, global::Master.PresentCommand.Types.Fang.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cards_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCards(global::Master.PresentCommand.Types.Fang value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cards_.Add(value);
        return this;
      }
      public Builder AddCards(global::Master.PresentCommand.Types.Fang.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cards_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCards(scg::IEnumerable<global::Master.PresentCommand.Types.Fang> values) {
        PrepareBuilder();
        result.cards_.Add(values);
        return this;
      }
      public Builder ClearCards() {
        PrepareBuilder();
        result.cards_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.PresentCommand.Types.Armament> ArmsList {
        get { return PrepareBuilder().arms_; }
      }
      public int ArmsCount {
        get { return result.ArmsCount; }
      }
      public global::Master.PresentCommand.Types.Armament GetArms(int index) {
        return result.GetArms(index);
      }
      public Builder SetArms(int index, global::Master.PresentCommand.Types.Armament value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.arms_[index] = value;
        return this;
      }
      public Builder SetArms(int index, global::Master.PresentCommand.Types.Armament.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.arms_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddArms(global::Master.PresentCommand.Types.Armament value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.arms_.Add(value);
        return this;
      }
      public Builder AddArms(global::Master.PresentCommand.Types.Armament.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.arms_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeArms(scg::IEnumerable<global::Master.PresentCommand.Types.Armament> values) {
        PrepareBuilder();
        result.arms_.Add(values);
        return this;
      }
      public Builder ClearArms() {
        PrepareBuilder();
        result.arms_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FangTemplate : pb::GeneratedMessage<FangTemplate, FangTemplate.Builder> {
    public FangTemplate() { }
    private static readonly FangTemplate defaultInstance = new FangTemplate().MakeReadOnly();
    private static readonly string[] _fangTemplateFieldNames = new string[] { "attribute", "auto_type", "base_attack", "base_defense", "base_hp", "brave_guage", "burst_cost", "burst_hp_rate", "cost", "default_plus_attack", "default_plus_defense", "default_plus_hp", "drop_stack_item_bonus", "enemy_no", "gold", "growth_type", "id", "limit_break_item", "limit_break_type", "max_attack", "max_defense", "max_hp", "max_level", "name", "no_plus_skill_property_bonus", "open_at", "plus_exp", "plus_luck", "plus_skill_exp", "plus_skill_rarity", "point", "property", "pskill_id", "pvp_attribute0", "pvp_attribute1", "pvp_attribute2", "pvp_attribute3", "pvp_attribute4", "pvp_skill_id", "pvp_soul_id", "rarity", "serif", "shield_ability_id", "skill_id", "special_label", "special_text", "stack_item_bonus", "unuse", "weapon_ability_id" };
    private static readonly uint[] _fangTemplateFieldTags = new uint[] { 282, 394, 72, 80, 64, 56, 192, 120, 184, 232, 240, 224, 298, 40, 160, 32, 8, 216, 210, 104, 112, 96, 88, 18, 272, 306, 168, 320, 256, 264, 344, 50, 136, 354, 362, 370, 378, 386, 144, 152, 24, 178, 336, 128, 314, 250, 290, 200, 328 };
    public static FangTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override FangTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override FangTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_FangTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<FangTemplate, FangTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_FangTemplate__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StackItemBonus : pb::GeneratedMessage<StackItemBonus, StackItemBonus.Builder> {
        public StackItemBonus() { }
        private static readonly StackItemBonus defaultInstance = new StackItemBonus().MakeReadOnly();
        private static readonly string[] _stackItemBonusFieldNames = new string[] { "dummy" };
        private static readonly uint[] _stackItemBonusFieldTags = new uint[] { 8 };
        public static StackItemBonus DefaultInstance {
          get { return defaultInstance; }
        }

        public override StackItemBonus DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override StackItemBonus ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_FangTemplate_StackItemBonus__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<StackItemBonus, StackItemBonus.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_FangTemplate_StackItemBonus__FieldAccessorTable; }
        }

        public const int DummyFieldNumber = 1;
        private int dummy_;
        public int Dummy {
          get { return dummy_; }
          set { dummy_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _stackItemBonusFieldNames;
          if (Dummy != 0) {
            output.WriteInt32(1, field_names[0], Dummy);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Dummy != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Dummy);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static StackItemBonus ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StackItemBonus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StackItemBonus ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StackItemBonus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StackItemBonus ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StackItemBonus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StackItemBonus ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StackItemBonus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StackItemBonus ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StackItemBonus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StackItemBonus MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StackItemBonus prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<StackItemBonus, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(StackItemBonus cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private StackItemBonus result;

          private StackItemBonus PrepareBuilder() {
            if (resultIsReadOnly) {
              StackItemBonus original = result;
              result = new StackItemBonus();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override StackItemBonus MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.FangTemplate.Types.StackItemBonus.Descriptor; }
          }

          public override StackItemBonus DefaultInstanceForType {
            get { return global::Master.FangTemplate.Types.StackItemBonus.DefaultInstance; }
          }

          public override StackItemBonus BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is StackItemBonus) {
              return MergeFrom((StackItemBonus) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(StackItemBonus other) {
            if (other == global::Master.FangTemplate.Types.StackItemBonus.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Dummy != 0) {
              Dummy = other.Dummy;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stackItemBonusFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stackItemBonusFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.dummy_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int Dummy {
            get { return result.Dummy; }
            set { SetDummy(value); }
          }
          public Builder SetDummy(int value) {
            PrepareBuilder();
            result.dummy_ = value;
            return this;
          }
          public Builder ClearDummy() {
            PrepareBuilder();
            result.dummy_ = 0;
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StackItemBonusEntry : pb::GeneratedMessage<StackItemBonusEntry, StackItemBonusEntry.Builder> {
        public StackItemBonusEntry() { }
        private static readonly StackItemBonusEntry defaultInstance = new StackItemBonusEntry().MakeReadOnly();
        private static readonly string[] _stackItemBonusEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _stackItemBonusEntryFieldTags = new uint[] { 10, 21 };
        public static StackItemBonusEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override StackItemBonusEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override StackItemBonusEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_FangTemplate_StackItemBonusEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<StackItemBonusEntry, StackItemBonusEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_FangTemplate_StackItemBonusEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private string key_ = "";
        public string Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private float value_;
        public float Value {
          get { return value_; }
          set { value_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _stackItemBonusEntryFieldNames;
          if (Key != "") {
            output.WriteString(1, field_names[0], Key);
          }
          if (Value != 0F) {
            output.WriteFloat(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != "") {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (Value != 0F) {
            size += pb::CodedOutputStream.ComputeFloatSize(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static StackItemBonusEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StackItemBonusEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StackItemBonusEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StackItemBonusEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StackItemBonusEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StackItemBonusEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<StackItemBonusEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(StackItemBonusEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private StackItemBonusEntry result;

          private StackItemBonusEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              StackItemBonusEntry original = result;
              result = new StackItemBonusEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override StackItemBonusEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.FangTemplate.Types.StackItemBonusEntry.Descriptor; }
          }

          public override StackItemBonusEntry DefaultInstanceForType {
            get { return global::Master.FangTemplate.Types.StackItemBonusEntry.DefaultInstance; }
          }

          public override StackItemBonusEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is StackItemBonusEntry) {
              return MergeFrom((StackItemBonusEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(StackItemBonusEntry other) {
            if (other == global::Master.FangTemplate.Types.StackItemBonusEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != "") {
              Key = other.Key;
            }
            if (other.Value != 0F) {
              Value = other.Value;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stackItemBonusEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stackItemBonusEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadString(ref result.key_);
                  break;
                }
                case 21: {
                  input.ReadFloat(ref result.value_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = "";
            return this;
          }

          public float Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(float value) {
            PrepareBuilder();
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.value_ = 0F;
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DropStackItemBonusEntry : pb::GeneratedMessage<DropStackItemBonusEntry, DropStackItemBonusEntry.Builder> {
        public DropStackItemBonusEntry() { }
        private static readonly DropStackItemBonusEntry defaultInstance = new DropStackItemBonusEntry().MakeReadOnly();
        private static readonly string[] _dropStackItemBonusEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _dropStackItemBonusEntryFieldTags = new uint[] { 10, 21 };
        public static DropStackItemBonusEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override DropStackItemBonusEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override DropStackItemBonusEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_FangTemplate_DropStackItemBonusEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DropStackItemBonusEntry, DropStackItemBonusEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_FangTemplate_DropStackItemBonusEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private string key_ = "";
        public string Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private float value_;
        public float Value {
          get { return value_; }
          set { value_ = value; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _dropStackItemBonusEntryFieldNames;
          if (Key != "") {
            output.WriteString(1, field_names[0], Key);
          }
          if (Value != 0F) {
            output.WriteFloat(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != "") {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (Value != 0F) {
            size += pb::CodedOutputStream.ComputeFloatSize(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static DropStackItemBonusEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DropStackItemBonusEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DropStackItemBonusEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DropStackItemBonusEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DropStackItemBonusEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DropStackItemBonusEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private DropStackItemBonusEntry result;

          private DropStackItemBonusEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              DropStackItemBonusEntry original = result;
              result = new DropStackItemBonusEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override DropStackItemBonusEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.FangTemplate.Types.DropStackItemBonusEntry.Descriptor; }
          }

          public override DropStackItemBonusEntry DefaultInstanceForType {
            get { return global::Master.FangTemplate.Types.DropStackItemBonusEntry.DefaultInstance; }
          }

          public override DropStackItemBonusEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DropStackItemBonusEntry) {
              return MergeFrom((DropStackItemBonusEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(DropStackItemBonusEntry other) {
            if (other == global::Master.FangTemplate.Types.DropStackItemBonusEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != "") {
              Key = other.Key;
            }
            if (other.Value != 0F) {
              Value = other.Value;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_dropStackItemBonusEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _dropStackItemBonusEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadString(ref result.key_);
                  break;
                }
                case 21: {
                  input.ReadFloat(ref result.value_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = "";
            return this;
          }

          public float Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(float value) {
            PrepareBuilder();
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.value_ = 0F;
            return this;
          }
        }
      }

    }
    #endregion

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int RarityFieldNumber = 3;
    private int rarity_;
    public int Rarity {
      get { return rarity_; }
      set { rarity_ = value; }
    }

    public const int GrowthTypeFieldNumber = 4;
    private int growthType_;
    public int GrowthType {
      get { return growthType_; }
      set { growthType_ = value; }
    }

    public const int EnemyNoFieldNumber = 5;
    private int enemyNo_;
    public int EnemyNo {
      get { return enemyNo_; }
      set { enemyNo_ = value; }
    }

    public const int PropertyFieldNumber = 6;
    private string property_ = "";
    public string Property {
      get { return property_; }
      set { property_ = value; }
    }

    public const int BraveGuageFieldNumber = 7;
    private int braveGuage_;
    public int BraveGuage {
      get { return braveGuage_; }
      set { braveGuage_ = value; }
    }

    public const int BaseHpFieldNumber = 8;
    private int baseHp_;
    public int BaseHp {
      get { return baseHp_; }
      set { baseHp_ = value; }
    }

    public const int BaseAttackFieldNumber = 9;
    private int baseAttack_;
    public int BaseAttack {
      get { return baseAttack_; }
      set { baseAttack_ = value; }
    }

    public const int BaseDefenseFieldNumber = 10;
    private int baseDefense_;
    public int BaseDefense {
      get { return baseDefense_; }
      set { baseDefense_ = value; }
    }

    public const int MaxLevelFieldNumber = 11;
    private int maxLevel_;
    public int MaxLevel {
      get { return maxLevel_; }
      set { maxLevel_ = value; }
    }

    public const int MaxHpFieldNumber = 12;
    private int maxHp_;
    public int MaxHp {
      get { return maxHp_; }
      set { maxHp_ = value; }
    }

    public const int MaxAttackFieldNumber = 13;
    private int maxAttack_;
    public int MaxAttack {
      get { return maxAttack_; }
      set { maxAttack_ = value; }
    }

    public const int MaxDefenseFieldNumber = 14;
    private int maxDefense_;
    public int MaxDefense {
      get { return maxDefense_; }
      set { maxDefense_ = value; }
    }

    public const int BurstHpRateFieldNumber = 15;
    private int burstHpRate_;
    public int BurstHpRate {
      get { return burstHpRate_; }
      set { burstHpRate_ = value; }
    }

    public const int SkillIdFieldNumber = 16;
    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set { skillId_ = value; }
    }

    public const int PskillIdFieldNumber = 17;
    private int pskillId_;
    public int PskillId {
      get { return pskillId_; }
      set { pskillId_ = value; }
    }

    public const int PvpSkillIdFieldNumber = 18;
    private int pvpSkillId_;
    public int PvpSkillId {
      get { return pvpSkillId_; }
      set { pvpSkillId_ = value; }
    }

    public const int PvpSoulIdFieldNumber = 19;
    private int pvpSoulId_;
    public int PvpSoulId {
      get { return pvpSoulId_; }
      set { pvpSoulId_ = value; }
    }

    public const int GoldFieldNumber = 20;
    private int gold_;
    public int Gold {
      get { return gold_; }
      set { gold_ = value; }
    }

    public const int PlusExpFieldNumber = 21;
    private int plusExp_;
    public int PlusExp {
      get { return plusExp_; }
      set { plusExp_ = value; }
    }

    public const int SerifFieldNumber = 22;
    private string serif_ = "";
    public string Serif {
      get { return serif_; }
      set { serif_ = value; }
    }

    public const int CostFieldNumber = 23;
    private int cost_;
    public int Cost {
      get { return cost_; }
      set { cost_ = value; }
    }

    public const int BurstCostFieldNumber = 24;
    private int burstCost_;
    public int BurstCost {
      get { return burstCost_; }
      set { burstCost_ = value; }
    }

    public const int UnuseFieldNumber = 25;
    private bool unuse_;
    public bool Unuse {
      get { return unuse_; }
      set { unuse_ = value; }
    }

    public const int LimitBreakTypeFieldNumber = 26;
    private pbc::PopsicleList<string> limitBreakType_ = new pbc::PopsicleList<string>();
    public scg::IList<string> LimitBreakTypeList {
      get { return pbc::Lists.AsReadOnly(limitBreakType_); }
    }
    public int LimitBreakTypeCount {
      get { return limitBreakType_.Count; }
    }
    public string GetLimitBreakType(int index) {
      return limitBreakType_[index];
    }

    public const int LimitBreakItemFieldNumber = 27;
    private int limitBreakItem_;
    public int LimitBreakItem {
      get { return limitBreakItem_; }
      set { limitBreakItem_ = value; }
    }

    public const int DefaultPlusHpFieldNumber = 28;
    private int defaultPlusHp_;
    public int DefaultPlusHp {
      get { return defaultPlusHp_; }
      set { defaultPlusHp_ = value; }
    }

    public const int DefaultPlusAttackFieldNumber = 29;
    private int defaultPlusAttack_;
    public int DefaultPlusAttack {
      get { return defaultPlusAttack_; }
      set { defaultPlusAttack_ = value; }
    }

    public const int DefaultPlusDefenseFieldNumber = 30;
    private int defaultPlusDefense_;
    public int DefaultPlusDefense {
      get { return defaultPlusDefense_; }
      set { defaultPlusDefense_ = value; }
    }

    public const int SpecialTextFieldNumber = 31;
    private string specialText_ = "";
    public string SpecialText {
      get { return specialText_; }
      set { specialText_ = value; }
    }

    public const int PlusSkillExpFieldNumber = 32;
    private int plusSkillExp_;
    public int PlusSkillExp {
      get { return plusSkillExp_; }
      set { plusSkillExp_ = value; }
    }

    public const int PlusSkillRarityFieldNumber = 33;
    private int plusSkillRarity_;
    public int PlusSkillRarity {
      get { return plusSkillRarity_; }
      set { plusSkillRarity_ = value; }
    }

    public const int NoPlusSkillPropertyBonusFieldNumber = 34;
    private bool noPlusSkillPropertyBonus_;
    public bool NoPlusSkillPropertyBonus {
      get { return noPlusSkillPropertyBonus_; }
      set { noPlusSkillPropertyBonus_ = value; }
    }

    public const int AttributeFieldNumber = 35;
    private pbc::PopsicleList<string> attribute_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AttributeList {
      get { return pbc::Lists.AsReadOnly(attribute_); }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public string GetAttribute(int index) {
      return attribute_[index];
    }

    public const int StackItemBonusFieldNumber = 36;
    private pbc::PopsicleList<global::Master.FangTemplate.Types.StackItemBonusEntry> stackItemBonus_ = new pbc::PopsicleList<global::Master.FangTemplate.Types.StackItemBonusEntry>();
    public scg::IList<global::Master.FangTemplate.Types.StackItemBonusEntry> StackItemBonusList {
      get { return stackItemBonus_; }
    }
    public int StackItemBonusCount {
      get { return stackItemBonus_.Count; }
    }
    public global::Master.FangTemplate.Types.StackItemBonusEntry GetStackItemBonus(int index) {
      return stackItemBonus_[index];
    }

    public const int DropStackItemBonusFieldNumber = 37;
    private pbc::PopsicleList<global::Master.FangTemplate.Types.DropStackItemBonusEntry> dropStackItemBonus_ = new pbc::PopsicleList<global::Master.FangTemplate.Types.DropStackItemBonusEntry>();
    public scg::IList<global::Master.FangTemplate.Types.DropStackItemBonusEntry> DropStackItemBonusList {
      get { return dropStackItemBonus_; }
    }
    public int DropStackItemBonusCount {
      get { return dropStackItemBonus_.Count; }
    }
    public global::Master.FangTemplate.Types.DropStackItemBonusEntry GetDropStackItemBonus(int index) {
      return dropStackItemBonus_[index];
    }

    public const int OpenAtFieldNumber = 38;
    private string openAt_ = "";
    public string OpenAt {
      get { return openAt_; }
      set { openAt_ = value; }
    }

    public const int SpecialLabelFieldNumber = 39;
    private string specialLabel_ = "";
    public string SpecialLabel {
      get { return specialLabel_; }
      set { specialLabel_ = value; }
    }

    public const int PlusLuckFieldNumber = 40;
    private int plusLuck_;
    public int PlusLuck {
      get { return plusLuck_; }
      set { plusLuck_ = value; }
    }

    public const int WeaponAbilityIdFieldNumber = 41;
    private int weaponAbilityId_;
    public int WeaponAbilityId {
      get { return weaponAbilityId_; }
      set { weaponAbilityId_ = value; }
    }

    public const int ShieldAbilityIdFieldNumber = 42;
    private int shieldAbilityId_;
    public int ShieldAbilityId {
      get { return shieldAbilityId_; }
      set { shieldAbilityId_ = value; }
    }

    public const int PointFieldNumber = 43;
    private int point_;
    public int Point {
      get { return point_; }
      set { point_ = value; }
    }

    public const int PvpAttribute0FieldNumber = 44;
    private string pvpAttribute0_ = "";
    public string PvpAttribute0 {
      get { return pvpAttribute0_; }
      set { pvpAttribute0_ = value; }
    }

    public const int PvpAttribute1FieldNumber = 45;
    private string pvpAttribute1_ = "";
    public string PvpAttribute1 {
      get { return pvpAttribute1_; }
      set { pvpAttribute1_ = value; }
    }

    public const int PvpAttribute2FieldNumber = 46;
    private string pvpAttribute2_ = "";
    public string PvpAttribute2 {
      get { return pvpAttribute2_; }
      set { pvpAttribute2_ = value; }
    }

    public const int PvpAttribute3FieldNumber = 47;
    private string pvpAttribute3_ = "";
    public string PvpAttribute3 {
      get { return pvpAttribute3_; }
      set { pvpAttribute3_ = value; }
    }

    public const int PvpAttribute4FieldNumber = 48;
    private string pvpAttribute4_ = "";
    public string PvpAttribute4 {
      get { return pvpAttribute4_; }
      set { pvpAttribute4_ = value; }
    }

    public const int AutoTypeFieldNumber = 49;
    private pbc::PopsicleList<string> autoType_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AutoTypeList {
      get { return pbc::Lists.AsReadOnly(autoType_); }
    }
    public int AutoTypeCount {
      get { return autoType_.Count; }
    }
    public string GetAutoType(int index) {
      return autoType_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fangTemplateFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[16], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[23], Name);
      }
      if (Rarity != 0) {
        output.WriteInt32(3, field_names[40], Rarity);
      }
      if (GrowthType != 0) {
        output.WriteInt32(4, field_names[15], GrowthType);
      }
      if (EnemyNo != 0) {
        output.WriteInt32(5, field_names[13], EnemyNo);
      }
      if (Property != "") {
        output.WriteString(6, field_names[31], Property);
      }
      if (BraveGuage != 0) {
        output.WriteInt32(7, field_names[5], BraveGuage);
      }
      if (BaseHp != 0) {
        output.WriteInt32(8, field_names[4], BaseHp);
      }
      if (BaseAttack != 0) {
        output.WriteInt32(9, field_names[2], BaseAttack);
      }
      if (BaseDefense != 0) {
        output.WriteInt32(10, field_names[3], BaseDefense);
      }
      if (MaxLevel != 0) {
        output.WriteInt32(11, field_names[22], MaxLevel);
      }
      if (MaxHp != 0) {
        output.WriteInt32(12, field_names[21], MaxHp);
      }
      if (MaxAttack != 0) {
        output.WriteInt32(13, field_names[19], MaxAttack);
      }
      if (MaxDefense != 0) {
        output.WriteInt32(14, field_names[20], MaxDefense);
      }
      if (BurstHpRate != 0) {
        output.WriteInt32(15, field_names[7], BurstHpRate);
      }
      if (SkillId != 0) {
        output.WriteInt32(16, field_names[43], SkillId);
      }
      if (PskillId != 0) {
        output.WriteInt32(17, field_names[32], PskillId);
      }
      if (PvpSkillId != 0) {
        output.WriteInt32(18, field_names[38], PvpSkillId);
      }
      if (PvpSoulId != 0) {
        output.WriteInt32(19, field_names[39], PvpSoulId);
      }
      if (Gold != 0) {
        output.WriteInt32(20, field_names[14], Gold);
      }
      if (PlusExp != 0) {
        output.WriteInt32(21, field_names[26], PlusExp);
      }
      if (Serif != "") {
        output.WriteString(22, field_names[41], Serif);
      }
      if (Cost != 0) {
        output.WriteInt32(23, field_names[8], Cost);
      }
      if (BurstCost != 0) {
        output.WriteInt32(24, field_names[6], BurstCost);
      }
      if (Unuse != false) {
        output.WriteBool(25, field_names[47], Unuse);
      }
      if (limitBreakType_.Count > 0) {
        output.WriteStringArray(26, field_names[18], limitBreakType_);
      }
      if (LimitBreakItem != 0) {
        output.WriteInt32(27, field_names[17], LimitBreakItem);
      }
      if (DefaultPlusHp != 0) {
        output.WriteInt32(28, field_names[11], DefaultPlusHp);
      }
      if (DefaultPlusAttack != 0) {
        output.WriteInt32(29, field_names[9], DefaultPlusAttack);
      }
      if (DefaultPlusDefense != 0) {
        output.WriteInt32(30, field_names[10], DefaultPlusDefense);
      }
      if (SpecialText != "") {
        output.WriteString(31, field_names[45], SpecialText);
      }
      if (PlusSkillExp != 0) {
        output.WriteInt32(32, field_names[28], PlusSkillExp);
      }
      if (PlusSkillRarity != 0) {
        output.WriteInt32(33, field_names[29], PlusSkillRarity);
      }
      if (NoPlusSkillPropertyBonus != false) {
        output.WriteBool(34, field_names[24], NoPlusSkillPropertyBonus);
      }
      if (attribute_.Count > 0) {
        output.WriteStringArray(35, field_names[0], attribute_);
      }
      if (stackItemBonus_.Count > 0) {
        output.WriteMessageArray(36, field_names[46], stackItemBonus_);
      }
      if (dropStackItemBonus_.Count > 0) {
        output.WriteMessageArray(37, field_names[12], dropStackItemBonus_);
      }
      if (OpenAt != "") {
        output.WriteString(38, field_names[25], OpenAt);
      }
      if (SpecialLabel != "") {
        output.WriteString(39, field_names[44], SpecialLabel);
      }
      if (PlusLuck != 0) {
        output.WriteInt32(40, field_names[27], PlusLuck);
      }
      if (WeaponAbilityId != 0) {
        output.WriteInt32(41, field_names[48], WeaponAbilityId);
      }
      if (ShieldAbilityId != 0) {
        output.WriteInt32(42, field_names[42], ShieldAbilityId);
      }
      if (Point != 0) {
        output.WriteInt32(43, field_names[30], Point);
      }
      if (PvpAttribute0 != "") {
        output.WriteString(44, field_names[33], PvpAttribute0);
      }
      if (PvpAttribute1 != "") {
        output.WriteString(45, field_names[34], PvpAttribute1);
      }
      if (PvpAttribute2 != "") {
        output.WriteString(46, field_names[35], PvpAttribute2);
      }
      if (PvpAttribute3 != "") {
        output.WriteString(47, field_names[36], PvpAttribute3);
      }
      if (PvpAttribute4 != "") {
        output.WriteString(48, field_names[37], PvpAttribute4);
      }
      if (autoType_.Count > 0) {
        output.WriteStringArray(49, field_names[1], autoType_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Rarity != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Rarity);
      }
      if (GrowthType != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, GrowthType);
      }
      if (EnemyNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, EnemyNo);
      }
      if (Property != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, Property);
      }
      if (BraveGuage != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, BraveGuage);
      }
      if (BaseHp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, BaseHp);
      }
      if (BaseAttack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, BaseAttack);
      }
      if (BaseDefense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, BaseDefense);
      }
      if (MaxLevel != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, MaxLevel);
      }
      if (MaxHp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, MaxHp);
      }
      if (MaxAttack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, MaxAttack);
      }
      if (MaxDefense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, MaxDefense);
      }
      if (BurstHpRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, BurstHpRate);
      }
      if (SkillId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, SkillId);
      }
      if (PskillId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, PskillId);
      }
      if (PvpSkillId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, PvpSkillId);
      }
      if (PvpSoulId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, PvpSoulId);
      }
      if (Gold != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Gold);
      }
      if (PlusExp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, PlusExp);
      }
      if (Serif != "") {
        size += pb::CodedOutputStream.ComputeStringSize(22, Serif);
      }
      if (Cost != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(23, Cost);
      }
      if (BurstCost != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(24, BurstCost);
      }
      if (Unuse != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(25, Unuse);
      }
      {
        int dataSize = 0;
        foreach (string element in LimitBreakTypeList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * limitBreakType_.Count;
      }
      if (LimitBreakItem != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(27, LimitBreakItem);
      }
      if (DefaultPlusHp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(28, DefaultPlusHp);
      }
      if (DefaultPlusAttack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(29, DefaultPlusAttack);
      }
      if (DefaultPlusDefense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(30, DefaultPlusDefense);
      }
      if (SpecialText != "") {
        size += pb::CodedOutputStream.ComputeStringSize(31, SpecialText);
      }
      if (PlusSkillExp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(32, PlusSkillExp);
      }
      if (PlusSkillRarity != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(33, PlusSkillRarity);
      }
      if (NoPlusSkillPropertyBonus != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(34, NoPlusSkillPropertyBonus);
      }
      {
        int dataSize = 0;
        foreach (string element in AttributeList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * attribute_.Count;
      }
      foreach (global::Master.FangTemplate.Types.StackItemBonusEntry element in StackItemBonusList) {
        size += pb::CodedOutputStream.ComputeMessageSize(36, element);
      }
      foreach (global::Master.FangTemplate.Types.DropStackItemBonusEntry element in DropStackItemBonusList) {
        size += pb::CodedOutputStream.ComputeMessageSize(37, element);
      }
      if (OpenAt != "") {
        size += pb::CodedOutputStream.ComputeStringSize(38, OpenAt);
      }
      if (SpecialLabel != "") {
        size += pb::CodedOutputStream.ComputeStringSize(39, SpecialLabel);
      }
      if (PlusLuck != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(40, PlusLuck);
      }
      if (WeaponAbilityId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(41, WeaponAbilityId);
      }
      if (ShieldAbilityId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(42, ShieldAbilityId);
      }
      if (Point != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(43, Point);
      }
      if (PvpAttribute0 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(44, PvpAttribute0);
      }
      if (PvpAttribute1 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(45, PvpAttribute1);
      }
      if (PvpAttribute2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(46, PvpAttribute2);
      }
      if (PvpAttribute3 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(47, PvpAttribute3);
      }
      if (PvpAttribute4 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(48, PvpAttribute4);
      }
      {
        int dataSize = 0;
        foreach (string element in AutoTypeList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * autoType_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FangTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FangTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FangTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FangTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FangTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FangTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FangTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FangTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FangTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FangTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FangTemplate MakeReadOnly() {
      limitBreakType_.MakeReadOnly();
      attribute_.MakeReadOnly();
      stackItemBonus_.MakeReadOnly();
      dropStackItemBonus_.MakeReadOnly();
      autoType_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FangTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FangTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FangTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private FangTemplate result;

      private FangTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          FangTemplate original = result;
          result = new FangTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override FangTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.FangTemplate.Descriptor; }
      }

      public override FangTemplate DefaultInstanceForType {
        get { return global::Master.FangTemplate.DefaultInstance; }
      }

      public override FangTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FangTemplate) {
          return MergeFrom((FangTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(FangTemplate other) {
        if (other == global::Master.FangTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Rarity != 0) {
          Rarity = other.Rarity;
        }
        if (other.GrowthType != 0) {
          GrowthType = other.GrowthType;
        }
        if (other.EnemyNo != 0) {
          EnemyNo = other.EnemyNo;
        }
        if (other.Property != "") {
          Property = other.Property;
        }
        if (other.BraveGuage != 0) {
          BraveGuage = other.BraveGuage;
        }
        if (other.BaseHp != 0) {
          BaseHp = other.BaseHp;
        }
        if (other.BaseAttack != 0) {
          BaseAttack = other.BaseAttack;
        }
        if (other.BaseDefense != 0) {
          BaseDefense = other.BaseDefense;
        }
        if (other.MaxLevel != 0) {
          MaxLevel = other.MaxLevel;
        }
        if (other.MaxHp != 0) {
          MaxHp = other.MaxHp;
        }
        if (other.MaxAttack != 0) {
          MaxAttack = other.MaxAttack;
        }
        if (other.MaxDefense != 0) {
          MaxDefense = other.MaxDefense;
        }
        if (other.BurstHpRate != 0) {
          BurstHpRate = other.BurstHpRate;
        }
        if (other.SkillId != 0) {
          SkillId = other.SkillId;
        }
        if (other.PskillId != 0) {
          PskillId = other.PskillId;
        }
        if (other.PvpSkillId != 0) {
          PvpSkillId = other.PvpSkillId;
        }
        if (other.PvpSoulId != 0) {
          PvpSoulId = other.PvpSoulId;
        }
        if (other.Gold != 0) {
          Gold = other.Gold;
        }
        if (other.PlusExp != 0) {
          PlusExp = other.PlusExp;
        }
        if (other.Serif != "") {
          Serif = other.Serif;
        }
        if (other.Cost != 0) {
          Cost = other.Cost;
        }
        if (other.BurstCost != 0) {
          BurstCost = other.BurstCost;
        }
        if (other.Unuse != false) {
          Unuse = other.Unuse;
        }
        if (other.limitBreakType_.Count != 0) {
          result.limitBreakType_.Add(other.limitBreakType_);
        }
        if (other.LimitBreakItem != 0) {
          LimitBreakItem = other.LimitBreakItem;
        }
        if (other.DefaultPlusHp != 0) {
          DefaultPlusHp = other.DefaultPlusHp;
        }
        if (other.DefaultPlusAttack != 0) {
          DefaultPlusAttack = other.DefaultPlusAttack;
        }
        if (other.DefaultPlusDefense != 0) {
          DefaultPlusDefense = other.DefaultPlusDefense;
        }
        if (other.SpecialText != "") {
          SpecialText = other.SpecialText;
        }
        if (other.PlusSkillExp != 0) {
          PlusSkillExp = other.PlusSkillExp;
        }
        if (other.PlusSkillRarity != 0) {
          PlusSkillRarity = other.PlusSkillRarity;
        }
        if (other.NoPlusSkillPropertyBonus != false) {
          NoPlusSkillPropertyBonus = other.NoPlusSkillPropertyBonus;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.stackItemBonus_.Count != 0) {
          result.stackItemBonus_.Add(other.stackItemBonus_);
        }
        if (other.dropStackItemBonus_.Count != 0) {
          result.dropStackItemBonus_.Add(other.dropStackItemBonus_);
        }
        if (other.OpenAt != "") {
          OpenAt = other.OpenAt;
        }
        if (other.SpecialLabel != "") {
          SpecialLabel = other.SpecialLabel;
        }
        if (other.PlusLuck != 0) {
          PlusLuck = other.PlusLuck;
        }
        if (other.WeaponAbilityId != 0) {
          WeaponAbilityId = other.WeaponAbilityId;
        }
        if (other.ShieldAbilityId != 0) {
          ShieldAbilityId = other.ShieldAbilityId;
        }
        if (other.Point != 0) {
          Point = other.Point;
        }
        if (other.PvpAttribute0 != "") {
          PvpAttribute0 = other.PvpAttribute0;
        }
        if (other.PvpAttribute1 != "") {
          PvpAttribute1 = other.PvpAttribute1;
        }
        if (other.PvpAttribute2 != "") {
          PvpAttribute2 = other.PvpAttribute2;
        }
        if (other.PvpAttribute3 != "") {
          PvpAttribute3 = other.PvpAttribute3;
        }
        if (other.PvpAttribute4 != "") {
          PvpAttribute4 = other.PvpAttribute4;
        }
        if (other.autoType_.Count != 0) {
          result.autoType_.Add(other.autoType_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fangTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fangTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.rarity_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.growthType_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.enemyNo_);
              break;
            }
            case 50: {
              input.ReadString(ref result.property_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.braveGuage_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.baseHp_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.baseAttack_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.baseDefense_);
              break;
            }
            case 88: {
              input.ReadInt32(ref result.maxLevel_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.maxHp_);
              break;
            }
            case 104: {
              input.ReadInt32(ref result.maxAttack_);
              break;
            }
            case 112: {
              input.ReadInt32(ref result.maxDefense_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.burstHpRate_);
              break;
            }
            case 128: {
              input.ReadInt32(ref result.skillId_);
              break;
            }
            case 136: {
              input.ReadInt32(ref result.pskillId_);
              break;
            }
            case 144: {
              input.ReadInt32(ref result.pvpSkillId_);
              break;
            }
            case 152: {
              input.ReadInt32(ref result.pvpSoulId_);
              break;
            }
            case 160: {
              input.ReadInt32(ref result.gold_);
              break;
            }
            case 168: {
              input.ReadInt32(ref result.plusExp_);
              break;
            }
            case 178: {
              input.ReadString(ref result.serif_);
              break;
            }
            case 184: {
              input.ReadInt32(ref result.cost_);
              break;
            }
            case 192: {
              input.ReadInt32(ref result.burstCost_);
              break;
            }
            case 200: {
              input.ReadBool(ref result.unuse_);
              break;
            }
            case 210: {
              input.ReadStringArray(tag, field_name, result.limitBreakType_);
              break;
            }
            case 216: {
              input.ReadInt32(ref result.limitBreakItem_);
              break;
            }
            case 224: {
              input.ReadInt32(ref result.defaultPlusHp_);
              break;
            }
            case 232: {
              input.ReadInt32(ref result.defaultPlusAttack_);
              break;
            }
            case 240: {
              input.ReadInt32(ref result.defaultPlusDefense_);
              break;
            }
            case 250: {
              input.ReadString(ref result.specialText_);
              break;
            }
            case 256: {
              input.ReadInt32(ref result.plusSkillExp_);
              break;
            }
            case 264: {
              input.ReadInt32(ref result.plusSkillRarity_);
              break;
            }
            case 272: {
              input.ReadBool(ref result.noPlusSkillPropertyBonus_);
              break;
            }
            case 282: {
              input.ReadStringArray(tag, field_name, result.attribute_);
              break;
            }
            case 290: {
              input.ReadMessageArray(tag, field_name, result.stackItemBonus_, global::Master.FangTemplate.Types.StackItemBonusEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 298: {
              input.ReadMessageArray(tag, field_name, result.dropStackItemBonus_, global::Master.FangTemplate.Types.DropStackItemBonusEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 306: {
              input.ReadString(ref result.openAt_);
              break;
            }
            case 314: {
              input.ReadString(ref result.specialLabel_);
              break;
            }
            case 320: {
              input.ReadInt32(ref result.plusLuck_);
              break;
            }
            case 328: {
              input.ReadInt32(ref result.weaponAbilityId_);
              break;
            }
            case 336: {
              input.ReadInt32(ref result.shieldAbilityId_);
              break;
            }
            case 344: {
              input.ReadInt32(ref result.point_);
              break;
            }
            case 354: {
              input.ReadString(ref result.pvpAttribute0_);
              break;
            }
            case 362: {
              input.ReadString(ref result.pvpAttribute1_);
              break;
            }
            case 370: {
              input.ReadString(ref result.pvpAttribute2_);
              break;
            }
            case 378: {
              input.ReadString(ref result.pvpAttribute3_);
              break;
            }
            case 386: {
              input.ReadString(ref result.pvpAttribute4_);
              break;
            }
            case 394: {
              input.ReadStringArray(tag, field_name, result.autoType_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int Rarity {
        get { return result.Rarity; }
        set { SetRarity(value); }
      }
      public Builder SetRarity(int value) {
        PrepareBuilder();
        result.rarity_ = value;
        return this;
      }
      public Builder ClearRarity() {
        PrepareBuilder();
        result.rarity_ = 0;
        return this;
      }

      public int GrowthType {
        get { return result.GrowthType; }
        set { SetGrowthType(value); }
      }
      public Builder SetGrowthType(int value) {
        PrepareBuilder();
        result.growthType_ = value;
        return this;
      }
      public Builder ClearGrowthType() {
        PrepareBuilder();
        result.growthType_ = 0;
        return this;
      }

      public int EnemyNo {
        get { return result.EnemyNo; }
        set { SetEnemyNo(value); }
      }
      public Builder SetEnemyNo(int value) {
        PrepareBuilder();
        result.enemyNo_ = value;
        return this;
      }
      public Builder ClearEnemyNo() {
        PrepareBuilder();
        result.enemyNo_ = 0;
        return this;
      }

      public string Property {
        get { return result.Property; }
        set { SetProperty(value); }
      }
      public Builder SetProperty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.property_ = value;
        return this;
      }
      public Builder ClearProperty() {
        PrepareBuilder();
        result.property_ = "";
        return this;
      }

      public int BraveGuage {
        get { return result.BraveGuage; }
        set { SetBraveGuage(value); }
      }
      public Builder SetBraveGuage(int value) {
        PrepareBuilder();
        result.braveGuage_ = value;
        return this;
      }
      public Builder ClearBraveGuage() {
        PrepareBuilder();
        result.braveGuage_ = 0;
        return this;
      }

      public int BaseHp {
        get { return result.BaseHp; }
        set { SetBaseHp(value); }
      }
      public Builder SetBaseHp(int value) {
        PrepareBuilder();
        result.baseHp_ = value;
        return this;
      }
      public Builder ClearBaseHp() {
        PrepareBuilder();
        result.baseHp_ = 0;
        return this;
      }

      public int BaseAttack {
        get { return result.BaseAttack; }
        set { SetBaseAttack(value); }
      }
      public Builder SetBaseAttack(int value) {
        PrepareBuilder();
        result.baseAttack_ = value;
        return this;
      }
      public Builder ClearBaseAttack() {
        PrepareBuilder();
        result.baseAttack_ = 0;
        return this;
      }

      public int BaseDefense {
        get { return result.BaseDefense; }
        set { SetBaseDefense(value); }
      }
      public Builder SetBaseDefense(int value) {
        PrepareBuilder();
        result.baseDefense_ = value;
        return this;
      }
      public Builder ClearBaseDefense() {
        PrepareBuilder();
        result.baseDefense_ = 0;
        return this;
      }

      public int MaxLevel {
        get { return result.MaxLevel; }
        set { SetMaxLevel(value); }
      }
      public Builder SetMaxLevel(int value) {
        PrepareBuilder();
        result.maxLevel_ = value;
        return this;
      }
      public Builder ClearMaxLevel() {
        PrepareBuilder();
        result.maxLevel_ = 0;
        return this;
      }

      public int MaxHp {
        get { return result.MaxHp; }
        set { SetMaxHp(value); }
      }
      public Builder SetMaxHp(int value) {
        PrepareBuilder();
        result.maxHp_ = value;
        return this;
      }
      public Builder ClearMaxHp() {
        PrepareBuilder();
        result.maxHp_ = 0;
        return this;
      }

      public int MaxAttack {
        get { return result.MaxAttack; }
        set { SetMaxAttack(value); }
      }
      public Builder SetMaxAttack(int value) {
        PrepareBuilder();
        result.maxAttack_ = value;
        return this;
      }
      public Builder ClearMaxAttack() {
        PrepareBuilder();
        result.maxAttack_ = 0;
        return this;
      }

      public int MaxDefense {
        get { return result.MaxDefense; }
        set { SetMaxDefense(value); }
      }
      public Builder SetMaxDefense(int value) {
        PrepareBuilder();
        result.maxDefense_ = value;
        return this;
      }
      public Builder ClearMaxDefense() {
        PrepareBuilder();
        result.maxDefense_ = 0;
        return this;
      }

      public int BurstHpRate {
        get { return result.BurstHpRate; }
        set { SetBurstHpRate(value); }
      }
      public Builder SetBurstHpRate(int value) {
        PrepareBuilder();
        result.burstHpRate_ = value;
        return this;
      }
      public Builder ClearBurstHpRate() {
        PrepareBuilder();
        result.burstHpRate_ = 0;
        return this;
      }

      public int SkillId {
        get { return result.SkillId; }
        set { SetSkillId(value); }
      }
      public Builder SetSkillId(int value) {
        PrepareBuilder();
        result.skillId_ = value;
        return this;
      }
      public Builder ClearSkillId() {
        PrepareBuilder();
        result.skillId_ = 0;
        return this;
      }

      public int PskillId {
        get { return result.PskillId; }
        set { SetPskillId(value); }
      }
      public Builder SetPskillId(int value) {
        PrepareBuilder();
        result.pskillId_ = value;
        return this;
      }
      public Builder ClearPskillId() {
        PrepareBuilder();
        result.pskillId_ = 0;
        return this;
      }

      public int PvpSkillId {
        get { return result.PvpSkillId; }
        set { SetPvpSkillId(value); }
      }
      public Builder SetPvpSkillId(int value) {
        PrepareBuilder();
        result.pvpSkillId_ = value;
        return this;
      }
      public Builder ClearPvpSkillId() {
        PrepareBuilder();
        result.pvpSkillId_ = 0;
        return this;
      }

      public int PvpSoulId {
        get { return result.PvpSoulId; }
        set { SetPvpSoulId(value); }
      }
      public Builder SetPvpSoulId(int value) {
        PrepareBuilder();
        result.pvpSoulId_ = value;
        return this;
      }
      public Builder ClearPvpSoulId() {
        PrepareBuilder();
        result.pvpSoulId_ = 0;
        return this;
      }

      public int Gold {
        get { return result.Gold; }
        set { SetGold(value); }
      }
      public Builder SetGold(int value) {
        PrepareBuilder();
        result.gold_ = value;
        return this;
      }
      public Builder ClearGold() {
        PrepareBuilder();
        result.gold_ = 0;
        return this;
      }

      public int PlusExp {
        get { return result.PlusExp; }
        set { SetPlusExp(value); }
      }
      public Builder SetPlusExp(int value) {
        PrepareBuilder();
        result.plusExp_ = value;
        return this;
      }
      public Builder ClearPlusExp() {
        PrepareBuilder();
        result.plusExp_ = 0;
        return this;
      }

      public string Serif {
        get { return result.Serif; }
        set { SetSerif(value); }
      }
      public Builder SetSerif(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.serif_ = value;
        return this;
      }
      public Builder ClearSerif() {
        PrepareBuilder();
        result.serif_ = "";
        return this;
      }

      public int Cost {
        get { return result.Cost; }
        set { SetCost(value); }
      }
      public Builder SetCost(int value) {
        PrepareBuilder();
        result.cost_ = value;
        return this;
      }
      public Builder ClearCost() {
        PrepareBuilder();
        result.cost_ = 0;
        return this;
      }

      public int BurstCost {
        get { return result.BurstCost; }
        set { SetBurstCost(value); }
      }
      public Builder SetBurstCost(int value) {
        PrepareBuilder();
        result.burstCost_ = value;
        return this;
      }
      public Builder ClearBurstCost() {
        PrepareBuilder();
        result.burstCost_ = 0;
        return this;
      }

      public bool Unuse {
        get { return result.Unuse; }
        set { SetUnuse(value); }
      }
      public Builder SetUnuse(bool value) {
        PrepareBuilder();
        result.unuse_ = value;
        return this;
      }
      public Builder ClearUnuse() {
        PrepareBuilder();
        result.unuse_ = false;
        return this;
      }

      public pbc::IPopsicleList<string> LimitBreakTypeList {
        get { return PrepareBuilder().limitBreakType_; }
      }
      public int LimitBreakTypeCount {
        get { return result.LimitBreakTypeCount; }
      }
      public string GetLimitBreakType(int index) {
        return result.GetLimitBreakType(index);
      }
      public Builder SetLimitBreakType(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limitBreakType_[index] = value;
        return this;
      }
      public Builder AddLimitBreakType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limitBreakType_.Add(value);
        return this;
      }
      public Builder AddRangeLimitBreakType(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.limitBreakType_.Add(values);
        return this;
      }
      public Builder ClearLimitBreakType() {
        PrepareBuilder();
        result.limitBreakType_.Clear();
        return this;
      }

      public int LimitBreakItem {
        get { return result.LimitBreakItem; }
        set { SetLimitBreakItem(value); }
      }
      public Builder SetLimitBreakItem(int value) {
        PrepareBuilder();
        result.limitBreakItem_ = value;
        return this;
      }
      public Builder ClearLimitBreakItem() {
        PrepareBuilder();
        result.limitBreakItem_ = 0;
        return this;
      }

      public int DefaultPlusHp {
        get { return result.DefaultPlusHp; }
        set { SetDefaultPlusHp(value); }
      }
      public Builder SetDefaultPlusHp(int value) {
        PrepareBuilder();
        result.defaultPlusHp_ = value;
        return this;
      }
      public Builder ClearDefaultPlusHp() {
        PrepareBuilder();
        result.defaultPlusHp_ = 0;
        return this;
      }

      public int DefaultPlusAttack {
        get { return result.DefaultPlusAttack; }
        set { SetDefaultPlusAttack(value); }
      }
      public Builder SetDefaultPlusAttack(int value) {
        PrepareBuilder();
        result.defaultPlusAttack_ = value;
        return this;
      }
      public Builder ClearDefaultPlusAttack() {
        PrepareBuilder();
        result.defaultPlusAttack_ = 0;
        return this;
      }

      public int DefaultPlusDefense {
        get { return result.DefaultPlusDefense; }
        set { SetDefaultPlusDefense(value); }
      }
      public Builder SetDefaultPlusDefense(int value) {
        PrepareBuilder();
        result.defaultPlusDefense_ = value;
        return this;
      }
      public Builder ClearDefaultPlusDefense() {
        PrepareBuilder();
        result.defaultPlusDefense_ = 0;
        return this;
      }

      public string SpecialText {
        get { return result.SpecialText; }
        set { SetSpecialText(value); }
      }
      public Builder SetSpecialText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.specialText_ = value;
        return this;
      }
      public Builder ClearSpecialText() {
        PrepareBuilder();
        result.specialText_ = "";
        return this;
      }

      public int PlusSkillExp {
        get { return result.PlusSkillExp; }
        set { SetPlusSkillExp(value); }
      }
      public Builder SetPlusSkillExp(int value) {
        PrepareBuilder();
        result.plusSkillExp_ = value;
        return this;
      }
      public Builder ClearPlusSkillExp() {
        PrepareBuilder();
        result.plusSkillExp_ = 0;
        return this;
      }

      public int PlusSkillRarity {
        get { return result.PlusSkillRarity; }
        set { SetPlusSkillRarity(value); }
      }
      public Builder SetPlusSkillRarity(int value) {
        PrepareBuilder();
        result.plusSkillRarity_ = value;
        return this;
      }
      public Builder ClearPlusSkillRarity() {
        PrepareBuilder();
        result.plusSkillRarity_ = 0;
        return this;
      }

      public bool NoPlusSkillPropertyBonus {
        get { return result.NoPlusSkillPropertyBonus; }
        set { SetNoPlusSkillPropertyBonus(value); }
      }
      public Builder SetNoPlusSkillPropertyBonus(bool value) {
        PrepareBuilder();
        result.noPlusSkillPropertyBonus_ = value;
        return this;
      }
      public Builder ClearNoPlusSkillPropertyBonus() {
        PrepareBuilder();
        result.noPlusSkillPropertyBonus_ = false;
        return this;
      }

      public pbc::IPopsicleList<string> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public string GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder AddAttribute(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.FangTemplate.Types.StackItemBonusEntry> StackItemBonusList {
        get { return PrepareBuilder().stackItemBonus_; }
      }
      public int StackItemBonusCount {
        get { return result.StackItemBonusCount; }
      }
      public global::Master.FangTemplate.Types.StackItemBonusEntry GetStackItemBonus(int index) {
        return result.GetStackItemBonus(index);
      }
      public Builder SetStackItemBonus(int index, global::Master.FangTemplate.Types.StackItemBonusEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stackItemBonus_[index] = value;
        return this;
      }
      public Builder SetStackItemBonus(int index, global::Master.FangTemplate.Types.StackItemBonusEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stackItemBonus_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStackItemBonus(global::Master.FangTemplate.Types.StackItemBonusEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stackItemBonus_.Add(value);
        return this;
      }
      public Builder AddStackItemBonus(global::Master.FangTemplate.Types.StackItemBonusEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stackItemBonus_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStackItemBonus(scg::IEnumerable<global::Master.FangTemplate.Types.StackItemBonusEntry> values) {
        PrepareBuilder();
        result.stackItemBonus_.Add(values);
        return this;
      }
      public Builder ClearStackItemBonus() {
        PrepareBuilder();
        result.stackItemBonus_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.FangTemplate.Types.DropStackItemBonusEntry> DropStackItemBonusList {
        get { return PrepareBuilder().dropStackItemBonus_; }
      }
      public int DropStackItemBonusCount {
        get { return result.DropStackItemBonusCount; }
      }
      public global::Master.FangTemplate.Types.DropStackItemBonusEntry GetDropStackItemBonus(int index) {
        return result.GetDropStackItemBonus(index);
      }
      public Builder SetDropStackItemBonus(int index, global::Master.FangTemplate.Types.DropStackItemBonusEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dropStackItemBonus_[index] = value;
        return this;
      }
      public Builder SetDropStackItemBonus(int index, global::Master.FangTemplate.Types.DropStackItemBonusEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dropStackItemBonus_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDropStackItemBonus(global::Master.FangTemplate.Types.DropStackItemBonusEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dropStackItemBonus_.Add(value);
        return this;
      }
      public Builder AddDropStackItemBonus(global::Master.FangTemplate.Types.DropStackItemBonusEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dropStackItemBonus_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDropStackItemBonus(scg::IEnumerable<global::Master.FangTemplate.Types.DropStackItemBonusEntry> values) {
        PrepareBuilder();
        result.dropStackItemBonus_.Add(values);
        return this;
      }
      public Builder ClearDropStackItemBonus() {
        PrepareBuilder();
        result.dropStackItemBonus_.Clear();
        return this;
      }

      public string OpenAt {
        get { return result.OpenAt; }
        set { SetOpenAt(value); }
      }
      public Builder SetOpenAt(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.openAt_ = value;
        return this;
      }
      public Builder ClearOpenAt() {
        PrepareBuilder();
        result.openAt_ = "";
        return this;
      }

      public string SpecialLabel {
        get { return result.SpecialLabel; }
        set { SetSpecialLabel(value); }
      }
      public Builder SetSpecialLabel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.specialLabel_ = value;
        return this;
      }
      public Builder ClearSpecialLabel() {
        PrepareBuilder();
        result.specialLabel_ = "";
        return this;
      }

      public int PlusLuck {
        get { return result.PlusLuck; }
        set { SetPlusLuck(value); }
      }
      public Builder SetPlusLuck(int value) {
        PrepareBuilder();
        result.plusLuck_ = value;
        return this;
      }
      public Builder ClearPlusLuck() {
        PrepareBuilder();
        result.plusLuck_ = 0;
        return this;
      }

      public int WeaponAbilityId {
        get { return result.WeaponAbilityId; }
        set { SetWeaponAbilityId(value); }
      }
      public Builder SetWeaponAbilityId(int value) {
        PrepareBuilder();
        result.weaponAbilityId_ = value;
        return this;
      }
      public Builder ClearWeaponAbilityId() {
        PrepareBuilder();
        result.weaponAbilityId_ = 0;
        return this;
      }

      public int ShieldAbilityId {
        get { return result.ShieldAbilityId; }
        set { SetShieldAbilityId(value); }
      }
      public Builder SetShieldAbilityId(int value) {
        PrepareBuilder();
        result.shieldAbilityId_ = value;
        return this;
      }
      public Builder ClearShieldAbilityId() {
        PrepareBuilder();
        result.shieldAbilityId_ = 0;
        return this;
      }

      public int Point {
        get { return result.Point; }
        set { SetPoint(value); }
      }
      public Builder SetPoint(int value) {
        PrepareBuilder();
        result.point_ = value;
        return this;
      }
      public Builder ClearPoint() {
        PrepareBuilder();
        result.point_ = 0;
        return this;
      }

      public string PvpAttribute0 {
        get { return result.PvpAttribute0; }
        set { SetPvpAttribute0(value); }
      }
      public Builder SetPvpAttribute0(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pvpAttribute0_ = value;
        return this;
      }
      public Builder ClearPvpAttribute0() {
        PrepareBuilder();
        result.pvpAttribute0_ = "";
        return this;
      }

      public string PvpAttribute1 {
        get { return result.PvpAttribute1; }
        set { SetPvpAttribute1(value); }
      }
      public Builder SetPvpAttribute1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pvpAttribute1_ = value;
        return this;
      }
      public Builder ClearPvpAttribute1() {
        PrepareBuilder();
        result.pvpAttribute1_ = "";
        return this;
      }

      public string PvpAttribute2 {
        get { return result.PvpAttribute2; }
        set { SetPvpAttribute2(value); }
      }
      public Builder SetPvpAttribute2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pvpAttribute2_ = value;
        return this;
      }
      public Builder ClearPvpAttribute2() {
        PrepareBuilder();
        result.pvpAttribute2_ = "";
        return this;
      }

      public string PvpAttribute3 {
        get { return result.PvpAttribute3; }
        set { SetPvpAttribute3(value); }
      }
      public Builder SetPvpAttribute3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pvpAttribute3_ = value;
        return this;
      }
      public Builder ClearPvpAttribute3() {
        PrepareBuilder();
        result.pvpAttribute3_ = "";
        return this;
      }

      public string PvpAttribute4 {
        get { return result.PvpAttribute4; }
        set { SetPvpAttribute4(value); }
      }
      public Builder SetPvpAttribute4(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pvpAttribute4_ = value;
        return this;
      }
      public Builder ClearPvpAttribute4() {
        PrepareBuilder();
        result.pvpAttribute4_ = "";
        return this;
      }

      public pbc::IPopsicleList<string> AutoTypeList {
        get { return PrepareBuilder().autoType_; }
      }
      public int AutoTypeCount {
        get { return result.AutoTypeCount; }
      }
      public string GetAutoType(int index) {
        return result.GetAutoType(index);
      }
      public Builder SetAutoType(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.autoType_[index] = value;
        return this;
      }
      public Builder AddAutoType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.autoType_.Add(value);
        return this;
      }
      public Builder AddRangeAutoType(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.autoType_.Add(values);
        return this;
      }
      public Builder ClearAutoType() {
        PrepareBuilder();
        result.autoType_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionSkill : pb::GeneratedMessage<ActionSkill, ActionSkill.Builder> {
    public ActionSkill() { }
    private static readonly ActionSkill defaultInstance = new ActionSkill().MakeReadOnly();
    private static readonly string[] _actionSkillFieldNames = new string[] { "base_turn", "burst_desc", "burst_desc2", "burst_param", "desc", "desc2", "id", "level_max", "memo1", "memo2", "name", "param", "skill_level_rate", "skill_level_rate2" };
    private static readonly uint[] _actionSkillFieldTags = new uint[] { 40, 82, 98, 34, 74, 90, 8, 48, 106, 114, 18, 26, 56, 64 };
    public static ActionSkill DefaultInstance {
      get { return defaultInstance; }
    }

    public override ActionSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ActionSkill ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_ActionSkill__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ActionSkill, ActionSkill.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_ActionSkill__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int ParamFieldNumber = 3;
    private string param_ = "";
    public string Param {
      get { return param_; }
      set { param_ = value; }
    }

    public const int BurstParamFieldNumber = 4;
    private string burstParam_ = "";
    public string BurstParam {
      get { return burstParam_; }
      set { burstParam_ = value; }
    }

    public const int BaseTurnFieldNumber = 5;
    private int baseTurn_;
    public int BaseTurn {
      get { return baseTurn_; }
      set { baseTurn_ = value; }
    }

    public const int LevelMaxFieldNumber = 6;
    private int levelMax_;
    public int LevelMax {
      get { return levelMax_; }
      set { levelMax_ = value; }
    }

    public const int SkillLevelRateFieldNumber = 7;
    private int skillLevelRate_;
    public int SkillLevelRate {
      get { return skillLevelRate_; }
      set { skillLevelRate_ = value; }
    }

    public const int SkillLevelRate2FieldNumber = 8;
    private int skillLevelRate2_;
    public int SkillLevelRate2 {
      get { return skillLevelRate2_; }
      set { skillLevelRate2_ = value; }
    }

    public const int DescFieldNumber = 9;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int BurstDescFieldNumber = 10;
    private string burstDesc_ = "";
    public string BurstDesc {
      get { return burstDesc_; }
      set { burstDesc_ = value; }
    }

    public const int Desc2FieldNumber = 11;
    private string desc2_ = "";
    public string Desc2 {
      get { return desc2_; }
      set { desc2_ = value; }
    }

    public const int BurstDesc2FieldNumber = 12;
    private string burstDesc2_ = "";
    public string BurstDesc2 {
      get { return burstDesc2_; }
      set { burstDesc2_ = value; }
    }

    public const int Memo1FieldNumber = 13;
    private string memo1_ = "";
    public string Memo1 {
      get { return memo1_; }
      set { memo1_ = value; }
    }

    public const int Memo2FieldNumber = 14;
    private string memo2_ = "";
    public string Memo2 {
      get { return memo2_; }
      set { memo2_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionSkillFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[6], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[10], Name);
      }
      if (Param != "") {
        output.WriteString(3, field_names[11], Param);
      }
      if (BurstParam != "") {
        output.WriteString(4, field_names[3], BurstParam);
      }
      if (BaseTurn != 0) {
        output.WriteInt32(5, field_names[0], BaseTurn);
      }
      if (LevelMax != 0) {
        output.WriteInt32(6, field_names[7], LevelMax);
      }
      if (SkillLevelRate != 0) {
        output.WriteInt32(7, field_names[12], SkillLevelRate);
      }
      if (SkillLevelRate2 != 0) {
        output.WriteInt32(8, field_names[13], SkillLevelRate2);
      }
      if (Desc != "") {
        output.WriteString(9, field_names[4], Desc);
      }
      if (BurstDesc != "") {
        output.WriteString(10, field_names[1], BurstDesc);
      }
      if (Desc2 != "") {
        output.WriteString(11, field_names[5], Desc2);
      }
      if (BurstDesc2 != "") {
        output.WriteString(12, field_names[2], BurstDesc2);
      }
      if (Memo1 != "") {
        output.WriteString(13, field_names[8], Memo1);
      }
      if (Memo2 != "") {
        output.WriteString(14, field_names[9], Memo2);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Param != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Param);
      }
      if (BurstParam != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, BurstParam);
      }
      if (BaseTurn != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, BaseTurn);
      }
      if (LevelMax != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, LevelMax);
      }
      if (SkillLevelRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, SkillLevelRate);
      }
      if (SkillLevelRate2 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, SkillLevelRate2);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(9, Desc);
      }
      if (BurstDesc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(10, BurstDesc);
      }
      if (Desc2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, Desc2);
      }
      if (BurstDesc2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(12, BurstDesc2);
      }
      if (Memo1 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(13, Memo1);
      }
      if (Memo2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(14, Memo2);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ActionSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionSkill MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionSkill prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ActionSkill result;

      private ActionSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionSkill original = result;
          result = new ActionSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override ActionSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.ActionSkill.Descriptor; }
      }

      public override ActionSkill DefaultInstanceForType {
        get { return global::Master.ActionSkill.DefaultInstance; }
      }

      public override ActionSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionSkill) {
          return MergeFrom((ActionSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ActionSkill other) {
        if (other == global::Master.ActionSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Param != "") {
          Param = other.Param;
        }
        if (other.BurstParam != "") {
          BurstParam = other.BurstParam;
        }
        if (other.BaseTurn != 0) {
          BaseTurn = other.BaseTurn;
        }
        if (other.LevelMax != 0) {
          LevelMax = other.LevelMax;
        }
        if (other.SkillLevelRate != 0) {
          SkillLevelRate = other.SkillLevelRate;
        }
        if (other.SkillLevelRate2 != 0) {
          SkillLevelRate2 = other.SkillLevelRate2;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.BurstDesc != "") {
          BurstDesc = other.BurstDesc;
        }
        if (other.Desc2 != "") {
          Desc2 = other.Desc2;
        }
        if (other.BurstDesc2 != "") {
          BurstDesc2 = other.BurstDesc2;
        }
        if (other.Memo1 != "") {
          Memo1 = other.Memo1;
        }
        if (other.Memo2 != "") {
          Memo2 = other.Memo2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.param_);
              break;
            }
            case 34: {
              input.ReadString(ref result.burstParam_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.baseTurn_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.levelMax_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.skillLevelRate_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.skillLevelRate2_);
              break;
            }
            case 74: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 82: {
              input.ReadString(ref result.burstDesc_);
              break;
            }
            case 90: {
              input.ReadString(ref result.desc2_);
              break;
            }
            case 98: {
              input.ReadString(ref result.burstDesc2_);
              break;
            }
            case 106: {
              input.ReadString(ref result.memo1_);
              break;
            }
            case 114: {
              input.ReadString(ref result.memo2_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = "";
        return this;
      }

      public string BurstParam {
        get { return result.BurstParam; }
        set { SetBurstParam(value); }
      }
      public Builder SetBurstParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.burstParam_ = value;
        return this;
      }
      public Builder ClearBurstParam() {
        PrepareBuilder();
        result.burstParam_ = "";
        return this;
      }

      public int BaseTurn {
        get { return result.BaseTurn; }
        set { SetBaseTurn(value); }
      }
      public Builder SetBaseTurn(int value) {
        PrepareBuilder();
        result.baseTurn_ = value;
        return this;
      }
      public Builder ClearBaseTurn() {
        PrepareBuilder();
        result.baseTurn_ = 0;
        return this;
      }

      public int LevelMax {
        get { return result.LevelMax; }
        set { SetLevelMax(value); }
      }
      public Builder SetLevelMax(int value) {
        PrepareBuilder();
        result.levelMax_ = value;
        return this;
      }
      public Builder ClearLevelMax() {
        PrepareBuilder();
        result.levelMax_ = 0;
        return this;
      }

      public int SkillLevelRate {
        get { return result.SkillLevelRate; }
        set { SetSkillLevelRate(value); }
      }
      public Builder SetSkillLevelRate(int value) {
        PrepareBuilder();
        result.skillLevelRate_ = value;
        return this;
      }
      public Builder ClearSkillLevelRate() {
        PrepareBuilder();
        result.skillLevelRate_ = 0;
        return this;
      }

      public int SkillLevelRate2 {
        get { return result.SkillLevelRate2; }
        set { SetSkillLevelRate2(value); }
      }
      public Builder SetSkillLevelRate2(int value) {
        PrepareBuilder();
        result.skillLevelRate2_ = value;
        return this;
      }
      public Builder ClearSkillLevelRate2() {
        PrepareBuilder();
        result.skillLevelRate2_ = 0;
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string BurstDesc {
        get { return result.BurstDesc; }
        set { SetBurstDesc(value); }
      }
      public Builder SetBurstDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.burstDesc_ = value;
        return this;
      }
      public Builder ClearBurstDesc() {
        PrepareBuilder();
        result.burstDesc_ = "";
        return this;
      }

      public string Desc2 {
        get { return result.Desc2; }
        set { SetDesc2(value); }
      }
      public Builder SetDesc2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc2_ = value;
        return this;
      }
      public Builder ClearDesc2() {
        PrepareBuilder();
        result.desc2_ = "";
        return this;
      }

      public string BurstDesc2 {
        get { return result.BurstDesc2; }
        set { SetBurstDesc2(value); }
      }
      public Builder SetBurstDesc2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.burstDesc2_ = value;
        return this;
      }
      public Builder ClearBurstDesc2() {
        PrepareBuilder();
        result.burstDesc2_ = "";
        return this;
      }

      public string Memo1 {
        get { return result.Memo1; }
        set { SetMemo1(value); }
      }
      public Builder SetMemo1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memo1_ = value;
        return this;
      }
      public Builder ClearMemo1() {
        PrepareBuilder();
        result.memo1_ = "";
        return this;
      }

      public string Memo2 {
        get { return result.Memo2; }
        set { SetMemo2(value); }
      }
      public Builder SetMemo2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memo2_ = value;
        return this;
      }
      public Builder ClearMemo2() {
        PrepareBuilder();
        result.memo2_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PassiveSkill : pb::GeneratedMessage<PassiveSkill, PassiveSkill.Builder> {
    public PassiveSkill() { }
    private static readonly PassiveSkill defaultInstance = new PassiveSkill().MakeReadOnly();
    private static readonly string[] _passiveSkillFieldNames = new string[] { "burst_desc", "burst_desc2", "burst_param", "burst_pow", "desc", "desc2", "id", "is_json", "memo1", "memo2", "name", "param", "pow", "pvp_soul_no", "type" };
    private static readonly uint[] _passiveSkillFieldTags = new uint[] { 90, 106, 58, 64, 82, 98, 8, 24, 114, 122, 18, 42, 48, 72, 34 };
    public static PassiveSkill DefaultInstance {
      get { return defaultInstance; }
    }

    public override PassiveSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PassiveSkill ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PassiveSkill__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PassiveSkill, PassiveSkill.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PassiveSkill__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int IsJsonFieldNumber = 3;
    private bool isJson_;
    public bool IsJson {
      get { return isJson_; }
      set { isJson_ = value; }
    }

    public const int TypeFieldNumber = 4;
    private string type_ = "";
    public string Type {
      get { return type_; }
      set { type_ = value; }
    }

    public const int ParamFieldNumber = 5;
    private string param_ = "";
    public string Param {
      get { return param_; }
      set { param_ = value; }
    }

    public const int PowFieldNumber = 6;
    private int pow_;
    public int Pow {
      get { return pow_; }
      set { pow_ = value; }
    }

    public const int BurstParamFieldNumber = 7;
    private string burstParam_ = "";
    public string BurstParam {
      get { return burstParam_; }
      set { burstParam_ = value; }
    }

    public const int BurstPowFieldNumber = 8;
    private int burstPow_;
    public int BurstPow {
      get { return burstPow_; }
      set { burstPow_ = value; }
    }

    public const int PvpSoulNoFieldNumber = 9;
    private int pvpSoulNo_;
    public int PvpSoulNo {
      get { return pvpSoulNo_; }
      set { pvpSoulNo_ = value; }
    }

    public const int DescFieldNumber = 10;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int BurstDescFieldNumber = 11;
    private string burstDesc_ = "";
    public string BurstDesc {
      get { return burstDesc_; }
      set { burstDesc_ = value; }
    }

    public const int Desc2FieldNumber = 12;
    private string desc2_ = "";
    public string Desc2 {
      get { return desc2_; }
      set { desc2_ = value; }
    }

    public const int BurstDesc2FieldNumber = 13;
    private string burstDesc2_ = "";
    public string BurstDesc2 {
      get { return burstDesc2_; }
      set { burstDesc2_ = value; }
    }

    public const int Memo1FieldNumber = 14;
    private string memo1_ = "";
    public string Memo1 {
      get { return memo1_; }
      set { memo1_ = value; }
    }

    public const int Memo2FieldNumber = 15;
    private string memo2_ = "";
    public string Memo2 {
      get { return memo2_; }
      set { memo2_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _passiveSkillFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[6], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[10], Name);
      }
      if (IsJson != false) {
        output.WriteBool(3, field_names[7], IsJson);
      }
      if (Type != "") {
        output.WriteString(4, field_names[14], Type);
      }
      if (Param != "") {
        output.WriteString(5, field_names[11], Param);
      }
      if (Pow != 0) {
        output.WriteInt32(6, field_names[12], Pow);
      }
      if (BurstParam != "") {
        output.WriteString(7, field_names[2], BurstParam);
      }
      if (BurstPow != 0) {
        output.WriteInt32(8, field_names[3], BurstPow);
      }
      if (PvpSoulNo != 0) {
        output.WriteInt32(9, field_names[13], PvpSoulNo);
      }
      if (Desc != "") {
        output.WriteString(10, field_names[4], Desc);
      }
      if (BurstDesc != "") {
        output.WriteString(11, field_names[0], BurstDesc);
      }
      if (Desc2 != "") {
        output.WriteString(12, field_names[5], Desc2);
      }
      if (BurstDesc2 != "") {
        output.WriteString(13, field_names[1], BurstDesc2);
      }
      if (Memo1 != "") {
        output.WriteString(14, field_names[8], Memo1);
      }
      if (Memo2 != "") {
        output.WriteString(15, field_names[9], Memo2);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (IsJson != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsJson);
      }
      if (Type != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Type);
      }
      if (Param != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Param);
      }
      if (Pow != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Pow);
      }
      if (BurstParam != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, BurstParam);
      }
      if (BurstPow != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, BurstPow);
      }
      if (PvpSoulNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, PvpSoulNo);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(10, Desc);
      }
      if (BurstDesc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, BurstDesc);
      }
      if (Desc2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(12, Desc2);
      }
      if (BurstDesc2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(13, BurstDesc2);
      }
      if (Memo1 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(14, Memo1);
      }
      if (Memo2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(15, Memo2);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PassiveSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PassiveSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PassiveSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PassiveSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PassiveSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PassiveSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PassiveSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PassiveSkill MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PassiveSkill prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PassiveSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PassiveSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PassiveSkill result;

      private PassiveSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          PassiveSkill original = result;
          result = new PassiveSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PassiveSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PassiveSkill.Descriptor; }
      }

      public override PassiveSkill DefaultInstanceForType {
        get { return global::Master.PassiveSkill.DefaultInstance; }
      }

      public override PassiveSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PassiveSkill) {
          return MergeFrom((PassiveSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PassiveSkill other) {
        if (other == global::Master.PassiveSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.IsJson != false) {
          IsJson = other.IsJson;
        }
        if (other.Type != "") {
          Type = other.Type;
        }
        if (other.Param != "") {
          Param = other.Param;
        }
        if (other.Pow != 0) {
          Pow = other.Pow;
        }
        if (other.BurstParam != "") {
          BurstParam = other.BurstParam;
        }
        if (other.BurstPow != 0) {
          BurstPow = other.BurstPow;
        }
        if (other.PvpSoulNo != 0) {
          PvpSoulNo = other.PvpSoulNo;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.BurstDesc != "") {
          BurstDesc = other.BurstDesc;
        }
        if (other.Desc2 != "") {
          Desc2 = other.Desc2;
        }
        if (other.BurstDesc2 != "") {
          BurstDesc2 = other.BurstDesc2;
        }
        if (other.Memo1 != "") {
          Memo1 = other.Memo1;
        }
        if (other.Memo2 != "") {
          Memo2 = other.Memo2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_passiveSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _passiveSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadBool(ref result.isJson_);
              break;
            }
            case 34: {
              input.ReadString(ref result.type_);
              break;
            }
            case 42: {
              input.ReadString(ref result.param_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.pow_);
              break;
            }
            case 58: {
              input.ReadString(ref result.burstParam_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.burstPow_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.pvpSoulNo_);
              break;
            }
            case 82: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 90: {
              input.ReadString(ref result.burstDesc_);
              break;
            }
            case 98: {
              input.ReadString(ref result.desc2_);
              break;
            }
            case 106: {
              input.ReadString(ref result.burstDesc2_);
              break;
            }
            case 114: {
              input.ReadString(ref result.memo1_);
              break;
            }
            case 122: {
              input.ReadString(ref result.memo2_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public bool IsJson {
        get { return result.IsJson; }
        set { SetIsJson(value); }
      }
      public Builder SetIsJson(bool value) {
        PrepareBuilder();
        result.isJson_ = value;
        return this;
      }
      public Builder ClearIsJson() {
        PrepareBuilder();
        result.isJson_ = false;
        return this;
      }

      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.type_ = "";
        return this;
      }

      public string Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = "";
        return this;
      }

      public int Pow {
        get { return result.Pow; }
        set { SetPow(value); }
      }
      public Builder SetPow(int value) {
        PrepareBuilder();
        result.pow_ = value;
        return this;
      }
      public Builder ClearPow() {
        PrepareBuilder();
        result.pow_ = 0;
        return this;
      }

      public string BurstParam {
        get { return result.BurstParam; }
        set { SetBurstParam(value); }
      }
      public Builder SetBurstParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.burstParam_ = value;
        return this;
      }
      public Builder ClearBurstParam() {
        PrepareBuilder();
        result.burstParam_ = "";
        return this;
      }

      public int BurstPow {
        get { return result.BurstPow; }
        set { SetBurstPow(value); }
      }
      public Builder SetBurstPow(int value) {
        PrepareBuilder();
        result.burstPow_ = value;
        return this;
      }
      public Builder ClearBurstPow() {
        PrepareBuilder();
        result.burstPow_ = 0;
        return this;
      }

      public int PvpSoulNo {
        get { return result.PvpSoulNo; }
        set { SetPvpSoulNo(value); }
      }
      public Builder SetPvpSoulNo(int value) {
        PrepareBuilder();
        result.pvpSoulNo_ = value;
        return this;
      }
      public Builder ClearPvpSoulNo() {
        PrepareBuilder();
        result.pvpSoulNo_ = 0;
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string BurstDesc {
        get { return result.BurstDesc; }
        set { SetBurstDesc(value); }
      }
      public Builder SetBurstDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.burstDesc_ = value;
        return this;
      }
      public Builder ClearBurstDesc() {
        PrepareBuilder();
        result.burstDesc_ = "";
        return this;
      }

      public string Desc2 {
        get { return result.Desc2; }
        set { SetDesc2(value); }
      }
      public Builder SetDesc2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc2_ = value;
        return this;
      }
      public Builder ClearDesc2() {
        PrepareBuilder();
        result.desc2_ = "";
        return this;
      }

      public string BurstDesc2 {
        get { return result.BurstDesc2; }
        set { SetBurstDesc2(value); }
      }
      public Builder SetBurstDesc2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.burstDesc2_ = value;
        return this;
      }
      public Builder ClearBurstDesc2() {
        PrepareBuilder();
        result.burstDesc2_ = "";
        return this;
      }

      public string Memo1 {
        get { return result.Memo1; }
        set { SetMemo1(value); }
      }
      public Builder SetMemo1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memo1_ = value;
        return this;
      }
      public Builder ClearMemo1() {
        PrepareBuilder();
        result.memo1_ = "";
        return this;
      }

      public string Memo2 {
        get { return result.Memo2; }
        set { SetMemo2(value); }
      }
      public Builder SetMemo2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memo2_ = value;
        return this;
      }
      public Builder ClearMemo2() {
        PrepareBuilder();
        result.memo2_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpSkill : pb::GeneratedMessage<PvpSkill, PvpSkill.Builder> {
    public PvpSkill() { }
    private static readonly PvpSkill defaultInstance = new PvpSkill().MakeReadOnly();
    private static readonly string[] _pvpSkillFieldNames = new string[] { "charge", "charge_turn", "desc", "desc2", "give_amount", "give_target", "id", "memo1", "name", "param", "skill_type", "skill_type_icon" };
    private static readonly uint[] _pvpSkillFieldTags = new uint[] { 32, 40, 82, 90, 72, 66, 8, 98, 18, 26, 58, 50 };
    public static PvpSkill DefaultInstance {
      get { return defaultInstance; }
    }

    public override PvpSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PvpSkill ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PvpSkill__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PvpSkill, PvpSkill.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PvpSkill__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int ParamFieldNumber = 3;
    private string param_ = "";
    public string Param {
      get { return param_; }
      set { param_ = value; }
    }

    public const int ChargeFieldNumber = 4;
    private int charge_;
    public int Charge {
      get { return charge_; }
      set { charge_ = value; }
    }

    public const int ChargeTurnFieldNumber = 5;
    private int chargeTurn_;
    public int ChargeTurn {
      get { return chargeTurn_; }
      set { chargeTurn_ = value; }
    }

    public const int SkillTypeIconFieldNumber = 6;
    private string skillTypeIcon_ = "";
    public string SkillTypeIcon {
      get { return skillTypeIcon_; }
      set { skillTypeIcon_ = value; }
    }

    public const int SkillTypeFieldNumber = 7;
    private string skillType_ = "";
    public string SkillType {
      get { return skillType_; }
      set { skillType_ = value; }
    }

    public const int GiveTargetFieldNumber = 8;
    private string giveTarget_ = "";
    public string GiveTarget {
      get { return giveTarget_; }
      set { giveTarget_ = value; }
    }

    public const int GiveAmountFieldNumber = 9;
    private int giveAmount_;
    public int GiveAmount {
      get { return giveAmount_; }
      set { giveAmount_ = value; }
    }

    public const int DescFieldNumber = 10;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int Desc2FieldNumber = 11;
    private string desc2_ = "";
    public string Desc2 {
      get { return desc2_; }
      set { desc2_ = value; }
    }

    public const int Memo1FieldNumber = 12;
    private string memo1_ = "";
    public string Memo1 {
      get { return memo1_; }
      set { memo1_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pvpSkillFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[6], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[8], Name);
      }
      if (Param != "") {
        output.WriteString(3, field_names[9], Param);
      }
      if (Charge != 0) {
        output.WriteInt32(4, field_names[0], Charge);
      }
      if (ChargeTurn != 0) {
        output.WriteInt32(5, field_names[1], ChargeTurn);
      }
      if (SkillTypeIcon != "") {
        output.WriteString(6, field_names[11], SkillTypeIcon);
      }
      if (SkillType != "") {
        output.WriteString(7, field_names[10], SkillType);
      }
      if (GiveTarget != "") {
        output.WriteString(8, field_names[5], GiveTarget);
      }
      if (GiveAmount != 0) {
        output.WriteInt32(9, field_names[4], GiveAmount);
      }
      if (Desc != "") {
        output.WriteString(10, field_names[2], Desc);
      }
      if (Desc2 != "") {
        output.WriteString(11, field_names[3], Desc2);
      }
      if (Memo1 != "") {
        output.WriteString(12, field_names[7], Memo1);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Param != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Param);
      }
      if (Charge != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Charge);
      }
      if (ChargeTurn != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ChargeTurn);
      }
      if (SkillTypeIcon != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, SkillTypeIcon);
      }
      if (SkillType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, SkillType);
      }
      if (GiveTarget != "") {
        size += pb::CodedOutputStream.ComputeStringSize(8, GiveTarget);
      }
      if (GiveAmount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, GiveAmount);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(10, Desc);
      }
      if (Desc2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, Desc2);
      }
      if (Memo1 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(12, Memo1);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PvpSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpSkill MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpSkill prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PvpSkill result;

      private PvpSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpSkill original = result;
          result = new PvpSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PvpSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PvpSkill.Descriptor; }
      }

      public override PvpSkill DefaultInstanceForType {
        get { return global::Master.PvpSkill.DefaultInstance; }
      }

      public override PvpSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpSkill) {
          return MergeFrom((PvpSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PvpSkill other) {
        if (other == global::Master.PvpSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Param != "") {
          Param = other.Param;
        }
        if (other.Charge != 0) {
          Charge = other.Charge;
        }
        if (other.ChargeTurn != 0) {
          ChargeTurn = other.ChargeTurn;
        }
        if (other.SkillTypeIcon != "") {
          SkillTypeIcon = other.SkillTypeIcon;
        }
        if (other.SkillType != "") {
          SkillType = other.SkillType;
        }
        if (other.GiveTarget != "") {
          GiveTarget = other.GiveTarget;
        }
        if (other.GiveAmount != 0) {
          GiveAmount = other.GiveAmount;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.Desc2 != "") {
          Desc2 = other.Desc2;
        }
        if (other.Memo1 != "") {
          Memo1 = other.Memo1;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.param_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.charge_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.chargeTurn_);
              break;
            }
            case 50: {
              input.ReadString(ref result.skillTypeIcon_);
              break;
            }
            case 58: {
              input.ReadString(ref result.skillType_);
              break;
            }
            case 66: {
              input.ReadString(ref result.giveTarget_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.giveAmount_);
              break;
            }
            case 82: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 90: {
              input.ReadString(ref result.desc2_);
              break;
            }
            case 98: {
              input.ReadString(ref result.memo1_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = "";
        return this;
      }

      public int Charge {
        get { return result.Charge; }
        set { SetCharge(value); }
      }
      public Builder SetCharge(int value) {
        PrepareBuilder();
        result.charge_ = value;
        return this;
      }
      public Builder ClearCharge() {
        PrepareBuilder();
        result.charge_ = 0;
        return this;
      }

      public int ChargeTurn {
        get { return result.ChargeTurn; }
        set { SetChargeTurn(value); }
      }
      public Builder SetChargeTurn(int value) {
        PrepareBuilder();
        result.chargeTurn_ = value;
        return this;
      }
      public Builder ClearChargeTurn() {
        PrepareBuilder();
        result.chargeTurn_ = 0;
        return this;
      }

      public string SkillTypeIcon {
        get { return result.SkillTypeIcon; }
        set { SetSkillTypeIcon(value); }
      }
      public Builder SetSkillTypeIcon(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillTypeIcon_ = value;
        return this;
      }
      public Builder ClearSkillTypeIcon() {
        PrepareBuilder();
        result.skillTypeIcon_ = "";
        return this;
      }

      public string SkillType {
        get { return result.SkillType; }
        set { SetSkillType(value); }
      }
      public Builder SetSkillType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillType_ = value;
        return this;
      }
      public Builder ClearSkillType() {
        PrepareBuilder();
        result.skillType_ = "";
        return this;
      }

      public string GiveTarget {
        get { return result.GiveTarget; }
        set { SetGiveTarget(value); }
      }
      public Builder SetGiveTarget(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.giveTarget_ = value;
        return this;
      }
      public Builder ClearGiveTarget() {
        PrepareBuilder();
        result.giveTarget_ = "";
        return this;
      }

      public int GiveAmount {
        get { return result.GiveAmount; }
        set { SetGiveAmount(value); }
      }
      public Builder SetGiveAmount(int value) {
        PrepareBuilder();
        result.giveAmount_ = value;
        return this;
      }
      public Builder ClearGiveAmount() {
        PrepareBuilder();
        result.giveAmount_ = 0;
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string Desc2 {
        get { return result.Desc2; }
        set { SetDesc2(value); }
      }
      public Builder SetDesc2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc2_ = value;
        return this;
      }
      public Builder ClearDesc2() {
        PrepareBuilder();
        result.desc2_ = "";
        return this;
      }

      public string Memo1 {
        get { return result.Memo1; }
        set { SetMemo1(value); }
      }
      public Builder SetMemo1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memo1_ = value;
        return this;
      }
      public Builder ClearMemo1() {
        PrepareBuilder();
        result.memo1_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpSoul : pb::GeneratedMessage<PvpSoul, PvpSoul.Builder> {
    public PvpSoul() { }
    private static readonly PvpSoul defaultInstance = new PvpSoul().MakeReadOnly();
    private static readonly string[] _pvpSoulFieldNames = new string[] { "desc", "game_desc", "id", "is_jewel", "name", "param", "prob", "target" };
    private static readonly uint[] _pvpSoulFieldTags = new uint[] { 58, 74, 8, 48, 18, 26, 40, 34 };
    public static PvpSoul DefaultInstance {
      get { return defaultInstance; }
    }

    public override PvpSoul DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PvpSoul ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PvpSoul__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PvpSoul, PvpSoul.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PvpSoul__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int ParamFieldNumber = 3;
    private string param_ = "";
    public string Param {
      get { return param_; }
      set { param_ = value; }
    }

    public const int TargetFieldNumber = 4;
    private string target_ = "";
    public string Target {
      get { return target_; }
      set { target_ = value; }
    }

    public const int ProbFieldNumber = 5;
    private int prob_;
    public int Prob {
      get { return prob_; }
      set { prob_ = value; }
    }

    public const int IsJewelFieldNumber = 6;
    private bool isJewel_;
    public bool IsJewel {
      get { return isJewel_; }
      set { isJewel_ = value; }
    }

    public const int DescFieldNumber = 7;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int GameDescFieldNumber = 9;
    private string gameDesc_ = "";
    public string GameDesc {
      get { return gameDesc_; }
      set { gameDesc_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pvpSoulFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[4], Name);
      }
      if (Param != "") {
        output.WriteString(3, field_names[5], Param);
      }
      if (Target != "") {
        output.WriteString(4, field_names[7], Target);
      }
      if (Prob != 0) {
        output.WriteInt32(5, field_names[6], Prob);
      }
      if (IsJewel != false) {
        output.WriteBool(6, field_names[3], IsJewel);
      }
      if (Desc != "") {
        output.WriteString(7, field_names[0], Desc);
      }
      if (GameDesc != "") {
        output.WriteString(9, field_names[1], GameDesc);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Param != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Param);
      }
      if (Target != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Target);
      }
      if (Prob != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Prob);
      }
      if (IsJewel != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IsJewel);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, Desc);
      }
      if (GameDesc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(9, GameDesc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PvpSoul ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpSoul ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpSoul ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpSoul ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpSoul ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpSoul ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpSoul ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpSoul ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpSoul ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpSoul ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpSoul MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpSoul prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpSoul, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpSoul cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PvpSoul result;

      private PvpSoul PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpSoul original = result;
          result = new PvpSoul();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PvpSoul MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PvpSoul.Descriptor; }
      }

      public override PvpSoul DefaultInstanceForType {
        get { return global::Master.PvpSoul.DefaultInstance; }
      }

      public override PvpSoul BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpSoul) {
          return MergeFrom((PvpSoul) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PvpSoul other) {
        if (other == global::Master.PvpSoul.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Param != "") {
          Param = other.Param;
        }
        if (other.Target != "") {
          Target = other.Target;
        }
        if (other.Prob != 0) {
          Prob = other.Prob;
        }
        if (other.IsJewel != false) {
          IsJewel = other.IsJewel;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.GameDesc != "") {
          GameDesc = other.GameDesc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpSoulFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpSoulFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.param_);
              break;
            }
            case 34: {
              input.ReadString(ref result.target_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.prob_);
              break;
            }
            case 48: {
              input.ReadBool(ref result.isJewel_);
              break;
            }
            case 58: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 74: {
              input.ReadString(ref result.gameDesc_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = "";
        return this;
      }

      public string Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.target_ = value;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.target_ = "";
        return this;
      }

      public int Prob {
        get { return result.Prob; }
        set { SetProb(value); }
      }
      public Builder SetProb(int value) {
        PrepareBuilder();
        result.prob_ = value;
        return this;
      }
      public Builder ClearProb() {
        PrepareBuilder();
        result.prob_ = 0;
        return this;
      }

      public bool IsJewel {
        get { return result.IsJewel; }
        set { SetIsJewel(value); }
      }
      public Builder SetIsJewel(bool value) {
        PrepareBuilder();
        result.isJewel_ = value;
        return this;
      }
      public Builder ClearIsJewel() {
        PrepareBuilder();
        result.isJewel_ = false;
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string GameDesc {
        get { return result.GameDesc; }
        set { SetGameDesc(value); }
      }
      public Builder SetGameDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gameDesc_ = value;
        return this;
      }
      public Builder ClearGameDesc() {
        PrepareBuilder();
        result.gameDesc_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpAttribute : pb::GeneratedMessage<PvpAttribute, PvpAttribute.Builder> {
    public PvpAttribute() { }
    private static readonly PvpAttribute defaultInstance = new PvpAttribute().MakeReadOnly();
    private static readonly string[] _pvpAttributeFieldNames = new string[] { "desc", "id", "image", "name" };
    private static readonly uint[] _pvpAttributeFieldTags = new uint[] { 26, 10, 34, 18 };
    public static PvpAttribute DefaultInstance {
      get { return defaultInstance; }
    }

    public override PvpAttribute DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PvpAttribute ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PvpAttribute__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PvpAttribute, PvpAttribute.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PvpAttribute__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int DescFieldNumber = 3;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int ImageFieldNumber = 4;
    private string image_ = "";
    public string Image {
      get { return image_; }
      set { image_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pvpAttributeFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[1], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[3], Name);
      }
      if (Desc != "") {
        output.WriteString(3, field_names[0], Desc);
      }
      if (Image != "") {
        output.WriteString(4, field_names[2], Image);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
      }
      if (Image != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Image);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PvpAttribute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpAttribute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpAttribute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpAttribute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpAttribute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpAttribute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpAttribute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpAttribute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpAttribute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpAttribute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpAttribute MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpAttribute prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpAttribute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpAttribute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PvpAttribute result;

      private PvpAttribute PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpAttribute original = result;
          result = new PvpAttribute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PvpAttribute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PvpAttribute.Descriptor; }
      }

      public override PvpAttribute DefaultInstanceForType {
        get { return global::Master.PvpAttribute.DefaultInstance; }
      }

      public override PvpAttribute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpAttribute) {
          return MergeFrom((PvpAttribute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PvpAttribute other) {
        if (other == global::Master.PvpAttribute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.Image != "") {
          Image = other.Image;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpAttributeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpAttributeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 34: {
              input.ReadString(ref result.image_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.image_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HomeLevel : pb::GeneratedMessage<HomeLevel, HomeLevel.Builder> {
    public HomeLevel() { }
    private static readonly HomeLevel defaultInstance = new HomeLevel().MakeReadOnly();
    private static readonly string[] _homeLevelFieldNames = new string[] { "cost_max", "exp", "image_base", "image_object", "level", "stamina_max" };
    private static readonly uint[] _homeLevelFieldTags = new uint[] { 32, 16, 40, 48, 8, 24 };
    public static HomeLevel DefaultInstance {
      get { return defaultInstance; }
    }

    public override HomeLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override HomeLevel ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_HomeLevel__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<HomeLevel, HomeLevel.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_HomeLevel__FieldAccessorTable; }
    }

    public const int LevelFieldNumber = 1;
    private int level_;
    public int Level {
      get { return level_; }
      set { level_ = value; }
    }

    public const int ExpFieldNumber = 2;
    private int exp_;
    public int Exp {
      get { return exp_; }
      set { exp_ = value; }
    }

    public const int StaminaMaxFieldNumber = 3;
    private int staminaMax_;
    public int StaminaMax {
      get { return staminaMax_; }
      set { staminaMax_ = value; }
    }

    public const int CostMaxFieldNumber = 4;
    private int costMax_;
    public int CostMax {
      get { return costMax_; }
      set { costMax_ = value; }
    }

    public const int ImageBaseFieldNumber = 5;
    private int imageBase_;
    public int ImageBase {
      get { return imageBase_; }
      set { imageBase_ = value; }
    }

    public const int ImageObjectFieldNumber = 6;
    private int imageObject_;
    public int ImageObject {
      get { return imageObject_; }
      set { imageObject_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _homeLevelFieldNames;
      if (Level != 0) {
        output.WriteInt32(1, field_names[4], Level);
      }
      if (Exp != 0) {
        output.WriteInt32(2, field_names[1], Exp);
      }
      if (StaminaMax != 0) {
        output.WriteInt32(3, field_names[5], StaminaMax);
      }
      if (CostMax != 0) {
        output.WriteInt32(4, field_names[0], CostMax);
      }
      if (ImageBase != 0) {
        output.WriteInt32(5, field_names[2], ImageBase);
      }
      if (ImageObject != 0) {
        output.WriteInt32(6, field_names[3], ImageObject);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Level != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
      }
      if (Exp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Exp);
      }
      if (StaminaMax != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, StaminaMax);
      }
      if (CostMax != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CostMax);
      }
      if (ImageBase != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ImageBase);
      }
      if (ImageObject != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ImageObject);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static HomeLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HomeLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HomeLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HomeLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HomeLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HomeLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HomeLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HomeLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HomeLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HomeLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HomeLevel MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HomeLevel prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<HomeLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HomeLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private HomeLevel result;

      private HomeLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          HomeLevel original = result;
          result = new HomeLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override HomeLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.HomeLevel.Descriptor; }
      }

      public override HomeLevel DefaultInstanceForType {
        get { return global::Master.HomeLevel.DefaultInstance; }
      }

      public override HomeLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HomeLevel) {
          return MergeFrom((HomeLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(HomeLevel other) {
        if (other == global::Master.HomeLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Level != 0) {
          Level = other.Level;
        }
        if (other.Exp != 0) {
          Exp = other.Exp;
        }
        if (other.StaminaMax != 0) {
          StaminaMax = other.StaminaMax;
        }
        if (other.CostMax != 0) {
          CostMax = other.CostMax;
        }
        if (other.ImageBase != 0) {
          ImageBase = other.ImageBase;
        }
        if (other.ImageObject != 0) {
          ImageObject = other.ImageObject;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_homeLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _homeLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.level_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.exp_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.staminaMax_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.costMax_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.imageBase_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.imageObject_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.level_ = 0;
        return this;
      }

      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.exp_ = 0;
        return this;
      }

      public int StaminaMax {
        get { return result.StaminaMax; }
        set { SetStaminaMax(value); }
      }
      public Builder SetStaminaMax(int value) {
        PrepareBuilder();
        result.staminaMax_ = value;
        return this;
      }
      public Builder ClearStaminaMax() {
        PrepareBuilder();
        result.staminaMax_ = 0;
        return this;
      }

      public int CostMax {
        get { return result.CostMax; }
        set { SetCostMax(value); }
      }
      public Builder SetCostMax(int value) {
        PrepareBuilder();
        result.costMax_ = value;
        return this;
      }
      public Builder ClearCostMax() {
        PrepareBuilder();
        result.costMax_ = 0;
        return this;
      }

      public int ImageBase {
        get { return result.ImageBase; }
        set { SetImageBase(value); }
      }
      public Builder SetImageBase(int value) {
        PrepareBuilder();
        result.imageBase_ = value;
        return this;
      }
      public Builder ClearImageBase() {
        PrepareBuilder();
        result.imageBase_ = 0;
        return this;
      }

      public int ImageObject {
        get { return result.ImageObject; }
        set { SetImageObject(value); }
      }
      public Builder SetImageObject(int value) {
        PrepareBuilder();
        result.imageObject_ = value;
        return this;
      }
      public Builder ClearImageObject() {
        PrepareBuilder();
        result.imageObject_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MonsterLevel : pb::GeneratedMessage<MonsterLevel, MonsterLevel.Builder> {
    public MonsterLevel() { }
    private static readonly MonsterLevel defaultInstance = new MonsterLevel().MakeReadOnly();
    private static readonly string[] _monsterLevelFieldNames = new string[] { "dummy", "exp", "level" };
    private static readonly uint[] _monsterLevelFieldTags = new uint[] { 24, 16, 8 };
    public static MonsterLevel DefaultInstance {
      get { return defaultInstance; }
    }

    public override MonsterLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override MonsterLevel ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_MonsterLevel__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<MonsterLevel, MonsterLevel.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_MonsterLevel__FieldAccessorTable; }
    }

    public const int LevelFieldNumber = 1;
    private int level_;
    public int Level {
      get { return level_; }
      set { level_ = value; }
    }

    public const int ExpFieldNumber = 2;
    private int exp_;
    public int Exp {
      get { return exp_; }
      set { exp_ = value; }
    }

    public const int DummyFieldNumber = 3;
    private int dummy_;
    public int Dummy {
      get { return dummy_; }
      set { dummy_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _monsterLevelFieldNames;
      if (Level != 0) {
        output.WriteInt32(1, field_names[2], Level);
      }
      if (Exp != 0) {
        output.WriteInt32(2, field_names[1], Exp);
      }
      if (Dummy != 0) {
        output.WriteInt32(3, field_names[0], Dummy);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Level != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
      }
      if (Exp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Exp);
      }
      if (Dummy != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Dummy);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MonsterLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MonsterLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MonsterLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MonsterLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MonsterLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MonsterLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MonsterLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MonsterLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MonsterLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MonsterLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MonsterLevel MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MonsterLevel prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MonsterLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MonsterLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private MonsterLevel result;

      private MonsterLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          MonsterLevel original = result;
          result = new MonsterLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override MonsterLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.MonsterLevel.Descriptor; }
      }

      public override MonsterLevel DefaultInstanceForType {
        get { return global::Master.MonsterLevel.DefaultInstance; }
      }

      public override MonsterLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MonsterLevel) {
          return MergeFrom((MonsterLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(MonsterLevel other) {
        if (other == global::Master.MonsterLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Level != 0) {
          Level = other.Level;
        }
        if (other.Exp != 0) {
          Exp = other.Exp;
        }
        if (other.Dummy != 0) {
          Dummy = other.Dummy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_monsterLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _monsterLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.level_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.exp_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.dummy_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.level_ = 0;
        return this;
      }

      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.exp_ = 0;
        return this;
      }

      public int Dummy {
        get { return result.Dummy; }
        set { SetDummy(value); }
      }
      public Builder SetDummy(int value) {
        PrepareBuilder();
        result.dummy_ = value;
        return this;
      }
      public Builder ClearDummy() {
        PrepareBuilder();
        result.dummy_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FangDrop : pb::GeneratedMessage<FangDrop, FangDrop.Builder> {
    public FangDrop() { }
    private static readonly FangDrop defaultInstance = new FangDrop().MakeReadOnly();
    private static readonly string[] _fangDropFieldNames = new string[] { "enemy_id0", "enemy_id1", "enemy_id2", "enemy_id3", "enemy_id4", "id", "level0", "level1", "level2", "level3", "level4", "rate0", "rate1", "rate2", "rate3", "rate4" };
    private static readonly uint[] _fangDropFieldTags = new uint[] { 18, 42, 66, 90, 114, 8, 24, 48, 72, 96, 120, 32, 56, 80, 104, 128 };
    public static FangDrop DefaultInstance {
      get { return defaultInstance; }
    }

    public override FangDrop DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override FangDrop ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_FangDrop__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<FangDrop, FangDrop.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_FangDrop__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int EnemyId0FieldNumber = 2;
    private string enemyId0_ = "";
    public string EnemyId0 {
      get { return enemyId0_; }
      set { enemyId0_ = value; }
    }

    public const int Level0FieldNumber = 3;
    private int level0_;
    public int Level0 {
      get { return level0_; }
      set { level0_ = value; }
    }

    public const int Rate0FieldNumber = 4;
    private int rate0_;
    public int Rate0 {
      get { return rate0_; }
      set { rate0_ = value; }
    }

    public const int EnemyId1FieldNumber = 5;
    private string enemyId1_ = "";
    public string EnemyId1 {
      get { return enemyId1_; }
      set { enemyId1_ = value; }
    }

    public const int Level1FieldNumber = 6;
    private int level1_;
    public int Level1 {
      get { return level1_; }
      set { level1_ = value; }
    }

    public const int Rate1FieldNumber = 7;
    private int rate1_;
    public int Rate1 {
      get { return rate1_; }
      set { rate1_ = value; }
    }

    public const int EnemyId2FieldNumber = 8;
    private string enemyId2_ = "";
    public string EnemyId2 {
      get { return enemyId2_; }
      set { enemyId2_ = value; }
    }

    public const int Level2FieldNumber = 9;
    private int level2_;
    public int Level2 {
      get { return level2_; }
      set { level2_ = value; }
    }

    public const int Rate2FieldNumber = 10;
    private int rate2_;
    public int Rate2 {
      get { return rate2_; }
      set { rate2_ = value; }
    }

    public const int EnemyId3FieldNumber = 11;
    private string enemyId3_ = "";
    public string EnemyId3 {
      get { return enemyId3_; }
      set { enemyId3_ = value; }
    }

    public const int Level3FieldNumber = 12;
    private int level3_;
    public int Level3 {
      get { return level3_; }
      set { level3_ = value; }
    }

    public const int Rate3FieldNumber = 13;
    private int rate3_;
    public int Rate3 {
      get { return rate3_; }
      set { rate3_ = value; }
    }

    public const int EnemyId4FieldNumber = 14;
    private string enemyId4_ = "";
    public string EnemyId4 {
      get { return enemyId4_; }
      set { enemyId4_ = value; }
    }

    public const int Level4FieldNumber = 15;
    private int level4_;
    public int Level4 {
      get { return level4_; }
      set { level4_ = value; }
    }

    public const int Rate4FieldNumber = 16;
    private int rate4_;
    public int Rate4 {
      get { return rate4_; }
      set { rate4_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fangDropFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[5], Id);
      }
      if (EnemyId0 != "") {
        output.WriteString(2, field_names[0], EnemyId0);
      }
      if (Level0 != 0) {
        output.WriteInt32(3, field_names[6], Level0);
      }
      if (Rate0 != 0) {
        output.WriteInt32(4, field_names[11], Rate0);
      }
      if (EnemyId1 != "") {
        output.WriteString(5, field_names[1], EnemyId1);
      }
      if (Level1 != 0) {
        output.WriteInt32(6, field_names[7], Level1);
      }
      if (Rate1 != 0) {
        output.WriteInt32(7, field_names[12], Rate1);
      }
      if (EnemyId2 != "") {
        output.WriteString(8, field_names[2], EnemyId2);
      }
      if (Level2 != 0) {
        output.WriteInt32(9, field_names[8], Level2);
      }
      if (Rate2 != 0) {
        output.WriteInt32(10, field_names[13], Rate2);
      }
      if (EnemyId3 != "") {
        output.WriteString(11, field_names[3], EnemyId3);
      }
      if (Level3 != 0) {
        output.WriteInt32(12, field_names[9], Level3);
      }
      if (Rate3 != 0) {
        output.WriteInt32(13, field_names[14], Rate3);
      }
      if (EnemyId4 != "") {
        output.WriteString(14, field_names[4], EnemyId4);
      }
      if (Level4 != 0) {
        output.WriteInt32(15, field_names[10], Level4);
      }
      if (Rate4 != 0) {
        output.WriteInt32(16, field_names[15], Rate4);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (EnemyId0 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, EnemyId0);
      }
      if (Level0 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Level0);
      }
      if (Rate0 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Rate0);
      }
      if (EnemyId1 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, EnemyId1);
      }
      if (Level1 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Level1);
      }
      if (Rate1 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Rate1);
      }
      if (EnemyId2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(8, EnemyId2);
      }
      if (Level2 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Level2);
      }
      if (Rate2 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Rate2);
      }
      if (EnemyId3 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, EnemyId3);
      }
      if (Level3 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, Level3);
      }
      if (Rate3 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Rate3);
      }
      if (EnemyId4 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(14, EnemyId4);
      }
      if (Level4 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, Level4);
      }
      if (Rate4 != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, Rate4);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FangDrop ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FangDrop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FangDrop ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FangDrop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FangDrop ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FangDrop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FangDrop ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FangDrop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FangDrop ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FangDrop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FangDrop MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FangDrop prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FangDrop, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FangDrop cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private FangDrop result;

      private FangDrop PrepareBuilder() {
        if (resultIsReadOnly) {
          FangDrop original = result;
          result = new FangDrop();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override FangDrop MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.FangDrop.Descriptor; }
      }

      public override FangDrop DefaultInstanceForType {
        get { return global::Master.FangDrop.DefaultInstance; }
      }

      public override FangDrop BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FangDrop) {
          return MergeFrom((FangDrop) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(FangDrop other) {
        if (other == global::Master.FangDrop.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.EnemyId0 != "") {
          EnemyId0 = other.EnemyId0;
        }
        if (other.Level0 != 0) {
          Level0 = other.Level0;
        }
        if (other.Rate0 != 0) {
          Rate0 = other.Rate0;
        }
        if (other.EnemyId1 != "") {
          EnemyId1 = other.EnemyId1;
        }
        if (other.Level1 != 0) {
          Level1 = other.Level1;
        }
        if (other.Rate1 != 0) {
          Rate1 = other.Rate1;
        }
        if (other.EnemyId2 != "") {
          EnemyId2 = other.EnemyId2;
        }
        if (other.Level2 != 0) {
          Level2 = other.Level2;
        }
        if (other.Rate2 != 0) {
          Rate2 = other.Rate2;
        }
        if (other.EnemyId3 != "") {
          EnemyId3 = other.EnemyId3;
        }
        if (other.Level3 != 0) {
          Level3 = other.Level3;
        }
        if (other.Rate3 != 0) {
          Rate3 = other.Rate3;
        }
        if (other.EnemyId4 != "") {
          EnemyId4 = other.EnemyId4;
        }
        if (other.Level4 != 0) {
          Level4 = other.Level4;
        }
        if (other.Rate4 != 0) {
          Rate4 = other.Rate4;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fangDropFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fangDropFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.enemyId0_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.level0_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.rate0_);
              break;
            }
            case 42: {
              input.ReadString(ref result.enemyId1_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.level1_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.rate1_);
              break;
            }
            case 66: {
              input.ReadString(ref result.enemyId2_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.level2_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.rate2_);
              break;
            }
            case 90: {
              input.ReadString(ref result.enemyId3_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.level3_);
              break;
            }
            case 104: {
              input.ReadInt32(ref result.rate3_);
              break;
            }
            case 114: {
              input.ReadString(ref result.enemyId4_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.level4_);
              break;
            }
            case 128: {
              input.ReadInt32(ref result.rate4_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string EnemyId0 {
        get { return result.EnemyId0; }
        set { SetEnemyId0(value); }
      }
      public Builder SetEnemyId0(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemyId0_ = value;
        return this;
      }
      public Builder ClearEnemyId0() {
        PrepareBuilder();
        result.enemyId0_ = "";
        return this;
      }

      public int Level0 {
        get { return result.Level0; }
        set { SetLevel0(value); }
      }
      public Builder SetLevel0(int value) {
        PrepareBuilder();
        result.level0_ = value;
        return this;
      }
      public Builder ClearLevel0() {
        PrepareBuilder();
        result.level0_ = 0;
        return this;
      }

      public int Rate0 {
        get { return result.Rate0; }
        set { SetRate0(value); }
      }
      public Builder SetRate0(int value) {
        PrepareBuilder();
        result.rate0_ = value;
        return this;
      }
      public Builder ClearRate0() {
        PrepareBuilder();
        result.rate0_ = 0;
        return this;
      }

      public string EnemyId1 {
        get { return result.EnemyId1; }
        set { SetEnemyId1(value); }
      }
      public Builder SetEnemyId1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemyId1_ = value;
        return this;
      }
      public Builder ClearEnemyId1() {
        PrepareBuilder();
        result.enemyId1_ = "";
        return this;
      }

      public int Level1 {
        get { return result.Level1; }
        set { SetLevel1(value); }
      }
      public Builder SetLevel1(int value) {
        PrepareBuilder();
        result.level1_ = value;
        return this;
      }
      public Builder ClearLevel1() {
        PrepareBuilder();
        result.level1_ = 0;
        return this;
      }

      public int Rate1 {
        get { return result.Rate1; }
        set { SetRate1(value); }
      }
      public Builder SetRate1(int value) {
        PrepareBuilder();
        result.rate1_ = value;
        return this;
      }
      public Builder ClearRate1() {
        PrepareBuilder();
        result.rate1_ = 0;
        return this;
      }

      public string EnemyId2 {
        get { return result.EnemyId2; }
        set { SetEnemyId2(value); }
      }
      public Builder SetEnemyId2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemyId2_ = value;
        return this;
      }
      public Builder ClearEnemyId2() {
        PrepareBuilder();
        result.enemyId2_ = "";
        return this;
      }

      public int Level2 {
        get { return result.Level2; }
        set { SetLevel2(value); }
      }
      public Builder SetLevel2(int value) {
        PrepareBuilder();
        result.level2_ = value;
        return this;
      }
      public Builder ClearLevel2() {
        PrepareBuilder();
        result.level2_ = 0;
        return this;
      }

      public int Rate2 {
        get { return result.Rate2; }
        set { SetRate2(value); }
      }
      public Builder SetRate2(int value) {
        PrepareBuilder();
        result.rate2_ = value;
        return this;
      }
      public Builder ClearRate2() {
        PrepareBuilder();
        result.rate2_ = 0;
        return this;
      }

      public string EnemyId3 {
        get { return result.EnemyId3; }
        set { SetEnemyId3(value); }
      }
      public Builder SetEnemyId3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemyId3_ = value;
        return this;
      }
      public Builder ClearEnemyId3() {
        PrepareBuilder();
        result.enemyId3_ = "";
        return this;
      }

      public int Level3 {
        get { return result.Level3; }
        set { SetLevel3(value); }
      }
      public Builder SetLevel3(int value) {
        PrepareBuilder();
        result.level3_ = value;
        return this;
      }
      public Builder ClearLevel3() {
        PrepareBuilder();
        result.level3_ = 0;
        return this;
      }

      public int Rate3 {
        get { return result.Rate3; }
        set { SetRate3(value); }
      }
      public Builder SetRate3(int value) {
        PrepareBuilder();
        result.rate3_ = value;
        return this;
      }
      public Builder ClearRate3() {
        PrepareBuilder();
        result.rate3_ = 0;
        return this;
      }

      public string EnemyId4 {
        get { return result.EnemyId4; }
        set { SetEnemyId4(value); }
      }
      public Builder SetEnemyId4(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemyId4_ = value;
        return this;
      }
      public Builder ClearEnemyId4() {
        PrepareBuilder();
        result.enemyId4_ = "";
        return this;
      }

      public int Level4 {
        get { return result.Level4; }
        set { SetLevel4(value); }
      }
      public Builder SetLevel4(int value) {
        PrepareBuilder();
        result.level4_ = value;
        return this;
      }
      public Builder ClearLevel4() {
        PrepareBuilder();
        result.level4_ = 0;
        return this;
      }

      public int Rate4 {
        get { return result.Rate4; }
        set { SetRate4(value); }
      }
      public Builder SetRate4(int value) {
        PrepareBuilder();
        result.rate4_ = value;
        return this;
      }
      public Builder ClearRate4() {
        PrepareBuilder();
        result.rate4_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LimitBreakType : pb::GeneratedMessage<LimitBreakType, LimitBreakType.Builder> {
    public LimitBreakType() { }
    private static readonly LimitBreakType defaultInstance = new LimitBreakType().MakeReadOnly();
    private static readonly string[] _limitBreakTypeFieldNames = new string[] { "attack", "defense", "hp", "id", "items0", "items1", "items2", "items3", "items4", "items5", "name" };
    private static readonly uint[] _limitBreakTypeFieldTags = new uint[] { 34, 42, 26, 10, 50, 58, 66, 74, 82, 90, 18 };
    public static LimitBreakType DefaultInstance {
      get { return defaultInstance; }
    }

    public override LimitBreakType DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override LimitBreakType ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_LimitBreakType__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<LimitBreakType, LimitBreakType.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_LimitBreakType__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int HpFieldNumber = 3;
    private int hpMemoizedSerializedSize;
    private pbc::PopsicleList<int> hp_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HpList {
      get { return pbc::Lists.AsReadOnly(hp_); }
    }
    public int HpCount {
      get { return hp_.Count; }
    }
    public int GetHp(int index) {
      return hp_[index];
    }

    public const int AttackFieldNumber = 4;
    private int attackMemoizedSerializedSize;
    private pbc::PopsicleList<int> attack_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AttackList {
      get { return pbc::Lists.AsReadOnly(attack_); }
    }
    public int AttackCount {
      get { return attack_.Count; }
    }
    public int GetAttack(int index) {
      return attack_[index];
    }

    public const int DefenseFieldNumber = 5;
    private int defenseMemoizedSerializedSize;
    private pbc::PopsicleList<int> defense_ = new pbc::PopsicleList<int>();
    public scg::IList<int> DefenseList {
      get { return pbc::Lists.AsReadOnly(defense_); }
    }
    public int DefenseCount {
      get { return defense_.Count; }
    }
    public int GetDefense(int index) {
      return defense_[index];
    }

    public const int Items0FieldNumber = 6;
    private int items0MemoizedSerializedSize;
    private pbc::PopsicleList<int> items0_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Items0List {
      get { return pbc::Lists.AsReadOnly(items0_); }
    }
    public int Items0Count {
      get { return items0_.Count; }
    }
    public int GetItems0(int index) {
      return items0_[index];
    }

    public const int Items1FieldNumber = 7;
    private int items1MemoizedSerializedSize;
    private pbc::PopsicleList<int> items1_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Items1List {
      get { return pbc::Lists.AsReadOnly(items1_); }
    }
    public int Items1Count {
      get { return items1_.Count; }
    }
    public int GetItems1(int index) {
      return items1_[index];
    }

    public const int Items2FieldNumber = 8;
    private int items2MemoizedSerializedSize;
    private pbc::PopsicleList<int> items2_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Items2List {
      get { return pbc::Lists.AsReadOnly(items2_); }
    }
    public int Items2Count {
      get { return items2_.Count; }
    }
    public int GetItems2(int index) {
      return items2_[index];
    }

    public const int Items3FieldNumber = 9;
    private int items3MemoizedSerializedSize;
    private pbc::PopsicleList<int> items3_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Items3List {
      get { return pbc::Lists.AsReadOnly(items3_); }
    }
    public int Items3Count {
      get { return items3_.Count; }
    }
    public int GetItems3(int index) {
      return items3_[index];
    }

    public const int Items4FieldNumber = 10;
    private int items4MemoizedSerializedSize;
    private pbc::PopsicleList<int> items4_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Items4List {
      get { return pbc::Lists.AsReadOnly(items4_); }
    }
    public int Items4Count {
      get { return items4_.Count; }
    }
    public int GetItems4(int index) {
      return items4_[index];
    }

    public const int Items5FieldNumber = 11;
    private int items5MemoizedSerializedSize;
    private pbc::PopsicleList<int> items5_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Items5List {
      get { return pbc::Lists.AsReadOnly(items5_); }
    }
    public int Items5Count {
      get { return items5_.Count; }
    }
    public int GetItems5(int index) {
      return items5_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _limitBreakTypeFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[3], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[10], Name);
      }
      if (hp_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[2], hpMemoizedSerializedSize, hp_);
      }
      if (attack_.Count > 0) {
        output.WritePackedInt32Array(4, field_names[0], attackMemoizedSerializedSize, attack_);
      }
      if (defense_.Count > 0) {
        output.WritePackedInt32Array(5, field_names[1], defenseMemoizedSerializedSize, defense_);
      }
      if (items0_.Count > 0) {
        output.WritePackedInt32Array(6, field_names[4], items0MemoizedSerializedSize, items0_);
      }
      if (items1_.Count > 0) {
        output.WritePackedInt32Array(7, field_names[5], items1MemoizedSerializedSize, items1_);
      }
      if (items2_.Count > 0) {
        output.WritePackedInt32Array(8, field_names[6], items2MemoizedSerializedSize, items2_);
      }
      if (items3_.Count > 0) {
        output.WritePackedInt32Array(9, field_names[7], items3MemoizedSerializedSize, items3_);
      }
      if (items4_.Count > 0) {
        output.WritePackedInt32Array(10, field_names[8], items4MemoizedSerializedSize, items4_);
      }
      if (items5_.Count > 0) {
        output.WritePackedInt32Array(11, field_names[9], items5MemoizedSerializedSize, items5_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      {
        int dataSize = 0;
        foreach (int element in HpList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (hp_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        hpMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in AttackList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (attack_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        attackMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in DefenseList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (defense_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        defenseMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Items0List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (items0_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        items0MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Items1List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (items1_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        items1MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Items2List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (items2_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        items2MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Items3List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (items3_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        items3MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Items4List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (items4_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        items4MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Items5List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (items5_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        items5MemoizedSerializedSize = dataSize;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LimitBreakType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LimitBreakType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LimitBreakType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LimitBreakType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LimitBreakType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LimitBreakType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LimitBreakType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LimitBreakType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LimitBreakType ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LimitBreakType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LimitBreakType MakeReadOnly() {
      hp_.MakeReadOnly();
      attack_.MakeReadOnly();
      defense_.MakeReadOnly();
      items0_.MakeReadOnly();
      items1_.MakeReadOnly();
      items2_.MakeReadOnly();
      items3_.MakeReadOnly();
      items4_.MakeReadOnly();
      items5_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LimitBreakType prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LimitBreakType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LimitBreakType cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private LimitBreakType result;

      private LimitBreakType PrepareBuilder() {
        if (resultIsReadOnly) {
          LimitBreakType original = result;
          result = new LimitBreakType();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override LimitBreakType MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.LimitBreakType.Descriptor; }
      }

      public override LimitBreakType DefaultInstanceForType {
        get { return global::Master.LimitBreakType.DefaultInstance; }
      }

      public override LimitBreakType BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LimitBreakType) {
          return MergeFrom((LimitBreakType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(LimitBreakType other) {
        if (other == global::Master.LimitBreakType.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.hp_.Count != 0) {
          result.hp_.Add(other.hp_);
        }
        if (other.attack_.Count != 0) {
          result.attack_.Add(other.attack_);
        }
        if (other.defense_.Count != 0) {
          result.defense_.Add(other.defense_);
        }
        if (other.items0_.Count != 0) {
          result.items0_.Add(other.items0_);
        }
        if (other.items1_.Count != 0) {
          result.items1_.Add(other.items1_);
        }
        if (other.items2_.Count != 0) {
          result.items2_.Add(other.items2_);
        }
        if (other.items3_.Count != 0) {
          result.items3_.Add(other.items3_);
        }
        if (other.items4_.Count != 0) {
          result.items4_.Add(other.items4_);
        }
        if (other.items5_.Count != 0) {
          result.items5_.Add(other.items5_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_limitBreakTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _limitBreakTypeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.hp_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.attack_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt32Array(tag, field_name, result.defense_);
              break;
            }
            case 50:
            case 48: {
              input.ReadInt32Array(tag, field_name, result.items0_);
              break;
            }
            case 58:
            case 56: {
              input.ReadInt32Array(tag, field_name, result.items1_);
              break;
            }
            case 66:
            case 64: {
              input.ReadInt32Array(tag, field_name, result.items2_);
              break;
            }
            case 74:
            case 72: {
              input.ReadInt32Array(tag, field_name, result.items3_);
              break;
            }
            case 82:
            case 80: {
              input.ReadInt32Array(tag, field_name, result.items4_);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.items5_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public pbc::IPopsicleList<int> HpList {
        get { return PrepareBuilder().hp_; }
      }
      public int HpCount {
        get { return result.HpCount; }
      }
      public int GetHp(int index) {
        return result.GetHp(index);
      }
      public Builder SetHp(int index, int value) {
        PrepareBuilder();
        result.hp_[index] = value;
        return this;
      }
      public Builder AddHp(int value) {
        PrepareBuilder();
        result.hp_.Add(value);
        return this;
      }
      public Builder AddRangeHp(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.hp_.Add(values);
        return this;
      }
      public Builder ClearHp() {
        PrepareBuilder();
        result.hp_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> AttackList {
        get { return PrepareBuilder().attack_; }
      }
      public int AttackCount {
        get { return result.AttackCount; }
      }
      public int GetAttack(int index) {
        return result.GetAttack(index);
      }
      public Builder SetAttack(int index, int value) {
        PrepareBuilder();
        result.attack_[index] = value;
        return this;
      }
      public Builder AddAttack(int value) {
        PrepareBuilder();
        result.attack_.Add(value);
        return this;
      }
      public Builder AddRangeAttack(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.attack_.Add(values);
        return this;
      }
      public Builder ClearAttack() {
        PrepareBuilder();
        result.attack_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> DefenseList {
        get { return PrepareBuilder().defense_; }
      }
      public int DefenseCount {
        get { return result.DefenseCount; }
      }
      public int GetDefense(int index) {
        return result.GetDefense(index);
      }
      public Builder SetDefense(int index, int value) {
        PrepareBuilder();
        result.defense_[index] = value;
        return this;
      }
      public Builder AddDefense(int value) {
        PrepareBuilder();
        result.defense_.Add(value);
        return this;
      }
      public Builder AddRangeDefense(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.defense_.Add(values);
        return this;
      }
      public Builder ClearDefense() {
        PrepareBuilder();
        result.defense_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> Items0List {
        get { return PrepareBuilder().items0_; }
      }
      public int Items0Count {
        get { return result.Items0Count; }
      }
      public int GetItems0(int index) {
        return result.GetItems0(index);
      }
      public Builder SetItems0(int index, int value) {
        PrepareBuilder();
        result.items0_[index] = value;
        return this;
      }
      public Builder AddItems0(int value) {
        PrepareBuilder();
        result.items0_.Add(value);
        return this;
      }
      public Builder AddRangeItems0(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items0_.Add(values);
        return this;
      }
      public Builder ClearItems0() {
        PrepareBuilder();
        result.items0_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> Items1List {
        get { return PrepareBuilder().items1_; }
      }
      public int Items1Count {
        get { return result.Items1Count; }
      }
      public int GetItems1(int index) {
        return result.GetItems1(index);
      }
      public Builder SetItems1(int index, int value) {
        PrepareBuilder();
        result.items1_[index] = value;
        return this;
      }
      public Builder AddItems1(int value) {
        PrepareBuilder();
        result.items1_.Add(value);
        return this;
      }
      public Builder AddRangeItems1(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items1_.Add(values);
        return this;
      }
      public Builder ClearItems1() {
        PrepareBuilder();
        result.items1_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> Items2List {
        get { return PrepareBuilder().items2_; }
      }
      public int Items2Count {
        get { return result.Items2Count; }
      }
      public int GetItems2(int index) {
        return result.GetItems2(index);
      }
      public Builder SetItems2(int index, int value) {
        PrepareBuilder();
        result.items2_[index] = value;
        return this;
      }
      public Builder AddItems2(int value) {
        PrepareBuilder();
        result.items2_.Add(value);
        return this;
      }
      public Builder AddRangeItems2(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items2_.Add(values);
        return this;
      }
      public Builder ClearItems2() {
        PrepareBuilder();
        result.items2_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> Items3List {
        get { return PrepareBuilder().items3_; }
      }
      public int Items3Count {
        get { return result.Items3Count; }
      }
      public int GetItems3(int index) {
        return result.GetItems3(index);
      }
      public Builder SetItems3(int index, int value) {
        PrepareBuilder();
        result.items3_[index] = value;
        return this;
      }
      public Builder AddItems3(int value) {
        PrepareBuilder();
        result.items3_.Add(value);
        return this;
      }
      public Builder AddRangeItems3(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items3_.Add(values);
        return this;
      }
      public Builder ClearItems3() {
        PrepareBuilder();
        result.items3_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> Items4List {
        get { return PrepareBuilder().items4_; }
      }
      public int Items4Count {
        get { return result.Items4Count; }
      }
      public int GetItems4(int index) {
        return result.GetItems4(index);
      }
      public Builder SetItems4(int index, int value) {
        PrepareBuilder();
        result.items4_[index] = value;
        return this;
      }
      public Builder AddItems4(int value) {
        PrepareBuilder();
        result.items4_.Add(value);
        return this;
      }
      public Builder AddRangeItems4(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items4_.Add(values);
        return this;
      }
      public Builder ClearItems4() {
        PrepareBuilder();
        result.items4_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> Items5List {
        get { return PrepareBuilder().items5_; }
      }
      public int Items5Count {
        get { return result.Items5Count; }
      }
      public int GetItems5(int index) {
        return result.GetItems5(index);
      }
      public Builder SetItems5(int index, int value) {
        PrepareBuilder();
        result.items5_[index] = value;
        return this;
      }
      public Builder AddItems5(int value) {
        PrepareBuilder();
        result.items5_.Add(value);
        return this;
      }
      public Builder AddRangeItems5(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.items5_.Add(values);
        return this;
      }
      public Builder ClearItems5() {
        PrepareBuilder();
        result.items5_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StackItemTemplate : pb::GeneratedMessage<StackItemTemplate, StackItemTemplate.Builder> {
    public StackItemTemplate() { }
    private static readonly StackItemTemplate defaultInstance = new StackItemTemplate().MakeReadOnly();
    private static readonly string[] _stackItemTemplateFieldNames = new string[] { "desc", "id", "name", "order", "param", "special", "type" };
    private static readonly uint[] _stackItemTemplateFieldTags = new uint[] { 50, 8, 42, 56, 32, 26, 18 };
    public static StackItemTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override StackItemTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StackItemTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_StackItemTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StackItemTemplate, StackItemTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_StackItemTemplate__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int TypeFieldNumber = 2;
    private string type_ = "";
    public string Type {
      get { return type_; }
      set { type_ = value; }
    }

    public const int SpecialFieldNumber = 3;
    private string special_ = "";
    public string Special {
      get { return special_; }
      set { special_ = value; }
    }

    public const int ParamFieldNumber = 4;
    private int param_;
    public int Param {
      get { return param_; }
      set { param_ = value; }
    }

    public const int NameFieldNumber = 5;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int DescFieldNumber = 6;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int OrderFieldNumber = 7;
    private int order_;
    public int Order {
      get { return order_; }
      set { order_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stackItemTemplateFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (Type != "") {
        output.WriteString(2, field_names[6], Type);
      }
      if (Special != "") {
        output.WriteString(3, field_names[5], Special);
      }
      if (Param != 0) {
        output.WriteInt32(4, field_names[4], Param);
      }
      if (Name != "") {
        output.WriteString(5, field_names[2], Name);
      }
      if (Desc != "") {
        output.WriteString(6, field_names[0], Desc);
      }
      if (Order != 0) {
        output.WriteInt32(7, field_names[3], Order);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Type != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Type);
      }
      if (Special != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Special);
      }
      if (Param != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Param);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Name);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, Desc);
      }
      if (Order != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Order);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StackItemTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StackItemTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StackItemTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StackItemTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StackItemTemplate MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StackItemTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StackItemTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StackItemTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StackItemTemplate result;

      private StackItemTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          StackItemTemplate original = result;
          result = new StackItemTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override StackItemTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.StackItemTemplate.Descriptor; }
      }

      public override StackItemTemplate DefaultInstanceForType {
        get { return global::Master.StackItemTemplate.DefaultInstance; }
      }

      public override StackItemTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StackItemTemplate) {
          return MergeFrom((StackItemTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StackItemTemplate other) {
        if (other == global::Master.StackItemTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Type != "") {
          Type = other.Type;
        }
        if (other.Special != "") {
          Special = other.Special;
        }
        if (other.Param != 0) {
          Param = other.Param;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.Order != 0) {
          Order = other.Order;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stackItemTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stackItemTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.type_);
              break;
            }
            case 26: {
              input.ReadString(ref result.special_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.param_);
              break;
            }
            case 42: {
              input.ReadString(ref result.name_);
              break;
            }
            case 50: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.order_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.type_ = "";
        return this;
      }

      public string Special {
        get { return result.Special; }
        set { SetSpecial(value); }
      }
      public Builder SetSpecial(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.special_ = value;
        return this;
      }
      public Builder ClearSpecial() {
        PrepareBuilder();
        result.special_ = "";
        return this;
      }

      public int Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(int value) {
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public int Order {
        get { return result.Order; }
        set { SetOrder(value); }
      }
      public Builder SetOrder(int value) {
        PrepareBuilder();
        result.order_ = value;
        return this;
      }
      public Builder ClearOrder() {
        PrepareBuilder();
        result.order_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExchangeShop : pb::GeneratedMessage<ExchangeShop, ExchangeShop.Builder> {
    public ExchangeShop() { }
    private static readonly ExchangeShop defaultInstance = new ExchangeShop().MakeReadOnly();
    private static readonly string[] _exchangeShopFieldNames = new string[] { "desc", "id", "name", "option", "season", "stack_item_id" };
    private static readonly uint[] _exchangeShopFieldTags = new uint[] { 42, 8, 26, 50, 16, 32 };
    public static ExchangeShop DefaultInstance {
      get { return defaultInstance; }
    }

    public override ExchangeShop DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ExchangeShop ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_ExchangeShop__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ExchangeShop, ExchangeShop.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_ExchangeShop__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int SeasonFieldNumber = 2;
    private int season_;
    public int Season {
      get { return season_; }
      set { season_ = value; }
    }

    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int StackItemIdFieldNumber = 4;
    private int stackItemId_;
    public int StackItemId {
      get { return stackItemId_; }
      set { stackItemId_ = value; }
    }

    public const int DescFieldNumber = 5;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int OptionFieldNumber = 6;
    private string option_ = "";
    public string Option {
      get { return option_; }
      set { option_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _exchangeShopFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (Season != 0) {
        output.WriteInt32(2, field_names[4], Season);
      }
      if (Name != "") {
        output.WriteString(3, field_names[2], Name);
      }
      if (StackItemId != 0) {
        output.WriteInt32(4, field_names[5], StackItemId);
      }
      if (Desc != "") {
        output.WriteString(5, field_names[0], Desc);
      }
      if (Option != "") {
        output.WriteString(6, field_names[3], Option);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Season != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Season);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (StackItemId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, StackItemId);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Desc);
      }
      if (Option != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, Option);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ExchangeShop ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExchangeShop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExchangeShop ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExchangeShop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExchangeShop ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExchangeShop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExchangeShop ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExchangeShop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExchangeShop ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExchangeShop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExchangeShop MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExchangeShop prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExchangeShop, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExchangeShop cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ExchangeShop result;

      private ExchangeShop PrepareBuilder() {
        if (resultIsReadOnly) {
          ExchangeShop original = result;
          result = new ExchangeShop();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override ExchangeShop MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.ExchangeShop.Descriptor; }
      }

      public override ExchangeShop DefaultInstanceForType {
        get { return global::Master.ExchangeShop.DefaultInstance; }
      }

      public override ExchangeShop BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExchangeShop) {
          return MergeFrom((ExchangeShop) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ExchangeShop other) {
        if (other == global::Master.ExchangeShop.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Season != 0) {
          Season = other.Season;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.StackItemId != 0) {
          StackItemId = other.StackItemId;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.Option != "") {
          Option = other.Option;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_exchangeShopFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _exchangeShopFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.season_);
              break;
            }
            case 26: {
              input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.stackItemId_);
              break;
            }
            case 42: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 50: {
              input.ReadString(ref result.option_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public int Season {
        get { return result.Season; }
        set { SetSeason(value); }
      }
      public Builder SetSeason(int value) {
        PrepareBuilder();
        result.season_ = value;
        return this;
      }
      public Builder ClearSeason() {
        PrepareBuilder();
        result.season_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int StackItemId {
        get { return result.StackItemId; }
        set { SetStackItemId(value); }
      }
      public Builder SetStackItemId(int value) {
        PrepareBuilder();
        result.stackItemId_ = value;
        return this;
      }
      public Builder ClearStackItemId() {
        PrepareBuilder();
        result.stackItemId_ = 0;
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string Option {
        get { return result.Option; }
        set { SetOption(value); }
      }
      public Builder SetOption(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.option_ = value;
        return this;
      }
      public Builder ClearOption() {
        PrepareBuilder();
        result.option_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExchangeItem : pb::GeneratedMessage<ExchangeItem, ExchangeItem.Builder> {
    public ExchangeItem() { }
    private static readonly ExchangeItem defaultInstance = new ExchangeItem().MakeReadOnly();
    private static readonly string[] _exchangeItemFieldNames = new string[] { "action", "exchange_shop_id", "id", "image", "limit", "name", "price" };
    private static readonly uint[] _exchangeItemFieldTags = new uint[] { 42, 16, 8, 34, 56, 26, 48 };
    public static ExchangeItem DefaultInstance {
      get { return defaultInstance; }
    }

    public override ExchangeItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ExchangeItem ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_ExchangeItem__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ExchangeItem, ExchangeItem.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_ExchangeItem__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int ExchangeShopIdFieldNumber = 2;
    private int exchangeShopId_;
    public int ExchangeShopId {
      get { return exchangeShopId_; }
      set { exchangeShopId_ = value; }
    }

    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int ImageFieldNumber = 4;
    private string image_ = "";
    public string Image {
      get { return image_; }
      set { image_ = value; }
    }

    public const int ActionFieldNumber = 5;
    private string action_ = "";
    public string Action {
      get { return action_; }
      set { action_ = value; }
    }

    public const int PriceFieldNumber = 6;
    private int price_;
    public int Price {
      get { return price_; }
      set { price_ = value; }
    }

    public const int LimitFieldNumber = 7;
    private int limit_;
    public int Limit {
      get { return limit_; }
      set { limit_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _exchangeItemFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (ExchangeShopId != 0) {
        output.WriteInt32(2, field_names[1], ExchangeShopId);
      }
      if (Name != "") {
        output.WriteString(3, field_names[5], Name);
      }
      if (Image != "") {
        output.WriteString(4, field_names[3], Image);
      }
      if (Action != "") {
        output.WriteString(5, field_names[0], Action);
      }
      if (Price != 0) {
        output.WriteInt32(6, field_names[6], Price);
      }
      if (Limit != 0) {
        output.WriteInt32(7, field_names[4], Limit);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (ExchangeShopId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ExchangeShopId);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (Image != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Image);
      }
      if (Action != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Action);
      }
      if (Price != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Price);
      }
      if (Limit != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Limit);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ExchangeItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExchangeItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExchangeItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExchangeItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExchangeItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExchangeItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExchangeItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExchangeItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExchangeItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExchangeItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExchangeItem MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExchangeItem prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExchangeItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExchangeItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ExchangeItem result;

      private ExchangeItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ExchangeItem original = result;
          result = new ExchangeItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override ExchangeItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.ExchangeItem.Descriptor; }
      }

      public override ExchangeItem DefaultInstanceForType {
        get { return global::Master.ExchangeItem.DefaultInstance; }
      }

      public override ExchangeItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExchangeItem) {
          return MergeFrom((ExchangeItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ExchangeItem other) {
        if (other == global::Master.ExchangeItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.ExchangeShopId != 0) {
          ExchangeShopId = other.ExchangeShopId;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Image != "") {
          Image = other.Image;
        }
        if (other.Action != "") {
          Action = other.Action;
        }
        if (other.Price != 0) {
          Price = other.Price;
        }
        if (other.Limit != 0) {
          Limit = other.Limit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_exchangeItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _exchangeItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.exchangeShopId_);
              break;
            }
            case 26: {
              input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              input.ReadString(ref result.image_);
              break;
            }
            case 42: {
              input.ReadString(ref result.action_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.price_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.limit_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public int ExchangeShopId {
        get { return result.ExchangeShopId; }
        set { SetExchangeShopId(value); }
      }
      public Builder SetExchangeShopId(int value) {
        PrepareBuilder();
        result.exchangeShopId_ = value;
        return this;
      }
      public Builder ClearExchangeShopId() {
        PrepareBuilder();
        result.exchangeShopId_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.image_ = "";
        return this;
      }

      public string Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.action_ = "";
        return this;
      }

      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.price_ = 0;
        return this;
      }

      public int Limit {
        get { return result.Limit; }
        set { SetLimit(value); }
      }
      public Builder SetLimit(int value) {
        PrepareBuilder();
        result.limit_ = value;
        return this;
      }
      public Builder ClearLimit() {
        PrepareBuilder();
        result.limit_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EmeraldShopItem : pb::GeneratedMessage<EmeraldShopItem, EmeraldShopItem.Builder> {
    public EmeraldShopItem() { }
    private static readonly EmeraldShopItem defaultInstance = new EmeraldShopItem().MakeReadOnly();
    private static readonly string[] _emeraldShopItemFieldNames = new string[] { "action", "desc", "id", "name", "order", "price", "require_home_level", "stack_item_id" };
    private static readonly uint[] _emeraldShopItemFieldTags = new uint[] { 66, 26, 10, 18, 40, 48, 56, 32 };
    public static EmeraldShopItem DefaultInstance {
      get { return defaultInstance; }
    }

    public override EmeraldShopItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override EmeraldShopItem ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_EmeraldShopItem__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<EmeraldShopItem, EmeraldShopItem.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_EmeraldShopItem__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int DescFieldNumber = 3;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int StackItemIdFieldNumber = 4;
    private int stackItemId_;
    public int StackItemId {
      get { return stackItemId_; }
      set { stackItemId_ = value; }
    }

    public const int OrderFieldNumber = 5;
    private int order_;
    public int Order {
      get { return order_; }
      set { order_ = value; }
    }

    public const int PriceFieldNumber = 6;
    private int price_;
    public int Price {
      get { return price_; }
      set { price_ = value; }
    }

    public const int RequireHomeLevelFieldNumber = 7;
    private int requireHomeLevel_;
    public int RequireHomeLevel {
      get { return requireHomeLevel_; }
      set { requireHomeLevel_ = value; }
    }

    public const int ActionFieldNumber = 8;
    private string action_ = "";
    public string Action {
      get { return action_; }
      set { action_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _emeraldShopItemFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[2], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[3], Name);
      }
      if (Desc != "") {
        output.WriteString(3, field_names[1], Desc);
      }
      if (StackItemId != 0) {
        output.WriteInt32(4, field_names[7], StackItemId);
      }
      if (Order != 0) {
        output.WriteInt32(5, field_names[4], Order);
      }
      if (Price != 0) {
        output.WriteInt32(6, field_names[5], Price);
      }
      if (RequireHomeLevel != 0) {
        output.WriteInt32(7, field_names[6], RequireHomeLevel);
      }
      if (Action != "") {
        output.WriteString(8, field_names[0], Action);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
      }
      if (StackItemId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, StackItemId);
      }
      if (Order != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Order);
      }
      if (Price != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Price);
      }
      if (RequireHomeLevel != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, RequireHomeLevel);
      }
      if (Action != "") {
        size += pb::CodedOutputStream.ComputeStringSize(8, Action);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EmeraldShopItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmeraldShopItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmeraldShopItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmeraldShopItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EmeraldShopItem MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmeraldShopItem prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EmeraldShopItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EmeraldShopItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private EmeraldShopItem result;

      private EmeraldShopItem PrepareBuilder() {
        if (resultIsReadOnly) {
          EmeraldShopItem original = result;
          result = new EmeraldShopItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override EmeraldShopItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.EmeraldShopItem.Descriptor; }
      }

      public override EmeraldShopItem DefaultInstanceForType {
        get { return global::Master.EmeraldShopItem.DefaultInstance; }
      }

      public override EmeraldShopItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EmeraldShopItem) {
          return MergeFrom((EmeraldShopItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(EmeraldShopItem other) {
        if (other == global::Master.EmeraldShopItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.StackItemId != 0) {
          StackItemId = other.StackItemId;
        }
        if (other.Order != 0) {
          Order = other.Order;
        }
        if (other.Price != 0) {
          Price = other.Price;
        }
        if (other.RequireHomeLevel != 0) {
          RequireHomeLevel = other.RequireHomeLevel;
        }
        if (other.Action != "") {
          Action = other.Action;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_emeraldShopItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _emeraldShopItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.stackItemId_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.order_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.price_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.requireHomeLevel_);
              break;
            }
            case 66: {
              input.ReadString(ref result.action_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public int StackItemId {
        get { return result.StackItemId; }
        set { SetStackItemId(value); }
      }
      public Builder SetStackItemId(int value) {
        PrepareBuilder();
        result.stackItemId_ = value;
        return this;
      }
      public Builder ClearStackItemId() {
        PrepareBuilder();
        result.stackItemId_ = 0;
        return this;
      }

      public int Order {
        get { return result.Order; }
        set { SetOrder(value); }
      }
      public Builder SetOrder(int value) {
        PrepareBuilder();
        result.order_ = value;
        return this;
      }
      public Builder ClearOrder() {
        PrepareBuilder();
        result.order_ = 0;
        return this;
      }

      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.price_ = 0;
        return this;
      }

      public int RequireHomeLevel {
        get { return result.RequireHomeLevel; }
        set { SetRequireHomeLevel(value); }
      }
      public Builder SetRequireHomeLevel(int value) {
        PrepareBuilder();
        result.requireHomeLevel_ = value;
        return this;
      }
      public Builder ClearRequireHomeLevel() {
        PrepareBuilder();
        result.requireHomeLevel_ = 0;
        return this;
      }

      public string Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.action_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PackItem : pb::GeneratedMessage<PackItem, PackItem.Builder> {
    public PackItem() { }
    private static readonly PackItem defaultInstance = new PackItem().MakeReadOnly();
    private static readonly string[] _packItemFieldNames = new string[] { "id", "image", "name", "price", "product_id" };
    private static readonly uint[] _packItemFieldTags = new uint[] { 10, 34, 26, 40, 18 };
    public static PackItem DefaultInstance {
      get { return defaultInstance; }
    }

    public override PackItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PackItem ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PackItem__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PackItem, PackItem.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PackItem__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    public string ProductId {
      get { return productId_; }
      set { productId_ = value; }
    }

    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int ImageFieldNumber = 4;
    private string image_ = "";
    public string Image {
      get { return image_; }
      set { image_ = value; }
    }

    public const int PriceFieldNumber = 5;
    private int price_;
    public int Price {
      get { return price_; }
      set { price_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _packItemFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[0], Id);
      }
      if (ProductId != "") {
        output.WriteString(2, field_names[4], ProductId);
      }
      if (Name != "") {
        output.WriteString(3, field_names[2], Name);
      }
      if (Image != "") {
        output.WriteString(4, field_names[1], Image);
      }
      if (Price != 0) {
        output.WriteInt32(5, field_names[3], Price);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (ProductId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, ProductId);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (Image != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Image);
      }
      if (Price != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Price);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PackItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PackItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PackItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PackItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PackItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PackItem MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PackItem prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PackItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PackItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PackItem result;

      private PackItem PrepareBuilder() {
        if (resultIsReadOnly) {
          PackItem original = result;
          result = new PackItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PackItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PackItem.Descriptor; }
      }

      public override PackItem DefaultInstanceForType {
        get { return global::Master.PackItem.DefaultInstance; }
      }

      public override PackItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PackItem) {
          return MergeFrom((PackItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PackItem other) {
        if (other == global::Master.PackItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.ProductId != "") {
          ProductId = other.ProductId;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Image != "") {
          Image = other.Image;
        }
        if (other.Price != 0) {
          Price = other.Price;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_packItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _packItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.productId_);
              break;
            }
            case 26: {
              input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              input.ReadString(ref result.image_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.price_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string ProductId {
        get { return result.ProductId; }
        set { SetProductId(value); }
      }
      public Builder SetProductId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.productId_ = value;
        return this;
      }
      public Builder ClearProductId() {
        PrepareBuilder();
        result.productId_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.image_ = "";
        return this;
      }

      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.price_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PresentTemplate : pb::GeneratedMessage<PresentTemplate, PresentTemplate.Builder> {
    public PresentTemplate() { }
    private static readonly PresentTemplate defaultInstance = new PresentTemplate().MakeReadOnly();
    private static readonly string[] _presentTemplateFieldNames = new string[] { "action", "id", "message", "name" };
    private static readonly uint[] _presentTemplateFieldTags = new uint[] { 34, 10, 26, 18 };
    public static PresentTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override PresentTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PresentTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PresentTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PresentTemplate, PresentTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PresentTemplate__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int MessageFieldNumber = 3;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set { message_ = value; }
    }

    public const int ActionFieldNumber = 4;
    private string action_ = "";
    public string Action {
      get { return action_; }
      set { action_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _presentTemplateFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[1], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[3], Name);
      }
      if (Message != "") {
        output.WriteString(3, field_names[2], Message);
      }
      if (Action != "") {
        output.WriteString(4, field_names[0], Action);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Message != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Message);
      }
      if (Action != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Action);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PresentTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresentTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresentTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresentTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresentTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresentTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PresentTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PresentTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PresentTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresentTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PresentTemplate MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PresentTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PresentTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PresentTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PresentTemplate result;

      private PresentTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          PresentTemplate original = result;
          result = new PresentTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PresentTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PresentTemplate.Descriptor; }
      }

      public override PresentTemplate DefaultInstanceForType {
        get { return global::Master.PresentTemplate.DefaultInstance; }
      }

      public override PresentTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PresentTemplate) {
          return MergeFrom((PresentTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PresentTemplate other) {
        if (other == global::Master.PresentTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Message != "") {
          Message = other.Message;
        }
        if (other.Action != "") {
          Action = other.Action;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_presentTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _presentTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.message_);
              break;
            }
            case 34: {
              input.ReadString(ref result.action_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.message_ = "";
        return this;
      }

      public string Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.action_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpLeague : pb::GeneratedMessage<PvpLeague, PvpLeague.Builder> {
    public PvpLeague() { }
    private static readonly PvpLeague defaultInstance = new PvpLeague().MakeReadOnly();
    private static readonly string[] _pvpLeagueFieldNames = new string[] { "id", "name" };
    private static readonly uint[] _pvpLeagueFieldTags = new uint[] { 8, 18 };
    public static PvpLeague DefaultInstance {
      get { return defaultInstance; }
    }

    public override PvpLeague DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PvpLeague ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PvpLeague__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PvpLeague, PvpLeague.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PvpLeague__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pvpLeagueFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PvpLeague ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpLeague ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpLeague ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpLeague ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpLeague ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpLeague ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpLeague ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpLeague ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpLeague ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpLeague ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpLeague MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpLeague prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpLeague, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpLeague cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PvpLeague result;

      private PvpLeague PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpLeague original = result;
          result = new PvpLeague();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PvpLeague MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PvpLeague.Descriptor; }
      }

      public override PvpLeague DefaultInstanceForType {
        get { return global::Master.PvpLeague.DefaultInstance; }
      }

      public override PvpLeague BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpLeague) {
          return MergeFrom((PvpLeague) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PvpLeague other) {
        if (other == global::Master.PvpLeague.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpLeagueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpLeagueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpGrade : pb::GeneratedMessage<PvpGrade, PvpGrade.Builder> {
    public PvpGrade() { }
    private static readonly PvpGrade defaultInstance = new PvpGrade().MakeReadOnly();
    private static readonly string[] _pvpGradeFieldNames = new string[] { "coin_lose", "coin_win", "depromote_point", "id", "matching_up", "name", "plate", "promote_point", "reward", "reward_desc" };
    private static readonly uint[] _pvpGradeFieldTags = new uint[] { 80, 72, 40, 8, 64, 18, 24, 32, 50, 58 };
    public static PvpGrade DefaultInstance {
      get { return defaultInstance; }
    }

    public override PvpGrade DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PvpGrade ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PvpGrade__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PvpGrade, PvpGrade.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PvpGrade__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int PlateFieldNumber = 3;
    private int plate_;
    public int Plate {
      get { return plate_; }
      set { plate_ = value; }
    }

    public const int PromotePointFieldNumber = 4;
    private int promotePoint_;
    public int PromotePoint {
      get { return promotePoint_; }
      set { promotePoint_ = value; }
    }

    public const int DepromotePointFieldNumber = 5;
    private int depromotePoint_;
    public int DepromotePoint {
      get { return depromotePoint_; }
      set { depromotePoint_ = value; }
    }

    public const int RewardFieldNumber = 6;
    private bool hasReward;
    private global::Master.PresentCommand reward_;
    public bool HasReward {
      get { return hasReward; }
    }
    public global::Master.PresentCommand Reward {
      get { return reward_ ?? global::Master.PresentCommand.DefaultInstance; }
    }

    public const int RewardDescFieldNumber = 7;
    private string rewardDesc_ = "";
    public string RewardDesc {
      get { return rewardDesc_; }
      set { rewardDesc_ = value; }
    }

    public const int MatchingUpFieldNumber = 8;
    private int matchingUp_;
    public int MatchingUp {
      get { return matchingUp_; }
      set { matchingUp_ = value; }
    }

    public const int CoinWinFieldNumber = 9;
    private int coinWin_;
    public int CoinWin {
      get { return coinWin_; }
      set { coinWin_ = value; }
    }

    public const int CoinLoseFieldNumber = 10;
    private int coinLose_;
    public int CoinLose {
      get { return coinLose_; }
      set { coinLose_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pvpGradeFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[3], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[5], Name);
      }
      if (Plate != 0) {
        output.WriteInt32(3, field_names[6], Plate);
      }
      if (PromotePoint != 0) {
        output.WriteInt32(4, field_names[7], PromotePoint);
      }
      if (DepromotePoint != 0) {
        output.WriteInt32(5, field_names[2], DepromotePoint);
      }
      if (hasReward) {
        output.WriteMessage(6, field_names[8], Reward);
      }
      if (RewardDesc != "") {
        output.WriteString(7, field_names[9], RewardDesc);
      }
      if (MatchingUp != 0) {
        output.WriteInt32(8, field_names[4], MatchingUp);
      }
      if (CoinWin != 0) {
        output.WriteInt32(9, field_names[1], CoinWin);
      }
      if (CoinLose != 0) {
        output.WriteInt32(10, field_names[0], CoinLose);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Plate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Plate);
      }
      if (PromotePoint != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, PromotePoint);
      }
      if (DepromotePoint != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, DepromotePoint);
      }
      if (hasReward) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Reward);
      }
      if (RewardDesc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, RewardDesc);
      }
      if (MatchingUp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, MatchingUp);
      }
      if (CoinWin != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, CoinWin);
      }
      if (CoinLose != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, CoinLose);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PvpGrade ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpGrade ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpGrade ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpGrade ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpGrade ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpGrade ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpGrade ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpGrade ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpGrade ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpGrade ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpGrade MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpGrade prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpGrade, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpGrade cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PvpGrade result;

      private PvpGrade PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpGrade original = result;
          result = new PvpGrade();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PvpGrade MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PvpGrade.Descriptor; }
      }

      public override PvpGrade DefaultInstanceForType {
        get { return global::Master.PvpGrade.DefaultInstance; }
      }

      public override PvpGrade BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpGrade) {
          return MergeFrom((PvpGrade) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PvpGrade other) {
        if (other == global::Master.PvpGrade.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Plate != 0) {
          Plate = other.Plate;
        }
        if (other.PromotePoint != 0) {
          PromotePoint = other.PromotePoint;
        }
        if (other.DepromotePoint != 0) {
          DepromotePoint = other.DepromotePoint;
        }
        if (other.HasReward) {
          MergeReward(other.Reward);
        }
        if (other.RewardDesc != "") {
          RewardDesc = other.RewardDesc;
        }
        if (other.MatchingUp != 0) {
          MatchingUp = other.MatchingUp;
        }
        if (other.CoinWin != 0) {
          CoinWin = other.CoinWin;
        }
        if (other.CoinLose != 0) {
          CoinLose = other.CoinLose;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpGradeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpGradeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.plate_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.promotePoint_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.depromotePoint_);
              break;
            }
            case 50: {
              global::Master.PresentCommand.Builder subBuilder = global::Master.PresentCommand.CreateBuilder();
              if (result.hasReward) {
                subBuilder.MergeFrom(Reward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Reward = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              input.ReadString(ref result.rewardDesc_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.matchingUp_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.coinWin_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.coinLose_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int Plate {
        get { return result.Plate; }
        set { SetPlate(value); }
      }
      public Builder SetPlate(int value) {
        PrepareBuilder();
        result.plate_ = value;
        return this;
      }
      public Builder ClearPlate() {
        PrepareBuilder();
        result.plate_ = 0;
        return this;
      }

      public int PromotePoint {
        get { return result.PromotePoint; }
        set { SetPromotePoint(value); }
      }
      public Builder SetPromotePoint(int value) {
        PrepareBuilder();
        result.promotePoint_ = value;
        return this;
      }
      public Builder ClearPromotePoint() {
        PrepareBuilder();
        result.promotePoint_ = 0;
        return this;
      }

      public int DepromotePoint {
        get { return result.DepromotePoint; }
        set { SetDepromotePoint(value); }
      }
      public Builder SetDepromotePoint(int value) {
        PrepareBuilder();
        result.depromotePoint_ = value;
        return this;
      }
      public Builder ClearDepromotePoint() {
        PrepareBuilder();
        result.depromotePoint_ = 0;
        return this;
      }

      public bool HasReward {
       get { return result.hasReward; }
      }
      public global::Master.PresentCommand Reward {
        get { return result.Reward; }
        set { SetReward(value); }
      }
      public Builder SetReward(global::Master.PresentCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = value;
        return this;
      }
      public Builder SetReward(global::Master.PresentCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReward(global::Master.PresentCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReward &&
            result.reward_ != global::Master.PresentCommand.DefaultInstance) {
            result.reward_ = global::Master.PresentCommand.CreateBuilder(result.reward_).MergeFrom(value).BuildPartial();
        } else {
          result.reward_ = value;
        }
        result.hasReward = true;
        return this;
      }
      public Builder ClearReward() {
        PrepareBuilder();
        result.hasReward = false;
        result.reward_ = null;
        return this;
      }

      public string RewardDesc {
        get { return result.RewardDesc; }
        set { SetRewardDesc(value); }
      }
      public Builder SetRewardDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardDesc_ = value;
        return this;
      }
      public Builder ClearRewardDesc() {
        PrepareBuilder();
        result.rewardDesc_ = "";
        return this;
      }

      public int MatchingUp {
        get { return result.MatchingUp; }
        set { SetMatchingUp(value); }
      }
      public Builder SetMatchingUp(int value) {
        PrepareBuilder();
        result.matchingUp_ = value;
        return this;
      }
      public Builder ClearMatchingUp() {
        PrepareBuilder();
        result.matchingUp_ = 0;
        return this;
      }

      public int CoinWin {
        get { return result.CoinWin; }
        set { SetCoinWin(value); }
      }
      public Builder SetCoinWin(int value) {
        PrepareBuilder();
        result.coinWin_ = value;
        return this;
      }
      public Builder ClearCoinWin() {
        PrepareBuilder();
        result.coinWin_ = 0;
        return this;
      }

      public int CoinLose {
        get { return result.CoinLose; }
        set { SetCoinLose(value); }
      }
      public Builder SetCoinLose(int value) {
        PrepareBuilder();
        result.coinLose_ = value;
        return this;
      }
      public Builder ClearCoinLose() {
        PrepareBuilder();
        result.coinLose_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpUnificationRule : pb::GeneratedMessage<PvpUnificationRule, PvpUnificationRule.Builder> {
    public PvpUnificationRule() { }
    private static readonly PvpUnificationRule defaultInstance = new PvpUnificationRule().MakeReadOnly();
    private static readonly string[] _pvpUnificationRuleFieldNames = new string[] { "anywhere", "cond", "effect", "id", "name", "override_id", "pvp_soul_no" };
    private static readonly uint[] _pvpUnificationRuleFieldTags = new uint[] { 56, 26, 42, 8, 18, 48, 32 };
    public static PvpUnificationRule DefaultInstance {
      get { return defaultInstance; }
    }

    public override PvpUnificationRule DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override PvpUnificationRule ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_PvpUnificationRule__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<PvpUnificationRule, PvpUnificationRule.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_PvpUnificationRule__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int CondFieldNumber = 3;
    private string cond_ = "";
    public string Cond {
      get { return cond_; }
      set { cond_ = value; }
    }

    public const int PvpSoulNoFieldNumber = 4;
    private int pvpSoulNo_;
    public int PvpSoulNo {
      get { return pvpSoulNo_; }
      set { pvpSoulNo_ = value; }
    }

    public const int EffectFieldNumber = 5;
    private string effect_ = "";
    public string Effect {
      get { return effect_; }
      set { effect_ = value; }
    }

    public const int OverrideIdFieldNumber = 6;
    private int overrideId_;
    public int OverrideId {
      get { return overrideId_; }
      set { overrideId_ = value; }
    }

    public const int AnywhereFieldNumber = 7;
    private bool anywhere_;
    public bool Anywhere {
      get { return anywhere_; }
      set { anywhere_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pvpUnificationRuleFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[3], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[4], Name);
      }
      if (Cond != "") {
        output.WriteString(3, field_names[1], Cond);
      }
      if (PvpSoulNo != 0) {
        output.WriteInt32(4, field_names[6], PvpSoulNo);
      }
      if (Effect != "") {
        output.WriteString(5, field_names[2], Effect);
      }
      if (OverrideId != 0) {
        output.WriteInt32(6, field_names[5], OverrideId);
      }
      if (Anywhere != false) {
        output.WriteBool(7, field_names[0], Anywhere);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Cond != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Cond);
      }
      if (PvpSoulNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, PvpSoulNo);
      }
      if (Effect != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Effect);
      }
      if (OverrideId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, OverrideId);
      }
      if (Anywhere != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, Anywhere);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PvpUnificationRule ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpUnificationRule ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpUnificationRule ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpUnificationRule ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpUnificationRule MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpUnificationRule prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpUnificationRule, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpUnificationRule cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private PvpUnificationRule result;

      private PvpUnificationRule PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpUnificationRule original = result;
          result = new PvpUnificationRule();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override PvpUnificationRule MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.PvpUnificationRule.Descriptor; }
      }

      public override PvpUnificationRule DefaultInstanceForType {
        get { return global::Master.PvpUnificationRule.DefaultInstance; }
      }

      public override PvpUnificationRule BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpUnificationRule) {
          return MergeFrom((PvpUnificationRule) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(PvpUnificationRule other) {
        if (other == global::Master.PvpUnificationRule.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Cond != "") {
          Cond = other.Cond;
        }
        if (other.PvpSoulNo != 0) {
          PvpSoulNo = other.PvpSoulNo;
        }
        if (other.Effect != "") {
          Effect = other.Effect;
        }
        if (other.OverrideId != 0) {
          OverrideId = other.OverrideId;
        }
        if (other.Anywhere != false) {
          Anywhere = other.Anywhere;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpUnificationRuleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpUnificationRuleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.cond_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.pvpSoulNo_);
              break;
            }
            case 42: {
              input.ReadString(ref result.effect_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.overrideId_);
              break;
            }
            case 56: {
              input.ReadBool(ref result.anywhere_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Cond {
        get { return result.Cond; }
        set { SetCond(value); }
      }
      public Builder SetCond(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cond_ = value;
        return this;
      }
      public Builder ClearCond() {
        PrepareBuilder();
        result.cond_ = "";
        return this;
      }

      public int PvpSoulNo {
        get { return result.PvpSoulNo; }
        set { SetPvpSoulNo(value); }
      }
      public Builder SetPvpSoulNo(int value) {
        PrepareBuilder();
        result.pvpSoulNo_ = value;
        return this;
      }
      public Builder ClearPvpSoulNo() {
        PrepareBuilder();
        result.pvpSoulNo_ = 0;
        return this;
      }

      public string Effect {
        get { return result.Effect; }
        set { SetEffect(value); }
      }
      public Builder SetEffect(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effect_ = value;
        return this;
      }
      public Builder ClearEffect() {
        PrepareBuilder();
        result.effect_ = "";
        return this;
      }

      public int OverrideId {
        get { return result.OverrideId; }
        set { SetOverrideId(value); }
      }
      public Builder SetOverrideId(int value) {
        PrepareBuilder();
        result.overrideId_ = value;
        return this;
      }
      public Builder ClearOverrideId() {
        PrepareBuilder();
        result.overrideId_ = 0;
        return this;
      }

      public bool Anywhere {
        get { return result.Anywhere; }
        set { SetAnywhere(value); }
      }
      public Builder SetAnywhere(bool value) {
        PrepareBuilder();
        result.anywhere_ = value;
        return this;
      }
      public Builder ClearAnywhere() {
        PrepareBuilder();
        result.anywhere_ = false;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QuestTemplate : pb::GeneratedMessage<QuestTemplate, QuestTemplate.Builder> {
    public QuestTemplate() { }
    private static readonly QuestTemplate defaultInstance = new QuestTemplate().MakeReadOnly();
    private static readonly string[] _questTemplateFieldNames = new string[] { "cond_num", "cond_stat", "desc", "effect", "id", "jump_anytime", "kind", "override_url", "require_id", "reward", "title" };
    private static readonly uint[] _questTemplateFieldTags = new uint[] { 48, 42, 34, 64, 8, 80, 18, 74, 56, 90, 26 };
    public static QuestTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override QuestTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override QuestTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_QuestTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<QuestTemplate, QuestTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_QuestTemplate__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int KindFieldNumber = 2;
    private string kind_ = "";
    public string Kind {
      get { return kind_; }
      set { kind_ = value; }
    }

    public const int TitleFieldNumber = 3;
    private string title_ = "";
    public string Title {
      get { return title_; }
      set { title_ = value; }
    }

    public const int DescFieldNumber = 4;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int CondStatFieldNumber = 5;
    private string condStat_ = "";
    public string CondStat {
      get { return condStat_; }
      set { condStat_ = value; }
    }

    public const int CondNumFieldNumber = 6;
    private int condNum_;
    public int CondNum {
      get { return condNum_; }
      set { condNum_ = value; }
    }

    public const int RequireIdFieldNumber = 7;
    private int requireId_;
    public int RequireId {
      get { return requireId_; }
      set { requireId_ = value; }
    }

    public const int EffectFieldNumber = 8;
    private int effect_;
    public int Effect {
      get { return effect_; }
      set { effect_ = value; }
    }

    public const int OverrideUrlFieldNumber = 9;
    private string overrideUrl_ = "";
    public string OverrideUrl {
      get { return overrideUrl_; }
      set { overrideUrl_ = value; }
    }

    public const int JumpAnytimeFieldNumber = 10;
    private bool jumpAnytime_;
    public bool JumpAnytime {
      get { return jumpAnytime_; }
      set { jumpAnytime_ = value; }
    }

    public const int RewardFieldNumber = 11;
    private bool hasReward;
    private global::Master.PresentCommand reward_;
    public bool HasReward {
      get { return hasReward; }
    }
    public global::Master.PresentCommand Reward {
      get { return reward_ ?? global::Master.PresentCommand.DefaultInstance; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _questTemplateFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[4], Id);
      }
      if (Kind != "") {
        output.WriteString(2, field_names[6], Kind);
      }
      if (Title != "") {
        output.WriteString(3, field_names[10], Title);
      }
      if (Desc != "") {
        output.WriteString(4, field_names[2], Desc);
      }
      if (CondStat != "") {
        output.WriteString(5, field_names[1], CondStat);
      }
      if (CondNum != 0) {
        output.WriteInt32(6, field_names[0], CondNum);
      }
      if (RequireId != 0) {
        output.WriteInt32(7, field_names[8], RequireId);
      }
      if (Effect != 0) {
        output.WriteInt32(8, field_names[3], Effect);
      }
      if (OverrideUrl != "") {
        output.WriteString(9, field_names[7], OverrideUrl);
      }
      if (JumpAnytime != false) {
        output.WriteBool(10, field_names[5], JumpAnytime);
      }
      if (hasReward) {
        output.WriteMessage(11, field_names[9], Reward);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Kind != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Kind);
      }
      if (Title != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Title);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Desc);
      }
      if (CondStat != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, CondStat);
      }
      if (CondNum != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, CondNum);
      }
      if (RequireId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, RequireId);
      }
      if (Effect != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Effect);
      }
      if (OverrideUrl != "") {
        size += pb::CodedOutputStream.ComputeStringSize(9, OverrideUrl);
      }
      if (JumpAnytime != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, JumpAnytime);
      }
      if (hasReward) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, Reward);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static QuestTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestTemplate MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private QuestTemplate result;

      private QuestTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestTemplate original = result;
          result = new QuestTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override QuestTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.QuestTemplate.Descriptor; }
      }

      public override QuestTemplate DefaultInstanceForType {
        get { return global::Master.QuestTemplate.DefaultInstance; }
      }

      public override QuestTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestTemplate) {
          return MergeFrom((QuestTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(QuestTemplate other) {
        if (other == global::Master.QuestTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Kind != "") {
          Kind = other.Kind;
        }
        if (other.Title != "") {
          Title = other.Title;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.CondStat != "") {
          CondStat = other.CondStat;
        }
        if (other.CondNum != 0) {
          CondNum = other.CondNum;
        }
        if (other.RequireId != 0) {
          RequireId = other.RequireId;
        }
        if (other.Effect != 0) {
          Effect = other.Effect;
        }
        if (other.OverrideUrl != "") {
          OverrideUrl = other.OverrideUrl;
        }
        if (other.JumpAnytime != false) {
          JumpAnytime = other.JumpAnytime;
        }
        if (other.HasReward) {
          MergeReward(other.Reward);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.kind_);
              break;
            }
            case 26: {
              input.ReadString(ref result.title_);
              break;
            }
            case 34: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 42: {
              input.ReadString(ref result.condStat_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.condNum_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.requireId_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.effect_);
              break;
            }
            case 74: {
              input.ReadString(ref result.overrideUrl_);
              break;
            }
            case 80: {
              input.ReadBool(ref result.jumpAnytime_);
              break;
            }
            case 90: {
              global::Master.PresentCommand.Builder subBuilder = global::Master.PresentCommand.CreateBuilder();
              if (result.hasReward) {
                subBuilder.MergeFrom(Reward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Reward = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        PrepareBuilder();
        result.kind_ = "";
        return this;
      }

      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.title_ = "";
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string CondStat {
        get { return result.CondStat; }
        set { SetCondStat(value); }
      }
      public Builder SetCondStat(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.condStat_ = value;
        return this;
      }
      public Builder ClearCondStat() {
        PrepareBuilder();
        result.condStat_ = "";
        return this;
      }

      public int CondNum {
        get { return result.CondNum; }
        set { SetCondNum(value); }
      }
      public Builder SetCondNum(int value) {
        PrepareBuilder();
        result.condNum_ = value;
        return this;
      }
      public Builder ClearCondNum() {
        PrepareBuilder();
        result.condNum_ = 0;
        return this;
      }

      public int RequireId {
        get { return result.RequireId; }
        set { SetRequireId(value); }
      }
      public Builder SetRequireId(int value) {
        PrepareBuilder();
        result.requireId_ = value;
        return this;
      }
      public Builder ClearRequireId() {
        PrepareBuilder();
        result.requireId_ = 0;
        return this;
      }

      public int Effect {
        get { return result.Effect; }
        set { SetEffect(value); }
      }
      public Builder SetEffect(int value) {
        PrepareBuilder();
        result.effect_ = value;
        return this;
      }
      public Builder ClearEffect() {
        PrepareBuilder();
        result.effect_ = 0;
        return this;
      }

      public string OverrideUrl {
        get { return result.OverrideUrl; }
        set { SetOverrideUrl(value); }
      }
      public Builder SetOverrideUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.overrideUrl_ = value;
        return this;
      }
      public Builder ClearOverrideUrl() {
        PrepareBuilder();
        result.overrideUrl_ = "";
        return this;
      }

      public bool JumpAnytime {
        get { return result.JumpAnytime; }
        set { SetJumpAnytime(value); }
      }
      public Builder SetJumpAnytime(bool value) {
        PrepareBuilder();
        result.jumpAnytime_ = value;
        return this;
      }
      public Builder ClearJumpAnytime() {
        PrepareBuilder();
        result.jumpAnytime_ = false;
        return this;
      }

      public bool HasReward {
       get { return result.hasReward; }
      }
      public global::Master.PresentCommand Reward {
        get { return result.Reward; }
        set { SetReward(value); }
      }
      public Builder SetReward(global::Master.PresentCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = value;
        return this;
      }
      public Builder SetReward(global::Master.PresentCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReward(global::Master.PresentCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReward &&
            result.reward_ != global::Master.PresentCommand.DefaultInstance) {
            result.reward_ = global::Master.PresentCommand.CreateBuilder(result.reward_).MergeFrom(value).BuildPartial();
        } else {
          result.reward_ = value;
        }
        result.hasReward = true;
        return this;
      }
      public Builder ClearReward() {
        PrepareBuilder();
        result.hasReward = false;
        result.reward_ = null;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserStatTemplate : pb::GeneratedMessage<UserStatTemplate, UserStatTemplate.Builder> {
    public UserStatTemplate() { }
    private static readonly UserStatTemplate defaultInstance = new UserStatTemplate().MakeReadOnly();
    private static readonly string[] _userStatTemplateFieldNames = new string[] { "desc", "id", "name", "url" };
    private static readonly uint[] _userStatTemplateFieldTags = new uint[] { 26, 8, 18, 34 };
    public static UserStatTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override UserStatTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override UserStatTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_UserStatTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<UserStatTemplate, UserStatTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_UserStatTemplate__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int DescFieldNumber = 3;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int UrlFieldNumber = 4;
    private string url_ = "";
    public string Url {
      get { return url_; }
      set { url_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userStatTemplateFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[2], Name);
      }
      if (Desc != "") {
        output.WriteString(3, field_names[0], Desc);
      }
      if (Url != "") {
        output.WriteString(4, field_names[3], Url);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
      }
      if (Url != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Url);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserStatTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserStatTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserStatTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStatTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserStatTemplate MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserStatTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UserStatTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserStatTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private UserStatTemplate result;

      private UserStatTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          UserStatTemplate original = result;
          result = new UserStatTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override UserStatTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.UserStatTemplate.Descriptor; }
      }

      public override UserStatTemplate DefaultInstanceForType {
        get { return global::Master.UserStatTemplate.DefaultInstance; }
      }

      public override UserStatTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserStatTemplate) {
          return MergeFrom((UserStatTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(UserStatTemplate other) {
        if (other == global::Master.UserStatTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.Url != "") {
          Url = other.Url;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userStatTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userStatTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 34: {
              input.ReadString(ref result.url_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.url_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginSheet : pb::GeneratedMessage<LoginSheet, LoginSheet.Builder> {
    public LoginSheet() { }
    private static readonly LoginSheet defaultInstance = new LoginSheet().MakeReadOnly();
    private static readonly string[] _loginSheetFieldNames = new string[] { "disabled_at", "id", "name", "order" };
    private static readonly uint[] _loginSheetFieldTags = new uint[] { 34, 10, 18, 24 };
    public static LoginSheet DefaultInstance {
      get { return defaultInstance; }
    }

    public override LoginSheet DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override LoginSheet ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_LoginSheet__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<LoginSheet, LoginSheet.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_LoginSheet__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int OrderFieldNumber = 3;
    private int order_;
    public int Order {
      get { return order_; }
      set { order_ = value; }
    }

    public const int DisabledAtFieldNumber = 4;
    private string disabledAt_ = "";
    public string DisabledAt {
      get { return disabledAt_; }
      set { disabledAt_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginSheetFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[1], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[2], Name);
      }
      if (Order != 0) {
        output.WriteInt32(3, field_names[3], Order);
      }
      if (DisabledAt != "") {
        output.WriteString(4, field_names[0], DisabledAt);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Order != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Order);
      }
      if (DisabledAt != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, DisabledAt);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginSheet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginSheet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginSheet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginSheet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginSheet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginSheet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginSheet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginSheet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginSheet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginSheet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginSheet MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginSheet prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginSheet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginSheet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private LoginSheet result;

      private LoginSheet PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginSheet original = result;
          result = new LoginSheet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override LoginSheet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.LoginSheet.Descriptor; }
      }

      public override LoginSheet DefaultInstanceForType {
        get { return global::Master.LoginSheet.DefaultInstance; }
      }

      public override LoginSheet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginSheet) {
          return MergeFrom((LoginSheet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(LoginSheet other) {
        if (other == global::Master.LoginSheet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Order != 0) {
          Order = other.Order;
        }
        if (other.DisabledAt != "") {
          DisabledAt = other.DisabledAt;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginSheetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginSheetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.order_);
              break;
            }
            case 34: {
              input.ReadString(ref result.disabledAt_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int Order {
        get { return result.Order; }
        set { SetOrder(value); }
      }
      public Builder SetOrder(int value) {
        PrepareBuilder();
        result.order_ = value;
        return this;
      }
      public Builder ClearOrder() {
        PrepareBuilder();
        result.order_ = 0;
        return this;
      }

      public string DisabledAt {
        get { return result.DisabledAt; }
        set { SetDisabledAt(value); }
      }
      public Builder SetDisabledAt(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.disabledAt_ = value;
        return this;
      }
      public Builder ClearDisabledAt() {
        PrepareBuilder();
        result.disabledAt_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginBonus : pb::GeneratedMessage<LoginBonus, LoginBonus.Builder> {
    public LoginBonus() { }
    private static readonly LoginBonus defaultInstance = new LoginBonus().MakeReadOnly();
    private static readonly string[] _loginBonusFieldNames = new string[] { "action", "id", "message_", "sheet_id" };
    private static readonly uint[] _loginBonusFieldTags = new uint[] { 34, 8, 26, 18 };
    public static LoginBonus DefaultInstance {
      get { return defaultInstance; }
    }

    public override LoginBonus DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override LoginBonus ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_LoginBonus__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<LoginBonus, LoginBonus.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_LoginBonus__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int SheetIdFieldNumber = 2;
    private string sheetId_ = "";
    public string SheetId {
      get { return sheetId_; }
      set { sheetId_ = value; }
    }

    public const int MessageFieldNumber = 3;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set { message_ = value; }
    }

    public const int ActionFieldNumber = 4;
    private bool hasAction;
    private global::Master.PresentCommand action_;
    public bool HasAction {
      get { return hasAction; }
    }
    public global::Master.PresentCommand Action {
      get { return action_ ?? global::Master.PresentCommand.DefaultInstance; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginBonusFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (SheetId != "") {
        output.WriteString(2, field_names[3], SheetId);
      }
      if (Message != "") {
        output.WriteString(3, field_names[2], Message);
      }
      if (hasAction) {
        output.WriteMessage(4, field_names[0], Action);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (SheetId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, SheetId);
      }
      if (Message != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Message);
      }
      if (hasAction) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Action);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginBonus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginBonus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginBonus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginBonus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginBonus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginBonus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginBonus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginBonus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginBonus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginBonus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginBonus MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginBonus prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginBonus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginBonus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private LoginBonus result;

      private LoginBonus PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginBonus original = result;
          result = new LoginBonus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override LoginBonus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.LoginBonus.Descriptor; }
      }

      public override LoginBonus DefaultInstanceForType {
        get { return global::Master.LoginBonus.DefaultInstance; }
      }

      public override LoginBonus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginBonus) {
          return MergeFrom((LoginBonus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(LoginBonus other) {
        if (other == global::Master.LoginBonus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.SheetId != "") {
          SheetId = other.SheetId;
        }
        if (other.Message != "") {
          Message = other.Message;
        }
        if (other.HasAction) {
          MergeAction(other.Action);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginBonusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginBonusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.sheetId_);
              break;
            }
            case 26: {
              input.ReadString(ref result.message_);
              break;
            }
            case 34: {
              global::Master.PresentCommand.Builder subBuilder = global::Master.PresentCommand.CreateBuilder();
              if (result.hasAction) {
                subBuilder.MergeFrom(Action);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Action = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string SheetId {
        get { return result.SheetId; }
        set { SetSheetId(value); }
      }
      public Builder SetSheetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sheetId_ = value;
        return this;
      }
      public Builder ClearSheetId() {
        PrepareBuilder();
        result.sheetId_ = "";
        return this;
      }

      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.message_ = "";
        return this;
      }

      public bool HasAction {
       get { return result.hasAction; }
      }
      public global::Master.PresentCommand Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(global::Master.PresentCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder SetAction(global::Master.PresentCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAction(global::Master.PresentCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAction &&
            result.action_ != global::Master.PresentCommand.DefaultInstance) {
            result.action_ = global::Master.PresentCommand.CreateBuilder(result.action_).MergeFrom(value).BuildPartial();
        } else {
          result.action_ = value;
        }
        result.hasAction = true;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.hasAction = false;
        result.action_ = null;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpecialCutinOption : pb::GeneratedMessage<SpecialCutinOption, SpecialCutinOption.Builder> {
    public SpecialCutinOption() { }
    private static readonly SpecialCutinOption defaultInstance = new SpecialCutinOption().MakeReadOnly();
    private static readonly string[] _specialCutinOptionFieldNames = new string[] { "id", "message", "move_to", "next_url", "option_str", "pose", "title" };
    private static readonly uint[] _specialCutinOptionFieldTags = new uint[] { 10, 26, 34, 50, 58, 40, 18 };
    public static SpecialCutinOption DefaultInstance {
      get { return defaultInstance; }
    }

    public override SpecialCutinOption DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override SpecialCutinOption ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_SpecialCutinOption__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SpecialCutinOption, SpecialCutinOption.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_SpecialCutinOption__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int TitleFieldNumber = 2;
    private string title_ = "";
    public string Title {
      get { return title_; }
      set { title_ = value; }
    }

    public const int MessageFieldNumber = 3;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set { message_ = value; }
    }

    public const int MoveToFieldNumber = 4;
    private string moveTo_ = "";
    public string MoveTo {
      get { return moveTo_; }
      set { moveTo_ = value; }
    }

    public const int PoseFieldNumber = 5;
    private int pose_;
    public int Pose {
      get { return pose_; }
      set { pose_ = value; }
    }

    public const int NextUrlFieldNumber = 6;
    private string nextUrl_ = "";
    public string NextUrl {
      get { return nextUrl_; }
      set { nextUrl_ = value; }
    }

    public const int OptionStrFieldNumber = 7;
    private string optionStr_ = "";
    public string OptionStr {
      get { return optionStr_; }
      set { optionStr_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _specialCutinOptionFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[0], Id);
      }
      if (Title != "") {
        output.WriteString(2, field_names[6], Title);
      }
      if (Message != "") {
        output.WriteString(3, field_names[1], Message);
      }
      if (MoveTo != "") {
        output.WriteString(4, field_names[2], MoveTo);
      }
      if (Pose != 0) {
        output.WriteInt32(5, field_names[5], Pose);
      }
      if (NextUrl != "") {
        output.WriteString(6, field_names[3], NextUrl);
      }
      if (OptionStr != "") {
        output.WriteString(7, field_names[4], OptionStr);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Title != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      if (Message != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Message);
      }
      if (MoveTo != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, MoveTo);
      }
      if (Pose != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Pose);
      }
      if (NextUrl != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, NextUrl);
      }
      if (OptionStr != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, OptionStr);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SpecialCutinOption ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SpecialCutinOption ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SpecialCutinOption ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SpecialCutinOption ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SpecialCutinOption MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SpecialCutinOption prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SpecialCutinOption, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SpecialCutinOption cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private SpecialCutinOption result;

      private SpecialCutinOption PrepareBuilder() {
        if (resultIsReadOnly) {
          SpecialCutinOption original = result;
          result = new SpecialCutinOption();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override SpecialCutinOption MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.SpecialCutinOption.Descriptor; }
      }

      public override SpecialCutinOption DefaultInstanceForType {
        get { return global::Master.SpecialCutinOption.DefaultInstance; }
      }

      public override SpecialCutinOption BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SpecialCutinOption) {
          return MergeFrom((SpecialCutinOption) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(SpecialCutinOption other) {
        if (other == global::Master.SpecialCutinOption.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Title != "") {
          Title = other.Title;
        }
        if (other.Message != "") {
          Message = other.Message;
        }
        if (other.MoveTo != "") {
          MoveTo = other.MoveTo;
        }
        if (other.Pose != 0) {
          Pose = other.Pose;
        }
        if (other.NextUrl != "") {
          NextUrl = other.NextUrl;
        }
        if (other.OptionStr != "") {
          OptionStr = other.OptionStr;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_specialCutinOptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _specialCutinOptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.title_);
              break;
            }
            case 26: {
              input.ReadString(ref result.message_);
              break;
            }
            case 34: {
              input.ReadString(ref result.moveTo_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.pose_);
              break;
            }
            case 50: {
              input.ReadString(ref result.nextUrl_);
              break;
            }
            case 58: {
              input.ReadString(ref result.optionStr_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.title_ = "";
        return this;
      }

      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.message_ = "";
        return this;
      }

      public string MoveTo {
        get { return result.MoveTo; }
        set { SetMoveTo(value); }
      }
      public Builder SetMoveTo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.moveTo_ = value;
        return this;
      }
      public Builder ClearMoveTo() {
        PrepareBuilder();
        result.moveTo_ = "";
        return this;
      }

      public int Pose {
        get { return result.Pose; }
        set { SetPose(value); }
      }
      public Builder SetPose(int value) {
        PrepareBuilder();
        result.pose_ = value;
        return this;
      }
      public Builder ClearPose() {
        PrepareBuilder();
        result.pose_ = 0;
        return this;
      }

      public string NextUrl {
        get { return result.NextUrl; }
        set { SetNextUrl(value); }
      }
      public Builder SetNextUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nextUrl_ = value;
        return this;
      }
      public Builder ClearNextUrl() {
        PrepareBuilder();
        result.nextUrl_ = "";
        return this;
      }

      public string OptionStr {
        get { return result.OptionStr; }
        set { SetOptionStr(value); }
      }
      public Builder SetOptionStr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.optionStr_ = value;
        return this;
      }
      public Builder ClearOptionStr() {
        PrepareBuilder();
        result.optionStr_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SoundList : pb::GeneratedMessage<SoundList, SoundList.Builder> {
    public SoundList() { }
    private static readonly SoundList defaultInstance = new SoundList().MakeReadOnly();
    private static readonly string[] _soundListFieldNames = new string[] { "destroy_type", "filename", "loop", "name", "overlap_type", "pitch", "preload", "preload_scene_game", "preload_scene_home", "preload_scene_pvp", "preload_scene_result", "preload_scene_title", "volume", "volume_type" };
    private static readonly uint[] _soundListFieldTags = new uint[] { 66, 18, 56, 10, 74, 40, 48, 96, 88, 112, 104, 80, 32, 26 };
    public static SoundList DefaultInstance {
      get { return defaultInstance; }
    }

    public override SoundList DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override SoundList ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_SoundList__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SoundList, SoundList.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_SoundList__FieldAccessorTable; }
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int FilenameFieldNumber = 2;
    private string filename_ = "";
    public string Filename {
      get { return filename_; }
      set { filename_ = value; }
    }

    public const int VolumeTypeFieldNumber = 3;
    private string volumeType_ = "";
    public string VolumeType {
      get { return volumeType_; }
      set { volumeType_ = value; }
    }

    public const int VolumeFieldNumber = 4;
    private int volume_;
    public int Volume {
      get { return volume_; }
      set { volume_ = value; }
    }

    public const int PitchFieldNumber = 5;
    private int pitch_;
    public int Pitch {
      get { return pitch_; }
      set { pitch_ = value; }
    }

    public const int PreloadFieldNumber = 6;
    private bool preload_;
    public bool Preload {
      get { return preload_; }
      set { preload_ = value; }
    }

    public const int LoopFieldNumber = 7;
    private bool loop_;
    public bool Loop {
      get { return loop_; }
      set { loop_ = value; }
    }

    public const int DestroyTypeFieldNumber = 8;
    private string destroyType_ = "";
    public string DestroyType {
      get { return destroyType_; }
      set { destroyType_ = value; }
    }

    public const int OverlapTypeFieldNumber = 9;
    private string overlapType_ = "";
    public string OverlapType {
      get { return overlapType_; }
      set { overlapType_ = value; }
    }

    public const int PreloadSceneTitleFieldNumber = 10;
    private bool preloadSceneTitle_;
    public bool PreloadSceneTitle {
      get { return preloadSceneTitle_; }
      set { preloadSceneTitle_ = value; }
    }

    public const int PreloadSceneHomeFieldNumber = 11;
    private bool preloadSceneHome_;
    public bool PreloadSceneHome {
      get { return preloadSceneHome_; }
      set { preloadSceneHome_ = value; }
    }

    public const int PreloadSceneGameFieldNumber = 12;
    private bool preloadSceneGame_;
    public bool PreloadSceneGame {
      get { return preloadSceneGame_; }
      set { preloadSceneGame_ = value; }
    }

    public const int PreloadSceneResultFieldNumber = 13;
    private bool preloadSceneResult_;
    public bool PreloadSceneResult {
      get { return preloadSceneResult_; }
      set { preloadSceneResult_ = value; }
    }

    public const int PreloadScenePvpFieldNumber = 14;
    private bool preloadScenePvp_;
    public bool PreloadScenePvp {
      get { return preloadScenePvp_; }
      set { preloadScenePvp_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _soundListFieldNames;
      if (Name != "") {
        output.WriteString(1, field_names[3], Name);
      }
      if (Filename != "") {
        output.WriteString(2, field_names[1], Filename);
      }
      if (VolumeType != "") {
        output.WriteString(3, field_names[13], VolumeType);
      }
      if (Volume != 0) {
        output.WriteInt32(4, field_names[12], Volume);
      }
      if (Pitch != 0) {
        output.WriteInt32(5, field_names[5], Pitch);
      }
      if (Preload != false) {
        output.WriteBool(6, field_names[6], Preload);
      }
      if (Loop != false) {
        output.WriteBool(7, field_names[2], Loop);
      }
      if (DestroyType != "") {
        output.WriteString(8, field_names[0], DestroyType);
      }
      if (OverlapType != "") {
        output.WriteString(9, field_names[4], OverlapType);
      }
      if (PreloadSceneTitle != false) {
        output.WriteBool(10, field_names[11], PreloadSceneTitle);
      }
      if (PreloadSceneHome != false) {
        output.WriteBool(11, field_names[8], PreloadSceneHome);
      }
      if (PreloadSceneGame != false) {
        output.WriteBool(12, field_names[7], PreloadSceneGame);
      }
      if (PreloadSceneResult != false) {
        output.WriteBool(13, field_names[10], PreloadSceneResult);
      }
      if (PreloadScenePvp != false) {
        output.WriteBool(14, field_names[9], PreloadScenePvp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (Filename != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Filename);
      }
      if (VolumeType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, VolumeType);
      }
      if (Volume != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Volume);
      }
      if (Pitch != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Pitch);
      }
      if (Preload != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Preload);
      }
      if (Loop != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, Loop);
      }
      if (DestroyType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(8, DestroyType);
      }
      if (OverlapType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(9, OverlapType);
      }
      if (PreloadSceneTitle != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, PreloadSceneTitle);
      }
      if (PreloadSceneHome != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, PreloadSceneHome);
      }
      if (PreloadSceneGame != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, PreloadSceneGame);
      }
      if (PreloadSceneResult != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(13, PreloadSceneResult);
      }
      if (PreloadScenePvp != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, PreloadScenePvp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SoundList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SoundList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SoundList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SoundList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SoundList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SoundList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SoundList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SoundList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SoundList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SoundList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SoundList MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SoundList prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SoundList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SoundList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private SoundList result;

      private SoundList PrepareBuilder() {
        if (resultIsReadOnly) {
          SoundList original = result;
          result = new SoundList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override SoundList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.SoundList.Descriptor; }
      }

      public override SoundList DefaultInstanceForType {
        get { return global::Master.SoundList.DefaultInstance; }
      }

      public override SoundList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SoundList) {
          return MergeFrom((SoundList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(SoundList other) {
        if (other == global::Master.SoundList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Filename != "") {
          Filename = other.Filename;
        }
        if (other.VolumeType != "") {
          VolumeType = other.VolumeType;
        }
        if (other.Volume != 0) {
          Volume = other.Volume;
        }
        if (other.Pitch != 0) {
          Pitch = other.Pitch;
        }
        if (other.Preload != false) {
          Preload = other.Preload;
        }
        if (other.Loop != false) {
          Loop = other.Loop;
        }
        if (other.DestroyType != "") {
          DestroyType = other.DestroyType;
        }
        if (other.OverlapType != "") {
          OverlapType = other.OverlapType;
        }
        if (other.PreloadSceneTitle != false) {
          PreloadSceneTitle = other.PreloadSceneTitle;
        }
        if (other.PreloadSceneHome != false) {
          PreloadSceneHome = other.PreloadSceneHome;
        }
        if (other.PreloadSceneGame != false) {
          PreloadSceneGame = other.PreloadSceneGame;
        }
        if (other.PreloadSceneResult != false) {
          PreloadSceneResult = other.PreloadSceneResult;
        }
        if (other.PreloadScenePvp != false) {
          PreloadScenePvp = other.PreloadScenePvp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_soundListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _soundListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              input.ReadString(ref result.filename_);
              break;
            }
            case 26: {
              input.ReadString(ref result.volumeType_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.volume_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.pitch_);
              break;
            }
            case 48: {
              input.ReadBool(ref result.preload_);
              break;
            }
            case 56: {
              input.ReadBool(ref result.loop_);
              break;
            }
            case 66: {
              input.ReadString(ref result.destroyType_);
              break;
            }
            case 74: {
              input.ReadString(ref result.overlapType_);
              break;
            }
            case 80: {
              input.ReadBool(ref result.preloadSceneTitle_);
              break;
            }
            case 88: {
              input.ReadBool(ref result.preloadSceneHome_);
              break;
            }
            case 96: {
              input.ReadBool(ref result.preloadSceneGame_);
              break;
            }
            case 104: {
              input.ReadBool(ref result.preloadSceneResult_);
              break;
            }
            case 112: {
              input.ReadBool(ref result.preloadScenePvp_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Filename {
        get { return result.Filename; }
        set { SetFilename(value); }
      }
      public Builder SetFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filename_ = value;
        return this;
      }
      public Builder ClearFilename() {
        PrepareBuilder();
        result.filename_ = "";
        return this;
      }

      public string VolumeType {
        get { return result.VolumeType; }
        set { SetVolumeType(value); }
      }
      public Builder SetVolumeType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.volumeType_ = value;
        return this;
      }
      public Builder ClearVolumeType() {
        PrepareBuilder();
        result.volumeType_ = "";
        return this;
      }

      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.volume_ = 0;
        return this;
      }

      public int Pitch {
        get { return result.Pitch; }
        set { SetPitch(value); }
      }
      public Builder SetPitch(int value) {
        PrepareBuilder();
        result.pitch_ = value;
        return this;
      }
      public Builder ClearPitch() {
        PrepareBuilder();
        result.pitch_ = 0;
        return this;
      }

      public bool Preload {
        get { return result.Preload; }
        set { SetPreload(value); }
      }
      public Builder SetPreload(bool value) {
        PrepareBuilder();
        result.preload_ = value;
        return this;
      }
      public Builder ClearPreload() {
        PrepareBuilder();
        result.preload_ = false;
        return this;
      }

      public bool Loop {
        get { return result.Loop; }
        set { SetLoop(value); }
      }
      public Builder SetLoop(bool value) {
        PrepareBuilder();
        result.loop_ = value;
        return this;
      }
      public Builder ClearLoop() {
        PrepareBuilder();
        result.loop_ = false;
        return this;
      }

      public string DestroyType {
        get { return result.DestroyType; }
        set { SetDestroyType(value); }
      }
      public Builder SetDestroyType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.destroyType_ = value;
        return this;
      }
      public Builder ClearDestroyType() {
        PrepareBuilder();
        result.destroyType_ = "";
        return this;
      }

      public string OverlapType {
        get { return result.OverlapType; }
        set { SetOverlapType(value); }
      }
      public Builder SetOverlapType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.overlapType_ = value;
        return this;
      }
      public Builder ClearOverlapType() {
        PrepareBuilder();
        result.overlapType_ = "";
        return this;
      }

      public bool PreloadSceneTitle {
        get { return result.PreloadSceneTitle; }
        set { SetPreloadSceneTitle(value); }
      }
      public Builder SetPreloadSceneTitle(bool value) {
        PrepareBuilder();
        result.preloadSceneTitle_ = value;
        return this;
      }
      public Builder ClearPreloadSceneTitle() {
        PrepareBuilder();
        result.preloadSceneTitle_ = false;
        return this;
      }

      public bool PreloadSceneHome {
        get { return result.PreloadSceneHome; }
        set { SetPreloadSceneHome(value); }
      }
      public Builder SetPreloadSceneHome(bool value) {
        PrepareBuilder();
        result.preloadSceneHome_ = value;
        return this;
      }
      public Builder ClearPreloadSceneHome() {
        PrepareBuilder();
        result.preloadSceneHome_ = false;
        return this;
      }

      public bool PreloadSceneGame {
        get { return result.PreloadSceneGame; }
        set { SetPreloadSceneGame(value); }
      }
      public Builder SetPreloadSceneGame(bool value) {
        PrepareBuilder();
        result.preloadSceneGame_ = value;
        return this;
      }
      public Builder ClearPreloadSceneGame() {
        PrepareBuilder();
        result.preloadSceneGame_ = false;
        return this;
      }

      public bool PreloadSceneResult {
        get { return result.PreloadSceneResult; }
        set { SetPreloadSceneResult(value); }
      }
      public Builder SetPreloadSceneResult(bool value) {
        PrepareBuilder();
        result.preloadSceneResult_ = value;
        return this;
      }
      public Builder ClearPreloadSceneResult() {
        PrepareBuilder();
        result.preloadSceneResult_ = false;
        return this;
      }

      public bool PreloadScenePvp {
        get { return result.PreloadScenePvp; }
        set { SetPreloadScenePvp(value); }
      }
      public Builder SetPreloadScenePvp(bool value) {
        PrepareBuilder();
        result.preloadScenePvp_ = value;
        return this;
      }
      public Builder ClearPreloadScenePvp() {
        PrepareBuilder();
        result.preloadScenePvp_ = false;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Enemy : pb::GeneratedMessage<Enemy, Enemy.Builder> {
    public Enemy() { }
    private static readonly Enemy defaultInstance = new Enemy().MakeReadOnly();
    private static readonly string[] _enemyFieldNames = new string[] { "agility", "attack_additional_tactical_point", "attack_adjust", "attack_count", "attack_dice", "attack_rate", "attack_sound_name", "attribute", "card_id", "critical_damage_rate", "critical_hit_rate", "critical_lots_count", "dead_sound_name", "deepsleep_rate", "defense_adjust", "defense_count", "defense_dice", "defense_sound_name", "driver_param", "drop_fang255", "drop_gold", "drop_item255", "enchant_attack_command", "enchant_attack_name", "enchant_attack_sound_name", "enchant_attack_status_rate", "enchant_defense_command", "enchant_defense_name", "enchant_defense_sound_name", "enchant_defense_status_rate", "experience", "extra_data", "have_item_no", "hit_point", "id", "move_additonal_tactical_point", "move_wait_counter", "name", "prefab_id", "property", "race_type", "skill_attack_command", "skill_attack_name", "skill_attack_rate", "skill_attack_sound_name", "sleep_rate" };
    private static readonly uint[] _enemyFieldTags = new uint[] { 64, 336, 96, 88, 80, 72, 106, 42, 24, 112, 256, 248, 274, 312, 200, 192, 184, 210, 50, 290, 298, 282, 138, 122, 146, 128, 234, 218, 242, 224, 264, 362, 368, 56, 8, 328, 320, 18, 344, 354, 34, 170, 154, 160, 178, 304 };
    public static Enemy DefaultInstance {
      get { return defaultInstance; }
    }

    public override Enemy DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Enemy ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_Enemy__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Enemy, Enemy.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_Enemy__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int CardIdFieldNumber = 3;
    private int cardId_;
    public int CardId {
      get { return cardId_; }
      set { cardId_ = value; }
    }

    public const int RaceTypeFieldNumber = 4;
    private string raceType_ = "";
    public string RaceType {
      get { return raceType_; }
      set { raceType_ = value; }
    }

    public const int AttributeFieldNumber = 5;
    private string attribute_ = "";
    public string Attribute {
      get { return attribute_; }
      set { attribute_ = value; }
    }

    public const int DriverParamFieldNumber = 6;
    private string driverParam_ = "";
    public string DriverParam {
      get { return driverParam_; }
      set { driverParam_ = value; }
    }

    public const int HitPointFieldNumber = 7;
    private int hitPoint_;
    public int HitPoint {
      get { return hitPoint_; }
      set { hitPoint_ = value; }
    }

    public const int AgilityFieldNumber = 8;
    private int agility_;
    public int Agility {
      get { return agility_; }
      set { agility_ = value; }
    }

    public const int AttackRateFieldNumber = 9;
    private int attackRate_;
    public int AttackRate {
      get { return attackRate_; }
      set { attackRate_ = value; }
    }

    public const int AttackDiceFieldNumber = 10;
    private int attackDice_;
    public int AttackDice {
      get { return attackDice_; }
      set { attackDice_ = value; }
    }

    public const int AttackCountFieldNumber = 11;
    private int attackCount_;
    public int AttackCount {
      get { return attackCount_; }
      set { attackCount_ = value; }
    }

    public const int AttackAdjustFieldNumber = 12;
    private int attackAdjust_;
    public int AttackAdjust {
      get { return attackAdjust_; }
      set { attackAdjust_ = value; }
    }

    public const int AttackSoundNameFieldNumber = 13;
    private string attackSoundName_ = "";
    public string AttackSoundName {
      get { return attackSoundName_; }
      set { attackSoundName_ = value; }
    }

    public const int CriticalDamageRateFieldNumber = 14;
    private int criticalDamageRate_;
    public int CriticalDamageRate {
      get { return criticalDamageRate_; }
      set { criticalDamageRate_ = value; }
    }

    public const int EnchantAttackNameFieldNumber = 15;
    private string enchantAttackName_ = "";
    public string EnchantAttackName {
      get { return enchantAttackName_; }
      set { enchantAttackName_ = value; }
    }

    public const int EnchantAttackStatusRateFieldNumber = 16;
    private int enchantAttackStatusRate_;
    public int EnchantAttackStatusRate {
      get { return enchantAttackStatusRate_; }
      set { enchantAttackStatusRate_ = value; }
    }

    public const int EnchantAttackCommandFieldNumber = 17;
    private string enchantAttackCommand_ = "";
    public string EnchantAttackCommand {
      get { return enchantAttackCommand_; }
      set { enchantAttackCommand_ = value; }
    }

    public const int EnchantAttackSoundNameFieldNumber = 18;
    private string enchantAttackSoundName_ = "";
    public string EnchantAttackSoundName {
      get { return enchantAttackSoundName_; }
      set { enchantAttackSoundName_ = value; }
    }

    public const int SkillAttackNameFieldNumber = 19;
    private string skillAttackName_ = "";
    public string SkillAttackName {
      get { return skillAttackName_; }
      set { skillAttackName_ = value; }
    }

    public const int SkillAttackRateFieldNumber = 20;
    private int skillAttackRate_;
    public int SkillAttackRate {
      get { return skillAttackRate_; }
      set { skillAttackRate_ = value; }
    }

    public const int SkillAttackCommandFieldNumber = 21;
    private string skillAttackCommand_ = "";
    public string SkillAttackCommand {
      get { return skillAttackCommand_; }
      set { skillAttackCommand_ = value; }
    }

    public const int SkillAttackSoundNameFieldNumber = 22;
    private string skillAttackSoundName_ = "";
    public string SkillAttackSoundName {
      get { return skillAttackSoundName_; }
      set { skillAttackSoundName_ = value; }
    }

    public const int DefenseDiceFieldNumber = 23;
    private int defenseDice_;
    public int DefenseDice {
      get { return defenseDice_; }
      set { defenseDice_ = value; }
    }

    public const int DefenseCountFieldNumber = 24;
    private int defenseCount_;
    public int DefenseCount {
      get { return defenseCount_; }
      set { defenseCount_ = value; }
    }

    public const int DefenseAdjustFieldNumber = 25;
    private int defenseAdjust_;
    public int DefenseAdjust {
      get { return defenseAdjust_; }
      set { defenseAdjust_ = value; }
    }

    public const int DefenseSoundNameFieldNumber = 26;
    private string defenseSoundName_ = "";
    public string DefenseSoundName {
      get { return defenseSoundName_; }
      set { defenseSoundName_ = value; }
    }

    public const int EnchantDefenseNameFieldNumber = 27;
    private string enchantDefenseName_ = "";
    public string EnchantDefenseName {
      get { return enchantDefenseName_; }
      set { enchantDefenseName_ = value; }
    }

    public const int EnchantDefenseStatusRateFieldNumber = 28;
    private int enchantDefenseStatusRate_;
    public int EnchantDefenseStatusRate {
      get { return enchantDefenseStatusRate_; }
      set { enchantDefenseStatusRate_ = value; }
    }

    public const int EnchantDefenseCommandFieldNumber = 29;
    private string enchantDefenseCommand_ = "";
    public string EnchantDefenseCommand {
      get { return enchantDefenseCommand_; }
      set { enchantDefenseCommand_ = value; }
    }

    public const int EnchantDefenseSoundNameFieldNumber = 30;
    private string enchantDefenseSoundName_ = "";
    public string EnchantDefenseSoundName {
      get { return enchantDefenseSoundName_; }
      set { enchantDefenseSoundName_ = value; }
    }

    public const int CriticalLotsCountFieldNumber = 31;
    private int criticalLotsCount_;
    public int CriticalLotsCount {
      get { return criticalLotsCount_; }
      set { criticalLotsCount_ = value; }
    }

    public const int CriticalHitRateFieldNumber = 32;
    private int criticalHitRate_;
    public int CriticalHitRate {
      get { return criticalHitRate_; }
      set { criticalHitRate_ = value; }
    }

    public const int ExperienceFieldNumber = 33;
    private int experience_;
    public int Experience {
      get { return experience_; }
      set { experience_ = value; }
    }

    public const int DeadSoundNameFieldNumber = 34;
    private string deadSoundName_ = "";
    public string DeadSoundName {
      get { return deadSoundName_; }
      set { deadSoundName_ = value; }
    }

    public const int DropItem255FieldNumber = 35;
    private string dropItem255_ = "";
    public string DropItem255 {
      get { return dropItem255_; }
      set { dropItem255_ = value; }
    }

    public const int DropFang255FieldNumber = 36;
    private string dropFang255_ = "";
    public string DropFang255 {
      get { return dropFang255_; }
      set { dropFang255_ = value; }
    }

    public const int DropGoldFieldNumber = 37;
    private string dropGold_ = "";
    public string DropGold {
      get { return dropGold_; }
      set { dropGold_ = value; }
    }

    public const int SleepRateFieldNumber = 38;
    private int sleepRate_;
    public int SleepRate {
      get { return sleepRate_; }
      set { sleepRate_ = value; }
    }

    public const int DeepsleepRateFieldNumber = 39;
    private int deepsleepRate_;
    public int DeepsleepRate {
      get { return deepsleepRate_; }
      set { deepsleepRate_ = value; }
    }

    public const int MoveWaitCounterFieldNumber = 40;
    private int moveWaitCounter_;
    public int MoveWaitCounter {
      get { return moveWaitCounter_; }
      set { moveWaitCounter_ = value; }
    }

    public const int MoveAdditonalTacticalPointFieldNumber = 41;
    private int moveAdditonalTacticalPoint_;
    public int MoveAdditonalTacticalPoint {
      get { return moveAdditonalTacticalPoint_; }
      set { moveAdditonalTacticalPoint_ = value; }
    }

    public const int AttackAdditionalTacticalPointFieldNumber = 42;
    private int attackAdditionalTacticalPoint_;
    public int AttackAdditionalTacticalPoint {
      get { return attackAdditionalTacticalPoint_; }
      set { attackAdditionalTacticalPoint_ = value; }
    }

    public const int PrefabIdFieldNumber = 43;
    private int prefabId_;
    public int PrefabId {
      get { return prefabId_; }
      set { prefabId_ = value; }
    }

    public const int PropertyFieldNumber = 44;
    private string property_ = "";
    public string Property {
      get { return property_; }
      set { property_ = value; }
    }

    public const int ExtraDataFieldNumber = 45;
    private string extraData_ = "";
    public string ExtraData {
      get { return extraData_; }
      set { extraData_ = value; }
    }

    public const int HaveItemNoFieldNumber = 46;
    private int haveItemNo_;
    public int HaveItemNo {
      get { return haveItemNo_; }
      set { haveItemNo_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _enemyFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[34], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[37], Name);
      }
      if (CardId != 0) {
        output.WriteInt32(3, field_names[8], CardId);
      }
      if (RaceType != "") {
        output.WriteString(4, field_names[40], RaceType);
      }
      if (Attribute != "") {
        output.WriteString(5, field_names[7], Attribute);
      }
      if (DriverParam != "") {
        output.WriteString(6, field_names[18], DriverParam);
      }
      if (HitPoint != 0) {
        output.WriteInt32(7, field_names[33], HitPoint);
      }
      if (Agility != 0) {
        output.WriteInt32(8, field_names[0], Agility);
      }
      if (AttackRate != 0) {
        output.WriteInt32(9, field_names[5], AttackRate);
      }
      if (AttackDice != 0) {
        output.WriteInt32(10, field_names[4], AttackDice);
      }
      if (AttackCount != 0) {
        output.WriteInt32(11, field_names[3], AttackCount);
      }
      if (AttackAdjust != 0) {
        output.WriteInt32(12, field_names[2], AttackAdjust);
      }
      if (AttackSoundName != "") {
        output.WriteString(13, field_names[6], AttackSoundName);
      }
      if (CriticalDamageRate != 0) {
        output.WriteInt32(14, field_names[9], CriticalDamageRate);
      }
      if (EnchantAttackName != "") {
        output.WriteString(15, field_names[23], EnchantAttackName);
      }
      if (EnchantAttackStatusRate != 0) {
        output.WriteInt32(16, field_names[25], EnchantAttackStatusRate);
      }
      if (EnchantAttackCommand != "") {
        output.WriteString(17, field_names[22], EnchantAttackCommand);
      }
      if (EnchantAttackSoundName != "") {
        output.WriteString(18, field_names[24], EnchantAttackSoundName);
      }
      if (SkillAttackName != "") {
        output.WriteString(19, field_names[42], SkillAttackName);
      }
      if (SkillAttackRate != 0) {
        output.WriteInt32(20, field_names[43], SkillAttackRate);
      }
      if (SkillAttackCommand != "") {
        output.WriteString(21, field_names[41], SkillAttackCommand);
      }
      if (SkillAttackSoundName != "") {
        output.WriteString(22, field_names[44], SkillAttackSoundName);
      }
      if (DefenseDice != 0) {
        output.WriteInt32(23, field_names[16], DefenseDice);
      }
      if (DefenseCount != 0) {
        output.WriteInt32(24, field_names[15], DefenseCount);
      }
      if (DefenseAdjust != 0) {
        output.WriteInt32(25, field_names[14], DefenseAdjust);
      }
      if (DefenseSoundName != "") {
        output.WriteString(26, field_names[17], DefenseSoundName);
      }
      if (EnchantDefenseName != "") {
        output.WriteString(27, field_names[27], EnchantDefenseName);
      }
      if (EnchantDefenseStatusRate != 0) {
        output.WriteInt32(28, field_names[29], EnchantDefenseStatusRate);
      }
      if (EnchantDefenseCommand != "") {
        output.WriteString(29, field_names[26], EnchantDefenseCommand);
      }
      if (EnchantDefenseSoundName != "") {
        output.WriteString(30, field_names[28], EnchantDefenseSoundName);
      }
      if (CriticalLotsCount != 0) {
        output.WriteInt32(31, field_names[11], CriticalLotsCount);
      }
      if (CriticalHitRate != 0) {
        output.WriteInt32(32, field_names[10], CriticalHitRate);
      }
      if (Experience != 0) {
        output.WriteInt32(33, field_names[30], Experience);
      }
      if (DeadSoundName != "") {
        output.WriteString(34, field_names[12], DeadSoundName);
      }
      if (DropItem255 != "") {
        output.WriteString(35, field_names[21], DropItem255);
      }
      if (DropFang255 != "") {
        output.WriteString(36, field_names[19], DropFang255);
      }
      if (DropGold != "") {
        output.WriteString(37, field_names[20], DropGold);
      }
      if (SleepRate != 0) {
        output.WriteInt32(38, field_names[45], SleepRate);
      }
      if (DeepsleepRate != 0) {
        output.WriteInt32(39, field_names[13], DeepsleepRate);
      }
      if (MoveWaitCounter != 0) {
        output.WriteInt32(40, field_names[36], MoveWaitCounter);
      }
      if (MoveAdditonalTacticalPoint != 0) {
        output.WriteInt32(41, field_names[35], MoveAdditonalTacticalPoint);
      }
      if (AttackAdditionalTacticalPoint != 0) {
        output.WriteInt32(42, field_names[1], AttackAdditionalTacticalPoint);
      }
      if (PrefabId != 0) {
        output.WriteInt32(43, field_names[38], PrefabId);
      }
      if (Property != "") {
        output.WriteString(44, field_names[39], Property);
      }
      if (ExtraData != "") {
        output.WriteString(45, field_names[31], ExtraData);
      }
      if (HaveItemNo != 0) {
        output.WriteInt32(46, field_names[32], HaveItemNo);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (CardId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, CardId);
      }
      if (RaceType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, RaceType);
      }
      if (Attribute != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Attribute);
      }
      if (DriverParam != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, DriverParam);
      }
      if (HitPoint != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, HitPoint);
      }
      if (Agility != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Agility);
      }
      if (AttackRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, AttackRate);
      }
      if (AttackDice != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, AttackDice);
      }
      if (AttackCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, AttackCount);
      }
      if (AttackAdjust != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, AttackAdjust);
      }
      if (AttackSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(13, AttackSoundName);
      }
      if (CriticalDamageRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, CriticalDamageRate);
      }
      if (EnchantAttackName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(15, EnchantAttackName);
      }
      if (EnchantAttackStatusRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, EnchantAttackStatusRate);
      }
      if (EnchantAttackCommand != "") {
        size += pb::CodedOutputStream.ComputeStringSize(17, EnchantAttackCommand);
      }
      if (EnchantAttackSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(18, EnchantAttackSoundName);
      }
      if (SkillAttackName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(19, SkillAttackName);
      }
      if (SkillAttackRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, SkillAttackRate);
      }
      if (SkillAttackCommand != "") {
        size += pb::CodedOutputStream.ComputeStringSize(21, SkillAttackCommand);
      }
      if (SkillAttackSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(22, SkillAttackSoundName);
      }
      if (DefenseDice != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(23, DefenseDice);
      }
      if (DefenseCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(24, DefenseCount);
      }
      if (DefenseAdjust != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(25, DefenseAdjust);
      }
      if (DefenseSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(26, DefenseSoundName);
      }
      if (EnchantDefenseName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(27, EnchantDefenseName);
      }
      if (EnchantDefenseStatusRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(28, EnchantDefenseStatusRate);
      }
      if (EnchantDefenseCommand != "") {
        size += pb::CodedOutputStream.ComputeStringSize(29, EnchantDefenseCommand);
      }
      if (EnchantDefenseSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(30, EnchantDefenseSoundName);
      }
      if (CriticalLotsCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(31, CriticalLotsCount);
      }
      if (CriticalHitRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(32, CriticalHitRate);
      }
      if (Experience != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(33, Experience);
      }
      if (DeadSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(34, DeadSoundName);
      }
      if (DropItem255 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(35, DropItem255);
      }
      if (DropFang255 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(36, DropFang255);
      }
      if (DropGold != "") {
        size += pb::CodedOutputStream.ComputeStringSize(37, DropGold);
      }
      if (SleepRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(38, SleepRate);
      }
      if (DeepsleepRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(39, DeepsleepRate);
      }
      if (MoveWaitCounter != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(40, MoveWaitCounter);
      }
      if (MoveAdditonalTacticalPoint != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(41, MoveAdditonalTacticalPoint);
      }
      if (AttackAdditionalTacticalPoint != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(42, AttackAdditionalTacticalPoint);
      }
      if (PrefabId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(43, PrefabId);
      }
      if (Property != "") {
        size += pb::CodedOutputStream.ComputeStringSize(44, Property);
      }
      if (ExtraData != "") {
        size += pb::CodedOutputStream.ComputeStringSize(45, ExtraData);
      }
      if (HaveItemNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(46, HaveItemNo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Enemy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Enemy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Enemy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Enemy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Enemy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Enemy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Enemy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Enemy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Enemy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Enemy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Enemy MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Enemy prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Enemy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Enemy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Enemy result;

      private Enemy PrepareBuilder() {
        if (resultIsReadOnly) {
          Enemy original = result;
          result = new Enemy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override Enemy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.Enemy.Descriptor; }
      }

      public override Enemy DefaultInstanceForType {
        get { return global::Master.Enemy.DefaultInstance; }
      }

      public override Enemy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Enemy) {
          return MergeFrom((Enemy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Enemy other) {
        if (other == global::Master.Enemy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.CardId != 0) {
          CardId = other.CardId;
        }
        if (other.RaceType != "") {
          RaceType = other.RaceType;
        }
        if (other.Attribute != "") {
          Attribute = other.Attribute;
        }
        if (other.DriverParam != "") {
          DriverParam = other.DriverParam;
        }
        if (other.HitPoint != 0) {
          HitPoint = other.HitPoint;
        }
        if (other.Agility != 0) {
          Agility = other.Agility;
        }
        if (other.AttackRate != 0) {
          AttackRate = other.AttackRate;
        }
        if (other.AttackDice != 0) {
          AttackDice = other.AttackDice;
        }
        if (other.AttackCount != 0) {
          AttackCount = other.AttackCount;
        }
        if (other.AttackAdjust != 0) {
          AttackAdjust = other.AttackAdjust;
        }
        if (other.AttackSoundName != "") {
          AttackSoundName = other.AttackSoundName;
        }
        if (other.CriticalDamageRate != 0) {
          CriticalDamageRate = other.CriticalDamageRate;
        }
        if (other.EnchantAttackName != "") {
          EnchantAttackName = other.EnchantAttackName;
        }
        if (other.EnchantAttackStatusRate != 0) {
          EnchantAttackStatusRate = other.EnchantAttackStatusRate;
        }
        if (other.EnchantAttackCommand != "") {
          EnchantAttackCommand = other.EnchantAttackCommand;
        }
        if (other.EnchantAttackSoundName != "") {
          EnchantAttackSoundName = other.EnchantAttackSoundName;
        }
        if (other.SkillAttackName != "") {
          SkillAttackName = other.SkillAttackName;
        }
        if (other.SkillAttackRate != 0) {
          SkillAttackRate = other.SkillAttackRate;
        }
        if (other.SkillAttackCommand != "") {
          SkillAttackCommand = other.SkillAttackCommand;
        }
        if (other.SkillAttackSoundName != "") {
          SkillAttackSoundName = other.SkillAttackSoundName;
        }
        if (other.DefenseDice != 0) {
          DefenseDice = other.DefenseDice;
        }
        if (other.DefenseCount != 0) {
          DefenseCount = other.DefenseCount;
        }
        if (other.DefenseAdjust != 0) {
          DefenseAdjust = other.DefenseAdjust;
        }
        if (other.DefenseSoundName != "") {
          DefenseSoundName = other.DefenseSoundName;
        }
        if (other.EnchantDefenseName != "") {
          EnchantDefenseName = other.EnchantDefenseName;
        }
        if (other.EnchantDefenseStatusRate != 0) {
          EnchantDefenseStatusRate = other.EnchantDefenseStatusRate;
        }
        if (other.EnchantDefenseCommand != "") {
          EnchantDefenseCommand = other.EnchantDefenseCommand;
        }
        if (other.EnchantDefenseSoundName != "") {
          EnchantDefenseSoundName = other.EnchantDefenseSoundName;
        }
        if (other.CriticalLotsCount != 0) {
          CriticalLotsCount = other.CriticalLotsCount;
        }
        if (other.CriticalHitRate != 0) {
          CriticalHitRate = other.CriticalHitRate;
        }
        if (other.Experience != 0) {
          Experience = other.Experience;
        }
        if (other.DeadSoundName != "") {
          DeadSoundName = other.DeadSoundName;
        }
        if (other.DropItem255 != "") {
          DropItem255 = other.DropItem255;
        }
        if (other.DropFang255 != "") {
          DropFang255 = other.DropFang255;
        }
        if (other.DropGold != "") {
          DropGold = other.DropGold;
        }
        if (other.SleepRate != 0) {
          SleepRate = other.SleepRate;
        }
        if (other.DeepsleepRate != 0) {
          DeepsleepRate = other.DeepsleepRate;
        }
        if (other.MoveWaitCounter != 0) {
          MoveWaitCounter = other.MoveWaitCounter;
        }
        if (other.MoveAdditonalTacticalPoint != 0) {
          MoveAdditonalTacticalPoint = other.MoveAdditonalTacticalPoint;
        }
        if (other.AttackAdditionalTacticalPoint != 0) {
          AttackAdditionalTacticalPoint = other.AttackAdditionalTacticalPoint;
        }
        if (other.PrefabId != 0) {
          PrefabId = other.PrefabId;
        }
        if (other.Property != "") {
          Property = other.Property;
        }
        if (other.ExtraData != "") {
          ExtraData = other.ExtraData;
        }
        if (other.HaveItemNo != 0) {
          HaveItemNo = other.HaveItemNo;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enemyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enemyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.cardId_);
              break;
            }
            case 34: {
              input.ReadString(ref result.raceType_);
              break;
            }
            case 42: {
              input.ReadString(ref result.attribute_);
              break;
            }
            case 50: {
              input.ReadString(ref result.driverParam_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.hitPoint_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.agility_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.attackRate_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.attackDice_);
              break;
            }
            case 88: {
              input.ReadInt32(ref result.attackCount_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.attackAdjust_);
              break;
            }
            case 106: {
              input.ReadString(ref result.attackSoundName_);
              break;
            }
            case 112: {
              input.ReadInt32(ref result.criticalDamageRate_);
              break;
            }
            case 122: {
              input.ReadString(ref result.enchantAttackName_);
              break;
            }
            case 128: {
              input.ReadInt32(ref result.enchantAttackStatusRate_);
              break;
            }
            case 138: {
              input.ReadString(ref result.enchantAttackCommand_);
              break;
            }
            case 146: {
              input.ReadString(ref result.enchantAttackSoundName_);
              break;
            }
            case 154: {
              input.ReadString(ref result.skillAttackName_);
              break;
            }
            case 160: {
              input.ReadInt32(ref result.skillAttackRate_);
              break;
            }
            case 170: {
              input.ReadString(ref result.skillAttackCommand_);
              break;
            }
            case 178: {
              input.ReadString(ref result.skillAttackSoundName_);
              break;
            }
            case 184: {
              input.ReadInt32(ref result.defenseDice_);
              break;
            }
            case 192: {
              input.ReadInt32(ref result.defenseCount_);
              break;
            }
            case 200: {
              input.ReadInt32(ref result.defenseAdjust_);
              break;
            }
            case 210: {
              input.ReadString(ref result.defenseSoundName_);
              break;
            }
            case 218: {
              input.ReadString(ref result.enchantDefenseName_);
              break;
            }
            case 224: {
              input.ReadInt32(ref result.enchantDefenseStatusRate_);
              break;
            }
            case 234: {
              input.ReadString(ref result.enchantDefenseCommand_);
              break;
            }
            case 242: {
              input.ReadString(ref result.enchantDefenseSoundName_);
              break;
            }
            case 248: {
              input.ReadInt32(ref result.criticalLotsCount_);
              break;
            }
            case 256: {
              input.ReadInt32(ref result.criticalHitRate_);
              break;
            }
            case 264: {
              input.ReadInt32(ref result.experience_);
              break;
            }
            case 274: {
              input.ReadString(ref result.deadSoundName_);
              break;
            }
            case 282: {
              input.ReadString(ref result.dropItem255_);
              break;
            }
            case 290: {
              input.ReadString(ref result.dropFang255_);
              break;
            }
            case 298: {
              input.ReadString(ref result.dropGold_);
              break;
            }
            case 304: {
              input.ReadInt32(ref result.sleepRate_);
              break;
            }
            case 312: {
              input.ReadInt32(ref result.deepsleepRate_);
              break;
            }
            case 320: {
              input.ReadInt32(ref result.moveWaitCounter_);
              break;
            }
            case 328: {
              input.ReadInt32(ref result.moveAdditonalTacticalPoint_);
              break;
            }
            case 336: {
              input.ReadInt32(ref result.attackAdditionalTacticalPoint_);
              break;
            }
            case 344: {
              input.ReadInt32(ref result.prefabId_);
              break;
            }
            case 354: {
              input.ReadString(ref result.property_);
              break;
            }
            case 362: {
              input.ReadString(ref result.extraData_);
              break;
            }
            case 368: {
              input.ReadInt32(ref result.haveItemNo_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int CardId {
        get { return result.CardId; }
        set { SetCardId(value); }
      }
      public Builder SetCardId(int value) {
        PrepareBuilder();
        result.cardId_ = value;
        return this;
      }
      public Builder ClearCardId() {
        PrepareBuilder();
        result.cardId_ = 0;
        return this;
      }

      public string RaceType {
        get { return result.RaceType; }
        set { SetRaceType(value); }
      }
      public Builder SetRaceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.raceType_ = value;
        return this;
      }
      public Builder ClearRaceType() {
        PrepareBuilder();
        result.raceType_ = "";
        return this;
      }

      public string Attribute {
        get { return result.Attribute; }
        set { SetAttribute(value); }
      }
      public Builder SetAttribute(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_ = value;
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_ = "";
        return this;
      }

      public string DriverParam {
        get { return result.DriverParam; }
        set { SetDriverParam(value); }
      }
      public Builder SetDriverParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.driverParam_ = value;
        return this;
      }
      public Builder ClearDriverParam() {
        PrepareBuilder();
        result.driverParam_ = "";
        return this;
      }

      public int HitPoint {
        get { return result.HitPoint; }
        set { SetHitPoint(value); }
      }
      public Builder SetHitPoint(int value) {
        PrepareBuilder();
        result.hitPoint_ = value;
        return this;
      }
      public Builder ClearHitPoint() {
        PrepareBuilder();
        result.hitPoint_ = 0;
        return this;
      }

      public int Agility {
        get { return result.Agility; }
        set { SetAgility(value); }
      }
      public Builder SetAgility(int value) {
        PrepareBuilder();
        result.agility_ = value;
        return this;
      }
      public Builder ClearAgility() {
        PrepareBuilder();
        result.agility_ = 0;
        return this;
      }

      public int AttackRate {
        get { return result.AttackRate; }
        set { SetAttackRate(value); }
      }
      public Builder SetAttackRate(int value) {
        PrepareBuilder();
        result.attackRate_ = value;
        return this;
      }
      public Builder ClearAttackRate() {
        PrepareBuilder();
        result.attackRate_ = 0;
        return this;
      }

      public int AttackDice {
        get { return result.AttackDice; }
        set { SetAttackDice(value); }
      }
      public Builder SetAttackDice(int value) {
        PrepareBuilder();
        result.attackDice_ = value;
        return this;
      }
      public Builder ClearAttackDice() {
        PrepareBuilder();
        result.attackDice_ = 0;
        return this;
      }

      public int AttackCount {
        get { return result.AttackCount; }
        set { SetAttackCount(value); }
      }
      public Builder SetAttackCount(int value) {
        PrepareBuilder();
        result.attackCount_ = value;
        return this;
      }
      public Builder ClearAttackCount() {
        PrepareBuilder();
        result.attackCount_ = 0;
        return this;
      }

      public int AttackAdjust {
        get { return result.AttackAdjust; }
        set { SetAttackAdjust(value); }
      }
      public Builder SetAttackAdjust(int value) {
        PrepareBuilder();
        result.attackAdjust_ = value;
        return this;
      }
      public Builder ClearAttackAdjust() {
        PrepareBuilder();
        result.attackAdjust_ = 0;
        return this;
      }

      public string AttackSoundName {
        get { return result.AttackSoundName; }
        set { SetAttackSoundName(value); }
      }
      public Builder SetAttackSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attackSoundName_ = value;
        return this;
      }
      public Builder ClearAttackSoundName() {
        PrepareBuilder();
        result.attackSoundName_ = "";
        return this;
      }

      public int CriticalDamageRate {
        get { return result.CriticalDamageRate; }
        set { SetCriticalDamageRate(value); }
      }
      public Builder SetCriticalDamageRate(int value) {
        PrepareBuilder();
        result.criticalDamageRate_ = value;
        return this;
      }
      public Builder ClearCriticalDamageRate() {
        PrepareBuilder();
        result.criticalDamageRate_ = 0;
        return this;
      }

      public string EnchantAttackName {
        get { return result.EnchantAttackName; }
        set { SetEnchantAttackName(value); }
      }
      public Builder SetEnchantAttackName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enchantAttackName_ = value;
        return this;
      }
      public Builder ClearEnchantAttackName() {
        PrepareBuilder();
        result.enchantAttackName_ = "";
        return this;
      }

      public int EnchantAttackStatusRate {
        get { return result.EnchantAttackStatusRate; }
        set { SetEnchantAttackStatusRate(value); }
      }
      public Builder SetEnchantAttackStatusRate(int value) {
        PrepareBuilder();
        result.enchantAttackStatusRate_ = value;
        return this;
      }
      public Builder ClearEnchantAttackStatusRate() {
        PrepareBuilder();
        result.enchantAttackStatusRate_ = 0;
        return this;
      }

      public string EnchantAttackCommand {
        get { return result.EnchantAttackCommand; }
        set { SetEnchantAttackCommand(value); }
      }
      public Builder SetEnchantAttackCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enchantAttackCommand_ = value;
        return this;
      }
      public Builder ClearEnchantAttackCommand() {
        PrepareBuilder();
        result.enchantAttackCommand_ = "";
        return this;
      }

      public string EnchantAttackSoundName {
        get { return result.EnchantAttackSoundName; }
        set { SetEnchantAttackSoundName(value); }
      }
      public Builder SetEnchantAttackSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enchantAttackSoundName_ = value;
        return this;
      }
      public Builder ClearEnchantAttackSoundName() {
        PrepareBuilder();
        result.enchantAttackSoundName_ = "";
        return this;
      }

      public string SkillAttackName {
        get { return result.SkillAttackName; }
        set { SetSkillAttackName(value); }
      }
      public Builder SetSkillAttackName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillAttackName_ = value;
        return this;
      }
      public Builder ClearSkillAttackName() {
        PrepareBuilder();
        result.skillAttackName_ = "";
        return this;
      }

      public int SkillAttackRate {
        get { return result.SkillAttackRate; }
        set { SetSkillAttackRate(value); }
      }
      public Builder SetSkillAttackRate(int value) {
        PrepareBuilder();
        result.skillAttackRate_ = value;
        return this;
      }
      public Builder ClearSkillAttackRate() {
        PrepareBuilder();
        result.skillAttackRate_ = 0;
        return this;
      }

      public string SkillAttackCommand {
        get { return result.SkillAttackCommand; }
        set { SetSkillAttackCommand(value); }
      }
      public Builder SetSkillAttackCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillAttackCommand_ = value;
        return this;
      }
      public Builder ClearSkillAttackCommand() {
        PrepareBuilder();
        result.skillAttackCommand_ = "";
        return this;
      }

      public string SkillAttackSoundName {
        get { return result.SkillAttackSoundName; }
        set { SetSkillAttackSoundName(value); }
      }
      public Builder SetSkillAttackSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillAttackSoundName_ = value;
        return this;
      }
      public Builder ClearSkillAttackSoundName() {
        PrepareBuilder();
        result.skillAttackSoundName_ = "";
        return this;
      }

      public int DefenseDice {
        get { return result.DefenseDice; }
        set { SetDefenseDice(value); }
      }
      public Builder SetDefenseDice(int value) {
        PrepareBuilder();
        result.defenseDice_ = value;
        return this;
      }
      public Builder ClearDefenseDice() {
        PrepareBuilder();
        result.defenseDice_ = 0;
        return this;
      }

      public int DefenseCount {
        get { return result.DefenseCount; }
        set { SetDefenseCount(value); }
      }
      public Builder SetDefenseCount(int value) {
        PrepareBuilder();
        result.defenseCount_ = value;
        return this;
      }
      public Builder ClearDefenseCount() {
        PrepareBuilder();
        result.defenseCount_ = 0;
        return this;
      }

      public int DefenseAdjust {
        get { return result.DefenseAdjust; }
        set { SetDefenseAdjust(value); }
      }
      public Builder SetDefenseAdjust(int value) {
        PrepareBuilder();
        result.defenseAdjust_ = value;
        return this;
      }
      public Builder ClearDefenseAdjust() {
        PrepareBuilder();
        result.defenseAdjust_ = 0;
        return this;
      }

      public string DefenseSoundName {
        get { return result.DefenseSoundName; }
        set { SetDefenseSoundName(value); }
      }
      public Builder SetDefenseSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.defenseSoundName_ = value;
        return this;
      }
      public Builder ClearDefenseSoundName() {
        PrepareBuilder();
        result.defenseSoundName_ = "";
        return this;
      }

      public string EnchantDefenseName {
        get { return result.EnchantDefenseName; }
        set { SetEnchantDefenseName(value); }
      }
      public Builder SetEnchantDefenseName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enchantDefenseName_ = value;
        return this;
      }
      public Builder ClearEnchantDefenseName() {
        PrepareBuilder();
        result.enchantDefenseName_ = "";
        return this;
      }

      public int EnchantDefenseStatusRate {
        get { return result.EnchantDefenseStatusRate; }
        set { SetEnchantDefenseStatusRate(value); }
      }
      public Builder SetEnchantDefenseStatusRate(int value) {
        PrepareBuilder();
        result.enchantDefenseStatusRate_ = value;
        return this;
      }
      public Builder ClearEnchantDefenseStatusRate() {
        PrepareBuilder();
        result.enchantDefenseStatusRate_ = 0;
        return this;
      }

      public string EnchantDefenseCommand {
        get { return result.EnchantDefenseCommand; }
        set { SetEnchantDefenseCommand(value); }
      }
      public Builder SetEnchantDefenseCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enchantDefenseCommand_ = value;
        return this;
      }
      public Builder ClearEnchantDefenseCommand() {
        PrepareBuilder();
        result.enchantDefenseCommand_ = "";
        return this;
      }

      public string EnchantDefenseSoundName {
        get { return result.EnchantDefenseSoundName; }
        set { SetEnchantDefenseSoundName(value); }
      }
      public Builder SetEnchantDefenseSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enchantDefenseSoundName_ = value;
        return this;
      }
      public Builder ClearEnchantDefenseSoundName() {
        PrepareBuilder();
        result.enchantDefenseSoundName_ = "";
        return this;
      }

      public int CriticalLotsCount {
        get { return result.CriticalLotsCount; }
        set { SetCriticalLotsCount(value); }
      }
      public Builder SetCriticalLotsCount(int value) {
        PrepareBuilder();
        result.criticalLotsCount_ = value;
        return this;
      }
      public Builder ClearCriticalLotsCount() {
        PrepareBuilder();
        result.criticalLotsCount_ = 0;
        return this;
      }

      public int CriticalHitRate {
        get { return result.CriticalHitRate; }
        set { SetCriticalHitRate(value); }
      }
      public Builder SetCriticalHitRate(int value) {
        PrepareBuilder();
        result.criticalHitRate_ = value;
        return this;
      }
      public Builder ClearCriticalHitRate() {
        PrepareBuilder();
        result.criticalHitRate_ = 0;
        return this;
      }

      public int Experience {
        get { return result.Experience; }
        set { SetExperience(value); }
      }
      public Builder SetExperience(int value) {
        PrepareBuilder();
        result.experience_ = value;
        return this;
      }
      public Builder ClearExperience() {
        PrepareBuilder();
        result.experience_ = 0;
        return this;
      }

      public string DeadSoundName {
        get { return result.DeadSoundName; }
        set { SetDeadSoundName(value); }
      }
      public Builder SetDeadSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.deadSoundName_ = value;
        return this;
      }
      public Builder ClearDeadSoundName() {
        PrepareBuilder();
        result.deadSoundName_ = "";
        return this;
      }

      public string DropItem255 {
        get { return result.DropItem255; }
        set { SetDropItem255(value); }
      }
      public Builder SetDropItem255(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dropItem255_ = value;
        return this;
      }
      public Builder ClearDropItem255() {
        PrepareBuilder();
        result.dropItem255_ = "";
        return this;
      }

      public string DropFang255 {
        get { return result.DropFang255; }
        set { SetDropFang255(value); }
      }
      public Builder SetDropFang255(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dropFang255_ = value;
        return this;
      }
      public Builder ClearDropFang255() {
        PrepareBuilder();
        result.dropFang255_ = "";
        return this;
      }

      public string DropGold {
        get { return result.DropGold; }
        set { SetDropGold(value); }
      }
      public Builder SetDropGold(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dropGold_ = value;
        return this;
      }
      public Builder ClearDropGold() {
        PrepareBuilder();
        result.dropGold_ = "";
        return this;
      }

      public int SleepRate {
        get { return result.SleepRate; }
        set { SetSleepRate(value); }
      }
      public Builder SetSleepRate(int value) {
        PrepareBuilder();
        result.sleepRate_ = value;
        return this;
      }
      public Builder ClearSleepRate() {
        PrepareBuilder();
        result.sleepRate_ = 0;
        return this;
      }

      public int DeepsleepRate {
        get { return result.DeepsleepRate; }
        set { SetDeepsleepRate(value); }
      }
      public Builder SetDeepsleepRate(int value) {
        PrepareBuilder();
        result.deepsleepRate_ = value;
        return this;
      }
      public Builder ClearDeepsleepRate() {
        PrepareBuilder();
        result.deepsleepRate_ = 0;
        return this;
      }

      public int MoveWaitCounter {
        get { return result.MoveWaitCounter; }
        set { SetMoveWaitCounter(value); }
      }
      public Builder SetMoveWaitCounter(int value) {
        PrepareBuilder();
        result.moveWaitCounter_ = value;
        return this;
      }
      public Builder ClearMoveWaitCounter() {
        PrepareBuilder();
        result.moveWaitCounter_ = 0;
        return this;
      }

      public int MoveAdditonalTacticalPoint {
        get { return result.MoveAdditonalTacticalPoint; }
        set { SetMoveAdditonalTacticalPoint(value); }
      }
      public Builder SetMoveAdditonalTacticalPoint(int value) {
        PrepareBuilder();
        result.moveAdditonalTacticalPoint_ = value;
        return this;
      }
      public Builder ClearMoveAdditonalTacticalPoint() {
        PrepareBuilder();
        result.moveAdditonalTacticalPoint_ = 0;
        return this;
      }

      public int AttackAdditionalTacticalPoint {
        get { return result.AttackAdditionalTacticalPoint; }
        set { SetAttackAdditionalTacticalPoint(value); }
      }
      public Builder SetAttackAdditionalTacticalPoint(int value) {
        PrepareBuilder();
        result.attackAdditionalTacticalPoint_ = value;
        return this;
      }
      public Builder ClearAttackAdditionalTacticalPoint() {
        PrepareBuilder();
        result.attackAdditionalTacticalPoint_ = 0;
        return this;
      }

      public int PrefabId {
        get { return result.PrefabId; }
        set { SetPrefabId(value); }
      }
      public Builder SetPrefabId(int value) {
        PrepareBuilder();
        result.prefabId_ = value;
        return this;
      }
      public Builder ClearPrefabId() {
        PrepareBuilder();
        result.prefabId_ = 0;
        return this;
      }

      public string Property {
        get { return result.Property; }
        set { SetProperty(value); }
      }
      public Builder SetProperty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.property_ = value;
        return this;
      }
      public Builder ClearProperty() {
        PrepareBuilder();
        result.property_ = "";
        return this;
      }

      public string ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        PrepareBuilder();
        result.extraData_ = "";
        return this;
      }

      public int HaveItemNo {
        get { return result.HaveItemNo; }
        set { SetHaveItemNo(value); }
      }
      public Builder SetHaveItemNo(int value) {
        PrepareBuilder();
        result.haveItemNo_ = value;
        return this;
      }
      public Builder ClearHaveItemNo() {
        PrepareBuilder();
        result.haveItemNo_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Item : pb::GeneratedMessage<Item, Item.Builder> {
    public Item() { }
    private static readonly Item defaultInstance = new Item().MakeReadOnly();
    private static readonly string[] _itemFieldNames = new string[] { "attack_adjust", "attribute", "cirtical_hit_rate", "defense_adjust", "description", "dummy_item_name_no", "durability", "extra_type", "fitting_type", "id", "is_drop", "is_exclusive", "is_in_ex_item", "is_pickup", "is_shot", "is_swing", "is_use", "item_code", "mapchip", "merge_count", "name", "param", "price", "rarity", "sort_id", "sound_name", "stack_item_id", "stack_item_num", "type" };
    private static readonly uint[] _itemFieldTags = new uint[] { 80, 66, 96, 88, 194, 216, 104, 186, 58, 8, 168, 176, 224, 144, 232, 152, 160, 26, 34, 112, 42, 74, 128, 120, 16, 138, 200, 208, 50 };
    public static Item DefaultInstance {
      get { return defaultInstance; }
    }

    public override Item DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Item ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_Item__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Item, Item.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_Item__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int SortIdFieldNumber = 2;
    private int sortId_;
    public int SortId {
      get { return sortId_; }
      set { sortId_ = value; }
    }

    public const int ItemCodeFieldNumber = 3;
    private string itemCode_ = "";
    public string ItemCode {
      get { return itemCode_; }
      set { itemCode_ = value; }
    }

    public const int MapchipFieldNumber = 4;
    private string mapchip_ = "";
    public string Mapchip {
      get { return mapchip_; }
      set { mapchip_ = value; }
    }

    public const int NameFieldNumber = 5;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int TypeFieldNumber = 6;
    private string type_ = "";
    public string Type {
      get { return type_; }
      set { type_ = value; }
    }

    public const int FittingTypeFieldNumber = 7;
    private string fittingType_ = "";
    public string FittingType {
      get { return fittingType_; }
      set { fittingType_ = value; }
    }

    public const int AttributeFieldNumber = 8;
    private string attribute_ = "";
    public string Attribute {
      get { return attribute_; }
      set { attribute_ = value; }
    }

    public const int ParamFieldNumber = 9;
    private string param_ = "";
    public string Param {
      get { return param_; }
      set { param_ = value; }
    }

    public const int AttackAdjustFieldNumber = 10;
    private int attackAdjust_;
    public int AttackAdjust {
      get { return attackAdjust_; }
      set { attackAdjust_ = value; }
    }

    public const int DefenseAdjustFieldNumber = 11;
    private int defenseAdjust_;
    public int DefenseAdjust {
      get { return defenseAdjust_; }
      set { defenseAdjust_ = value; }
    }

    public const int CirticalHitRateFieldNumber = 12;
    private int cirticalHitRate_;
    public int CirticalHitRate {
      get { return cirticalHitRate_; }
      set { cirticalHitRate_ = value; }
    }

    public const int DurabilityFieldNumber = 13;
    private int durability_;
    public int Durability {
      get { return durability_; }
      set { durability_ = value; }
    }

    public const int MergeCountFieldNumber = 14;
    private int mergeCount_;
    public int MergeCount {
      get { return mergeCount_; }
      set { mergeCount_ = value; }
    }

    public const int RarityFieldNumber = 15;
    private int rarity_;
    public int Rarity {
      get { return rarity_; }
      set { rarity_ = value; }
    }

    public const int PriceFieldNumber = 16;
    private int price_;
    public int Price {
      get { return price_; }
      set { price_ = value; }
    }

    public const int SoundNameFieldNumber = 17;
    private string soundName_ = "";
    public string SoundName {
      get { return soundName_; }
      set { soundName_ = value; }
    }

    public const int IsPickupFieldNumber = 18;
    private bool isPickup_;
    public bool IsPickup {
      get { return isPickup_; }
      set { isPickup_ = value; }
    }

    public const int IsSwingFieldNumber = 19;
    private bool isSwing_;
    public bool IsSwing {
      get { return isSwing_; }
      set { isSwing_ = value; }
    }

    public const int IsUseFieldNumber = 20;
    private bool isUse_;
    public bool IsUse {
      get { return isUse_; }
      set { isUse_ = value; }
    }

    public const int IsDropFieldNumber = 21;
    private bool isDrop_;
    public bool IsDrop {
      get { return isDrop_; }
      set { isDrop_ = value; }
    }

    public const int IsExclusiveFieldNumber = 22;
    private bool isExclusive_;
    public bool IsExclusive {
      get { return isExclusive_; }
      set { isExclusive_ = value; }
    }

    public const int ExtraTypeFieldNumber = 23;
    private string extraType_ = "";
    public string ExtraType {
      get { return extraType_; }
      set { extraType_ = value; }
    }

    public const int DescriptionFieldNumber = 24;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set { description_ = value; }
    }

    public const int StackItemIdFieldNumber = 25;
    private int stackItemId_;
    public int StackItemId {
      get { return stackItemId_; }
      set { stackItemId_ = value; }
    }

    public const int StackItemNumFieldNumber = 26;
    private int stackItemNum_;
    public int StackItemNum {
      get { return stackItemNum_; }
      set { stackItemNum_ = value; }
    }

    public const int DummyItemNameNoFieldNumber = 27;
    private int dummyItemNameNo_;
    public int DummyItemNameNo {
      get { return dummyItemNameNo_; }
      set { dummyItemNameNo_ = value; }
    }

    public const int IsInExItemFieldNumber = 28;
    private bool isInExItem_;
    public bool IsInExItem {
      get { return isInExItem_; }
      set { isInExItem_ = value; }
    }

    public const int IsShotFieldNumber = 29;
    private bool isShot_;
    public bool IsShot {
      get { return isShot_; }
      set { isShot_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _itemFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[9], Id);
      }
      if (SortId != 0) {
        output.WriteInt32(2, field_names[24], SortId);
      }
      if (ItemCode != "") {
        output.WriteString(3, field_names[17], ItemCode);
      }
      if (Mapchip != "") {
        output.WriteString(4, field_names[18], Mapchip);
      }
      if (Name != "") {
        output.WriteString(5, field_names[20], Name);
      }
      if (Type != "") {
        output.WriteString(6, field_names[28], Type);
      }
      if (FittingType != "") {
        output.WriteString(7, field_names[8], FittingType);
      }
      if (Attribute != "") {
        output.WriteString(8, field_names[1], Attribute);
      }
      if (Param != "") {
        output.WriteString(9, field_names[21], Param);
      }
      if (AttackAdjust != 0) {
        output.WriteInt32(10, field_names[0], AttackAdjust);
      }
      if (DefenseAdjust != 0) {
        output.WriteInt32(11, field_names[3], DefenseAdjust);
      }
      if (CirticalHitRate != 0) {
        output.WriteInt32(12, field_names[2], CirticalHitRate);
      }
      if (Durability != 0) {
        output.WriteInt32(13, field_names[6], Durability);
      }
      if (MergeCount != 0) {
        output.WriteInt32(14, field_names[19], MergeCount);
      }
      if (Rarity != 0) {
        output.WriteInt32(15, field_names[23], Rarity);
      }
      if (Price != 0) {
        output.WriteInt32(16, field_names[22], Price);
      }
      if (SoundName != "") {
        output.WriteString(17, field_names[25], SoundName);
      }
      if (IsPickup != false) {
        output.WriteBool(18, field_names[13], IsPickup);
      }
      if (IsSwing != false) {
        output.WriteBool(19, field_names[15], IsSwing);
      }
      if (IsUse != false) {
        output.WriteBool(20, field_names[16], IsUse);
      }
      if (IsDrop != false) {
        output.WriteBool(21, field_names[10], IsDrop);
      }
      if (IsExclusive != false) {
        output.WriteBool(22, field_names[11], IsExclusive);
      }
      if (ExtraType != "") {
        output.WriteString(23, field_names[7], ExtraType);
      }
      if (Description != "") {
        output.WriteString(24, field_names[4], Description);
      }
      if (StackItemId != 0) {
        output.WriteInt32(25, field_names[26], StackItemId);
      }
      if (StackItemNum != 0) {
        output.WriteInt32(26, field_names[27], StackItemNum);
      }
      if (DummyItemNameNo != 0) {
        output.WriteInt32(27, field_names[5], DummyItemNameNo);
      }
      if (IsInExItem != false) {
        output.WriteBool(28, field_names[12], IsInExItem);
      }
      if (IsShot != false) {
        output.WriteBool(29, field_names[14], IsShot);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (SortId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SortId);
      }
      if (ItemCode != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, ItemCode);
      }
      if (Mapchip != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Mapchip);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Name);
      }
      if (Type != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, Type);
      }
      if (FittingType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, FittingType);
      }
      if (Attribute != "") {
        size += pb::CodedOutputStream.ComputeStringSize(8, Attribute);
      }
      if (Param != "") {
        size += pb::CodedOutputStream.ComputeStringSize(9, Param);
      }
      if (AttackAdjust != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, AttackAdjust);
      }
      if (DefenseAdjust != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, DefenseAdjust);
      }
      if (CirticalHitRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, CirticalHitRate);
      }
      if (Durability != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Durability);
      }
      if (MergeCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, MergeCount);
      }
      if (Rarity != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, Rarity);
      }
      if (Price != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, Price);
      }
      if (SoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(17, SoundName);
      }
      if (IsPickup != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, IsPickup);
      }
      if (IsSwing != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, IsSwing);
      }
      if (IsUse != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(20, IsUse);
      }
      if (IsDrop != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(21, IsDrop);
      }
      if (IsExclusive != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(22, IsExclusive);
      }
      if (ExtraType != "") {
        size += pb::CodedOutputStream.ComputeStringSize(23, ExtraType);
      }
      if (Description != "") {
        size += pb::CodedOutputStream.ComputeStringSize(24, Description);
      }
      if (StackItemId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(25, StackItemId);
      }
      if (StackItemNum != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(26, StackItemNum);
      }
      if (DummyItemNameNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(27, DummyItemNameNo);
      }
      if (IsInExItem != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(28, IsInExItem);
      }
      if (IsShot != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(29, IsShot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Item ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Item MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Item prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Item, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Item cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Item result;

      private Item PrepareBuilder() {
        if (resultIsReadOnly) {
          Item original = result;
          result = new Item();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override Item MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.Item.Descriptor; }
      }

      public override Item DefaultInstanceForType {
        get { return global::Master.Item.DefaultInstance; }
      }

      public override Item BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Item) {
          return MergeFrom((Item) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Item other) {
        if (other == global::Master.Item.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.SortId != 0) {
          SortId = other.SortId;
        }
        if (other.ItemCode != "") {
          ItemCode = other.ItemCode;
        }
        if (other.Mapchip != "") {
          Mapchip = other.Mapchip;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Type != "") {
          Type = other.Type;
        }
        if (other.FittingType != "") {
          FittingType = other.FittingType;
        }
        if (other.Attribute != "") {
          Attribute = other.Attribute;
        }
        if (other.Param != "") {
          Param = other.Param;
        }
        if (other.AttackAdjust != 0) {
          AttackAdjust = other.AttackAdjust;
        }
        if (other.DefenseAdjust != 0) {
          DefenseAdjust = other.DefenseAdjust;
        }
        if (other.CirticalHitRate != 0) {
          CirticalHitRate = other.CirticalHitRate;
        }
        if (other.Durability != 0) {
          Durability = other.Durability;
        }
        if (other.MergeCount != 0) {
          MergeCount = other.MergeCount;
        }
        if (other.Rarity != 0) {
          Rarity = other.Rarity;
        }
        if (other.Price != 0) {
          Price = other.Price;
        }
        if (other.SoundName != "") {
          SoundName = other.SoundName;
        }
        if (other.IsPickup != false) {
          IsPickup = other.IsPickup;
        }
        if (other.IsSwing != false) {
          IsSwing = other.IsSwing;
        }
        if (other.IsUse != false) {
          IsUse = other.IsUse;
        }
        if (other.IsDrop != false) {
          IsDrop = other.IsDrop;
        }
        if (other.IsExclusive != false) {
          IsExclusive = other.IsExclusive;
        }
        if (other.ExtraType != "") {
          ExtraType = other.ExtraType;
        }
        if (other.Description != "") {
          Description = other.Description;
        }
        if (other.StackItemId != 0) {
          StackItemId = other.StackItemId;
        }
        if (other.StackItemNum != 0) {
          StackItemNum = other.StackItemNum;
        }
        if (other.DummyItemNameNo != 0) {
          DummyItemNameNo = other.DummyItemNameNo;
        }
        if (other.IsInExItem != false) {
          IsInExItem = other.IsInExItem;
        }
        if (other.IsShot != false) {
          IsShot = other.IsShot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.sortId_);
              break;
            }
            case 26: {
              input.ReadString(ref result.itemCode_);
              break;
            }
            case 34: {
              input.ReadString(ref result.mapchip_);
              break;
            }
            case 42: {
              input.ReadString(ref result.name_);
              break;
            }
            case 50: {
              input.ReadString(ref result.type_);
              break;
            }
            case 58: {
              input.ReadString(ref result.fittingType_);
              break;
            }
            case 66: {
              input.ReadString(ref result.attribute_);
              break;
            }
            case 74: {
              input.ReadString(ref result.param_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.attackAdjust_);
              break;
            }
            case 88: {
              input.ReadInt32(ref result.defenseAdjust_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.cirticalHitRate_);
              break;
            }
            case 104: {
              input.ReadInt32(ref result.durability_);
              break;
            }
            case 112: {
              input.ReadInt32(ref result.mergeCount_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.rarity_);
              break;
            }
            case 128: {
              input.ReadInt32(ref result.price_);
              break;
            }
            case 138: {
              input.ReadString(ref result.soundName_);
              break;
            }
            case 144: {
              input.ReadBool(ref result.isPickup_);
              break;
            }
            case 152: {
              input.ReadBool(ref result.isSwing_);
              break;
            }
            case 160: {
              input.ReadBool(ref result.isUse_);
              break;
            }
            case 168: {
              input.ReadBool(ref result.isDrop_);
              break;
            }
            case 176: {
              input.ReadBool(ref result.isExclusive_);
              break;
            }
            case 186: {
              input.ReadString(ref result.extraType_);
              break;
            }
            case 194: {
              input.ReadString(ref result.description_);
              break;
            }
            case 200: {
              input.ReadInt32(ref result.stackItemId_);
              break;
            }
            case 208: {
              input.ReadInt32(ref result.stackItemNum_);
              break;
            }
            case 216: {
              input.ReadInt32(ref result.dummyItemNameNo_);
              break;
            }
            case 224: {
              input.ReadBool(ref result.isInExItem_);
              break;
            }
            case 232: {
              input.ReadBool(ref result.isShot_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public int SortId {
        get { return result.SortId; }
        set { SetSortId(value); }
      }
      public Builder SetSortId(int value) {
        PrepareBuilder();
        result.sortId_ = value;
        return this;
      }
      public Builder ClearSortId() {
        PrepareBuilder();
        result.sortId_ = 0;
        return this;
      }

      public string ItemCode {
        get { return result.ItemCode; }
        set { SetItemCode(value); }
      }
      public Builder SetItemCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemCode_ = value;
        return this;
      }
      public Builder ClearItemCode() {
        PrepareBuilder();
        result.itemCode_ = "";
        return this;
      }

      public string Mapchip {
        get { return result.Mapchip; }
        set { SetMapchip(value); }
      }
      public Builder SetMapchip(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mapchip_ = value;
        return this;
      }
      public Builder ClearMapchip() {
        PrepareBuilder();
        result.mapchip_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.type_ = "";
        return this;
      }

      public string FittingType {
        get { return result.FittingType; }
        set { SetFittingType(value); }
      }
      public Builder SetFittingType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fittingType_ = value;
        return this;
      }
      public Builder ClearFittingType() {
        PrepareBuilder();
        result.fittingType_ = "";
        return this;
      }

      public string Attribute {
        get { return result.Attribute; }
        set { SetAttribute(value); }
      }
      public Builder SetAttribute(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_ = value;
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_ = "";
        return this;
      }

      public string Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = "";
        return this;
      }

      public int AttackAdjust {
        get { return result.AttackAdjust; }
        set { SetAttackAdjust(value); }
      }
      public Builder SetAttackAdjust(int value) {
        PrepareBuilder();
        result.attackAdjust_ = value;
        return this;
      }
      public Builder ClearAttackAdjust() {
        PrepareBuilder();
        result.attackAdjust_ = 0;
        return this;
      }

      public int DefenseAdjust {
        get { return result.DefenseAdjust; }
        set { SetDefenseAdjust(value); }
      }
      public Builder SetDefenseAdjust(int value) {
        PrepareBuilder();
        result.defenseAdjust_ = value;
        return this;
      }
      public Builder ClearDefenseAdjust() {
        PrepareBuilder();
        result.defenseAdjust_ = 0;
        return this;
      }

      public int CirticalHitRate {
        get { return result.CirticalHitRate; }
        set { SetCirticalHitRate(value); }
      }
      public Builder SetCirticalHitRate(int value) {
        PrepareBuilder();
        result.cirticalHitRate_ = value;
        return this;
      }
      public Builder ClearCirticalHitRate() {
        PrepareBuilder();
        result.cirticalHitRate_ = 0;
        return this;
      }

      public int Durability {
        get { return result.Durability; }
        set { SetDurability(value); }
      }
      public Builder SetDurability(int value) {
        PrepareBuilder();
        result.durability_ = value;
        return this;
      }
      public Builder ClearDurability() {
        PrepareBuilder();
        result.durability_ = 0;
        return this;
      }

      public int MergeCount {
        get { return result.MergeCount; }
        set { SetMergeCount(value); }
      }
      public Builder SetMergeCount(int value) {
        PrepareBuilder();
        result.mergeCount_ = value;
        return this;
      }
      public Builder ClearMergeCount() {
        PrepareBuilder();
        result.mergeCount_ = 0;
        return this;
      }

      public int Rarity {
        get { return result.Rarity; }
        set { SetRarity(value); }
      }
      public Builder SetRarity(int value) {
        PrepareBuilder();
        result.rarity_ = value;
        return this;
      }
      public Builder ClearRarity() {
        PrepareBuilder();
        result.rarity_ = 0;
        return this;
      }

      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.price_ = 0;
        return this;
      }

      public string SoundName {
        get { return result.SoundName; }
        set { SetSoundName(value); }
      }
      public Builder SetSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.soundName_ = value;
        return this;
      }
      public Builder ClearSoundName() {
        PrepareBuilder();
        result.soundName_ = "";
        return this;
      }

      public bool IsPickup {
        get { return result.IsPickup; }
        set { SetIsPickup(value); }
      }
      public Builder SetIsPickup(bool value) {
        PrepareBuilder();
        result.isPickup_ = value;
        return this;
      }
      public Builder ClearIsPickup() {
        PrepareBuilder();
        result.isPickup_ = false;
        return this;
      }

      public bool IsSwing {
        get { return result.IsSwing; }
        set { SetIsSwing(value); }
      }
      public Builder SetIsSwing(bool value) {
        PrepareBuilder();
        result.isSwing_ = value;
        return this;
      }
      public Builder ClearIsSwing() {
        PrepareBuilder();
        result.isSwing_ = false;
        return this;
      }

      public bool IsUse {
        get { return result.IsUse; }
        set { SetIsUse(value); }
      }
      public Builder SetIsUse(bool value) {
        PrepareBuilder();
        result.isUse_ = value;
        return this;
      }
      public Builder ClearIsUse() {
        PrepareBuilder();
        result.isUse_ = false;
        return this;
      }

      public bool IsDrop {
        get { return result.IsDrop; }
        set { SetIsDrop(value); }
      }
      public Builder SetIsDrop(bool value) {
        PrepareBuilder();
        result.isDrop_ = value;
        return this;
      }
      public Builder ClearIsDrop() {
        PrepareBuilder();
        result.isDrop_ = false;
        return this;
      }

      public bool IsExclusive {
        get { return result.IsExclusive; }
        set { SetIsExclusive(value); }
      }
      public Builder SetIsExclusive(bool value) {
        PrepareBuilder();
        result.isExclusive_ = value;
        return this;
      }
      public Builder ClearIsExclusive() {
        PrepareBuilder();
        result.isExclusive_ = false;
        return this;
      }

      public string ExtraType {
        get { return result.ExtraType; }
        set { SetExtraType(value); }
      }
      public Builder SetExtraType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.extraType_ = value;
        return this;
      }
      public Builder ClearExtraType() {
        PrepareBuilder();
        result.extraType_ = "";
        return this;
      }

      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.description_ = "";
        return this;
      }

      public int StackItemId {
        get { return result.StackItemId; }
        set { SetStackItemId(value); }
      }
      public Builder SetStackItemId(int value) {
        PrepareBuilder();
        result.stackItemId_ = value;
        return this;
      }
      public Builder ClearStackItemId() {
        PrepareBuilder();
        result.stackItemId_ = 0;
        return this;
      }

      public int StackItemNum {
        get { return result.StackItemNum; }
        set { SetStackItemNum(value); }
      }
      public Builder SetStackItemNum(int value) {
        PrepareBuilder();
        result.stackItemNum_ = value;
        return this;
      }
      public Builder ClearStackItemNum() {
        PrepareBuilder();
        result.stackItemNum_ = 0;
        return this;
      }

      public int DummyItemNameNo {
        get { return result.DummyItemNameNo; }
        set { SetDummyItemNameNo(value); }
      }
      public Builder SetDummyItemNameNo(int value) {
        PrepareBuilder();
        result.dummyItemNameNo_ = value;
        return this;
      }
      public Builder ClearDummyItemNameNo() {
        PrepareBuilder();
        result.dummyItemNameNo_ = 0;
        return this;
      }

      public bool IsInExItem {
        get { return result.IsInExItem; }
        set { SetIsInExItem(value); }
      }
      public Builder SetIsInExItem(bool value) {
        PrepareBuilder();
        result.isInExItem_ = value;
        return this;
      }
      public Builder ClearIsInExItem() {
        PrepareBuilder();
        result.isInExItem_ = false;
        return this;
      }

      public bool IsShot {
        get { return result.IsShot; }
        set { SetIsShot(value); }
      }
      public Builder SetIsShot(bool value) {
        PrepareBuilder();
        result.isShot_ = value;
        return this;
      }
      public Builder ClearIsShot() {
        PrepareBuilder();
        result.isShot_ = false;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ItemName : pb::GeneratedMessage<ItemName, ItemName.Builder> {
    public ItemName() { }
    private static readonly ItemName defaultInstance = new ItemName().MakeReadOnly();
    private static readonly string[] _itemNameFieldNames = new string[] { "id", "name" };
    private static readonly uint[] _itemNameFieldTags = new uint[] { 8, 18 };
    public static ItemName DefaultInstance {
      get { return defaultInstance; }
    }

    public override ItemName DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ItemName ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_ItemName__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ItemName, ItemName.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_ItemName__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _itemNameFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ItemName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemName ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemName ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ItemName MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemName prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ItemName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ItemName cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ItemName result;

      private ItemName PrepareBuilder() {
        if (resultIsReadOnly) {
          ItemName original = result;
          result = new ItemName();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override ItemName MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.ItemName.Descriptor; }
      }

      public override ItemName DefaultInstanceForType {
        get { return global::Master.ItemName.DefaultInstance; }
      }

      public override ItemName BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemName) {
          return MergeFrom((ItemName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ItemName other) {
        if (other == global::Master.ItemName.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemNameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemNameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ItemNameDict : pb::GeneratedMessage<ItemNameDict, ItemNameDict.Builder> {
    public ItemNameDict() { }
    private static readonly ItemNameDict defaultInstance = new ItemNameDict().MakeReadOnly();
    private static readonly string[] _itemNameDictFieldNames = new string[] { "dict" };
    private static readonly uint[] _itemNameDictFieldTags = new uint[] { 10 };
    public static ItemNameDict DefaultInstance {
      get { return defaultInstance; }
    }

    public override ItemNameDict DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ItemNameDict ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_ItemNameDict__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ItemNameDict, ItemNameDict.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_ItemNameDict__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class List : pb::GeneratedMessage<List, List.Builder> {
        public List() { }
        private static readonly List defaultInstance = new List().MakeReadOnly();
        private static readonly string[] _listFieldNames = new string[] { "list" };
        private static readonly uint[] _listFieldTags = new uint[] { 10 };
        public static List DefaultInstance {
          get { return defaultInstance; }
        }

        public override List DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override List ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_ItemNameDict_List__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<List, List.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_ItemNameDict_List__FieldAccessorTable; }
        }

        public const int List_FieldNumber = 1;
        private pbc::PopsicleList<global::Master.ItemName> list_ = new pbc::PopsicleList<global::Master.ItemName>();
        public scg::IList<global::Master.ItemName> List_List {
          get { return list_; }
        }
        public int List_Count {
          get { return list_.Count; }
        }
        public global::Master.ItemName GetList_(int index) {
          return list_[index];
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _listFieldNames;
          if (list_.Count > 0) {
            output.WriteMessageArray(1, field_names[0], list_);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          foreach (global::Master.ItemName element in List_List) {
            size += pb::CodedOutputStream.ComputeMessageSize(1, element);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static List ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static List ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static List ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static List ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static List ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static List ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static List ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static List ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static List ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static List ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private List MakeReadOnly() {
          list_.MakeReadOnly();
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(List prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<List, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(List cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private List result;

          private List PrepareBuilder() {
            if (resultIsReadOnly) {
              List original = result;
              result = new List();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override List MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.ItemNameDict.Types.List.Descriptor; }
          }

          public override List DefaultInstanceForType {
            get { return global::Master.ItemNameDict.Types.List.DefaultInstance; }
          }

          public override List BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is List) {
              return MergeFrom((List) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(List other) {
            if (other == global::Master.ItemNameDict.Types.List.DefaultInstance) return this;
            PrepareBuilder();
            if (other.list_.Count != 0) {
              result.list_.Add(other.list_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_listFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _listFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadMessageArray(tag, field_name, result.list_, global::Master.ItemName.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public pbc::IPopsicleList<global::Master.ItemName> List_List {
            get { return PrepareBuilder().list_; }
          }
          public int List_Count {
            get { return result.List_Count; }
          }
          public global::Master.ItemName GetList_(int index) {
            return result.GetList_(index);
          }
          public Builder SetList_(int index, global::Master.ItemName value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.list_[index] = value;
            return this;
          }
          public Builder SetList_(int index, global::Master.ItemName.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.list_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddList_(global::Master.ItemName value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.list_.Add(value);
            return this;
          }
          public Builder AddList_(global::Master.ItemName.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.list_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeList_(scg::IEnumerable<global::Master.ItemName> values) {
            PrepareBuilder();
            result.list_.Add(values);
            return this;
          }
          public Builder ClearList_() {
            PrepareBuilder();
            result.list_.Clear();
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DictEntry : pb::GeneratedMessage<DictEntry, DictEntry.Builder> {
        public DictEntry() { }
        private static readonly DictEntry defaultInstance = new DictEntry().MakeReadOnly();
        private static readonly string[] _dictEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _dictEntryFieldTags = new uint[] { 10, 18 };
        public static DictEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override DictEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override DictEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_ItemNameDict_DictEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DictEntry, DictEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_ItemNameDict_DictEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private string key_ = "";
        public string Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private global::Master.ItemNameDict.Types.List value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public global::Master.ItemNameDict.Types.List Value {
          get { return value_ ?? global::Master.ItemNameDict.Types.List.DefaultInstance; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _dictEntryFieldNames;
          if (Key != "") {
            output.WriteString(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteMessage(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != "") {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (hasValue) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static DictEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DictEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DictEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DictEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DictEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DictEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DictEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DictEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DictEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DictEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DictEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DictEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DictEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DictEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private DictEntry result;

          private DictEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              DictEntry original = result;
              result = new DictEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override DictEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.ItemNameDict.Types.DictEntry.Descriptor; }
          }

          public override DictEntry DefaultInstanceForType {
            get { return global::Master.ItemNameDict.Types.DictEntry.DefaultInstance; }
          }

          public override DictEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DictEntry) {
              return MergeFrom((DictEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(DictEntry other) {
            if (other == global::Master.ItemNameDict.Types.DictEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != "") {
              Key = other.Key;
            }
            if (other.HasValue) {
              MergeValue(other.Value);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_dictEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _dictEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadString(ref result.key_);
                  break;
                }
                case 18: {
                  global::Master.ItemNameDict.Types.List.Builder subBuilder = global::Master.ItemNameDict.Types.List.CreateBuilder();
                  if (result.hasValue) {
                    subBuilder.MergeFrom(Value);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Value = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = "";
            return this;
          }

          public bool HasValue {
           get { return result.hasValue; }
          }
          public global::Master.ItemNameDict.Types.List Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(global::Master.ItemNameDict.Types.List value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder SetValue(global::Master.ItemNameDict.Types.List.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = builderForValue.Build();
            return this;
          }
          public Builder MergeValue(global::Master.ItemNameDict.Types.List value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasValue &&
                result.value_ != global::Master.ItemNameDict.Types.List.DefaultInstance) {
                result.value_ = global::Master.ItemNameDict.Types.List.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
            } else {
              result.value_ = value;
            }
            result.hasValue = true;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = null;
            return this;
          }
        }
      }

    }
    #endregion

    public const int DictFieldNumber = 1;
    private pbc::PopsicleList<global::Master.ItemNameDict.Types.DictEntry> dict_ = new pbc::PopsicleList<global::Master.ItemNameDict.Types.DictEntry>();
    public scg::IList<global::Master.ItemNameDict.Types.DictEntry> DictList {
      get { return dict_; }
    }
    public int DictCount {
      get { return dict_.Count; }
    }
    public global::Master.ItemNameDict.Types.DictEntry GetDict(int index) {
      return dict_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _itemNameDictFieldNames;
      if (dict_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], dict_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::Master.ItemNameDict.Types.DictEntry element in DictList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ItemNameDict ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemNameDict ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemNameDict ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemNameDict ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemNameDict ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemNameDict ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemNameDict ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemNameDict ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemNameDict ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemNameDict ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ItemNameDict MakeReadOnly() {
      dict_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemNameDict prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ItemNameDict, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ItemNameDict cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ItemNameDict result;

      private ItemNameDict PrepareBuilder() {
        if (resultIsReadOnly) {
          ItemNameDict original = result;
          result = new ItemNameDict();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override ItemNameDict MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.ItemNameDict.Descriptor; }
      }

      public override ItemNameDict DefaultInstanceForType {
        get { return global::Master.ItemNameDict.DefaultInstance; }
      }

      public override ItemNameDict BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemNameDict) {
          return MergeFrom((ItemNameDict) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ItemNameDict other) {
        if (other == global::Master.ItemNameDict.DefaultInstance) return this;
        PrepareBuilder();
        if (other.dict_.Count != 0) {
          result.dict_.Add(other.dict_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemNameDictFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemNameDictFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.dict_, global::Master.ItemNameDict.Types.DictEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::Master.ItemNameDict.Types.DictEntry> DictList {
        get { return PrepareBuilder().dict_; }
      }
      public int DictCount {
        get { return result.DictCount; }
      }
      public global::Master.ItemNameDict.Types.DictEntry GetDict(int index) {
        return result.GetDict(index);
      }
      public Builder SetDict(int index, global::Master.ItemNameDict.Types.DictEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dict_[index] = value;
        return this;
      }
      public Builder SetDict(int index, global::Master.ItemNameDict.Types.DictEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dict_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDict(global::Master.ItemNameDict.Types.DictEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dict_.Add(value);
        return this;
      }
      public Builder AddDict(global::Master.ItemNameDict.Types.DictEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dict_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDict(scg::IEnumerable<global::Master.ItemNameDict.Types.DictEntry> values) {
        PrepareBuilder();
        result.dict_.Add(values);
        return this;
      }
      public Builder ClearDict() {
        PrepareBuilder();
        result.dict_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Trap : pb::GeneratedMessage<Trap, Trap.Builder> {
    public Trap() { }
    private static readonly Trap defaultInstance = new Trap().MakeReadOnly();
    private static readonly string[] _trapFieldNames = new string[] { "driver_name", "driver_parameter", "id", "name", "probability", "soundName", "trap_code" };
    private static readonly uint[] _trapFieldTags = new uint[] { 34, 42, 8, 18, 48, 58, 26 };
    public static Trap DefaultInstance {
      get { return defaultInstance; }
    }

    public override Trap DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Trap ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_Trap__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Trap, Trap.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_Trap__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int TrapCodeFieldNumber = 3;
    private string trapCode_ = "";
    public string TrapCode {
      get { return trapCode_; }
      set { trapCode_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int DriverNameFieldNumber = 4;
    private string driverName_ = "";
    public string DriverName {
      get { return driverName_; }
      set { driverName_ = value; }
    }

    public const int DriverParameterFieldNumber = 5;
    private string driverParameter_ = "";
    public string DriverParameter {
      get { return driverParameter_; }
      set { driverParameter_ = value; }
    }

    public const int ProbabilityFieldNumber = 6;
    private int probability_;
    public int Probability {
      get { return probability_; }
      set { probability_ = value; }
    }

    public const int SoundNameFieldNumber = 7;
    private string soundName_ = "";
    public string SoundName {
      get { return soundName_; }
      set { soundName_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _trapFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[3], Name);
      }
      if (TrapCode != "") {
        output.WriteString(3, field_names[6], TrapCode);
      }
      if (DriverName != "") {
        output.WriteString(4, field_names[0], DriverName);
      }
      if (DriverParameter != "") {
        output.WriteString(5, field_names[1], DriverParameter);
      }
      if (Probability != 0) {
        output.WriteInt32(6, field_names[4], Probability);
      }
      if (SoundName != "") {
        output.WriteString(7, field_names[5], SoundName);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (TrapCode != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, TrapCode);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (DriverName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, DriverName);
      }
      if (DriverParameter != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, DriverParameter);
      }
      if (Probability != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Probability);
      }
      if (SoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(7, SoundName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Trap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Trap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Trap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Trap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Trap MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Trap prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Trap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Trap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Trap result;

      private Trap PrepareBuilder() {
        if (resultIsReadOnly) {
          Trap original = result;
          result = new Trap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override Trap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.Trap.Descriptor; }
      }

      public override Trap DefaultInstanceForType {
        get { return global::Master.Trap.DefaultInstance; }
      }

      public override Trap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Trap) {
          return MergeFrom((Trap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Trap other) {
        if (other == global::Master.Trap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.TrapCode != "") {
          TrapCode = other.TrapCode;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.DriverName != "") {
          DriverName = other.DriverName;
        }
        if (other.DriverParameter != "") {
          DriverParameter = other.DriverParameter;
        }
        if (other.Probability != 0) {
          Probability = other.Probability;
        }
        if (other.SoundName != "") {
          SoundName = other.SoundName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_trapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _trapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadString(ref result.trapCode_);
              break;
            }
            case 34: {
              input.ReadString(ref result.driverName_);
              break;
            }
            case 42: {
              input.ReadString(ref result.driverParameter_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.probability_);
              break;
            }
            case 58: {
              input.ReadString(ref result.soundName_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string TrapCode {
        get { return result.TrapCode; }
        set { SetTrapCode(value); }
      }
      public Builder SetTrapCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.trapCode_ = value;
        return this;
      }
      public Builder ClearTrapCode() {
        PrepareBuilder();
        result.trapCode_ = "";
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public string DriverName {
        get { return result.DriverName; }
        set { SetDriverName(value); }
      }
      public Builder SetDriverName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.driverName_ = value;
        return this;
      }
      public Builder ClearDriverName() {
        PrepareBuilder();
        result.driverName_ = "";
        return this;
      }

      public string DriverParameter {
        get { return result.DriverParameter; }
        set { SetDriverParameter(value); }
      }
      public Builder SetDriverParameter(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.driverParameter_ = value;
        return this;
      }
      public Builder ClearDriverParameter() {
        PrepareBuilder();
        result.driverParameter_ = "";
        return this;
      }

      public int Probability {
        get { return result.Probability; }
        set { SetProbability(value); }
      }
      public Builder SetProbability(int value) {
        PrepareBuilder();
        result.probability_ = value;
        return this;
      }
      public Builder ClearProbability() {
        PrepareBuilder();
        result.probability_ = 0;
        return this;
      }

      public string SoundName {
        get { return result.SoundName; }
        set { SetSoundName(value); }
      }
      public Builder SetSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.soundName_ = value;
        return this;
      }
      public Builder ClearSoundName() {
        PrepareBuilder();
        result.soundName_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StringData : pb::GeneratedMessage<StringData, StringData.Builder> {
    public StringData() { }
    private static readonly StringData defaultInstance = new StringData().MakeReadOnly();
    private static readonly string[] _stringDataFieldNames = new string[] { "id", "text" };
    private static readonly uint[] _stringDataFieldTags = new uint[] { 10, 18 };
    public static StringData DefaultInstance {
      get { return defaultInstance; }
    }

    public override StringData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StringData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_StringData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StringData, StringData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_StringData__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int TextFieldNumber = 2;
    private string text_ = "";
    public string Text {
      get { return text_; }
      set { text_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stringDataFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[0], Id);
      }
      if (Text != "") {
        output.WriteString(2, field_names[1], Text);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Text != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StringData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StringData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StringData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StringData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StringData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StringData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StringData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StringData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StringData result;

      private StringData PrepareBuilder() {
        if (resultIsReadOnly) {
          StringData original = result;
          result = new StringData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override StringData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.StringData.Descriptor; }
      }

      public override StringData DefaultInstanceForType {
        get { return global::Master.StringData.DefaultInstance; }
      }

      public override StringData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StringData) {
          return MergeFrom((StringData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StringData other) {
        if (other == global::Master.StringData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Text != "") {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stringDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stringDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.text_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.text_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SoloDuel : pb::GeneratedMessage<SoloDuel, SoloDuel.Builder> {
    public SoloDuel() { }
    private static readonly SoloDuel defaultInstance = new SoloDuel().MakeReadOnly();
    private static readonly string[] _soloDuelFieldNames = new string[] { "attack", "defense", "enemy_no", "exp", "fang_id", "hp", "level", "stage_id" };
    private static readonly uint[] _soloDuelFieldTags = new uint[] { 48, 56, 16, 64, 32, 40, 24, 8 };
    public static SoloDuel DefaultInstance {
      get { return defaultInstance; }
    }

    public override SoloDuel DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override SoloDuel ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_SoloDuel__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SoloDuel, SoloDuel.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_SoloDuel__FieldAccessorTable; }
    }

    public const int StageIdFieldNumber = 1;
    private int stageId_;
    public int StageId {
      get { return stageId_; }
      set { stageId_ = value; }
    }

    public const int EnemyNoFieldNumber = 2;
    private int enemyNo_;
    public int EnemyNo {
      get { return enemyNo_; }
      set { enemyNo_ = value; }
    }

    public const int LevelFieldNumber = 3;
    private int level_;
    public int Level {
      get { return level_; }
      set { level_ = value; }
    }

    public const int FangIdFieldNumber = 4;
    private int fangId_;
    public int FangId {
      get { return fangId_; }
      set { fangId_ = value; }
    }

    public const int HpFieldNumber = 5;
    private int hp_;
    public int Hp {
      get { return hp_; }
      set { hp_ = value; }
    }

    public const int AttackFieldNumber = 6;
    private int attack_;
    public int Attack {
      get { return attack_; }
      set { attack_ = value; }
    }

    public const int DefenseFieldNumber = 7;
    private int defense_;
    public int Defense {
      get { return defense_; }
      set { defense_ = value; }
    }

    public const int ExpFieldNumber = 8;
    private int exp_;
    public int Exp {
      get { return exp_; }
      set { exp_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _soloDuelFieldNames;
      if (StageId != 0) {
        output.WriteInt32(1, field_names[7], StageId);
      }
      if (EnemyNo != 0) {
        output.WriteInt32(2, field_names[2], EnemyNo);
      }
      if (Level != 0) {
        output.WriteInt32(3, field_names[6], Level);
      }
      if (FangId != 0) {
        output.WriteInt32(4, field_names[4], FangId);
      }
      if (Hp != 0) {
        output.WriteInt32(5, field_names[5], Hp);
      }
      if (Attack != 0) {
        output.WriteInt32(6, field_names[0], Attack);
      }
      if (Defense != 0) {
        output.WriteInt32(7, field_names[1], Defense);
      }
      if (Exp != 0) {
        output.WriteInt32(8, field_names[3], Exp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (StageId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, StageId);
      }
      if (EnemyNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, EnemyNo);
      }
      if (Level != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
      }
      if (FangId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, FangId);
      }
      if (Hp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Hp);
      }
      if (Attack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Attack);
      }
      if (Defense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Defense);
      }
      if (Exp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Exp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SoloDuel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SoloDuel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SoloDuel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SoloDuel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SoloDuel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SoloDuel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SoloDuel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SoloDuel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SoloDuel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SoloDuel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SoloDuel MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SoloDuel prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SoloDuel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SoloDuel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private SoloDuel result;

      private SoloDuel PrepareBuilder() {
        if (resultIsReadOnly) {
          SoloDuel original = result;
          result = new SoloDuel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override SoloDuel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.SoloDuel.Descriptor; }
      }

      public override SoloDuel DefaultInstanceForType {
        get { return global::Master.SoloDuel.DefaultInstance; }
      }

      public override SoloDuel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SoloDuel) {
          return MergeFrom((SoloDuel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(SoloDuel other) {
        if (other == global::Master.SoloDuel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.StageId != 0) {
          StageId = other.StageId;
        }
        if (other.EnemyNo != 0) {
          EnemyNo = other.EnemyNo;
        }
        if (other.Level != 0) {
          Level = other.Level;
        }
        if (other.FangId != 0) {
          FangId = other.FangId;
        }
        if (other.Hp != 0) {
          Hp = other.Hp;
        }
        if (other.Attack != 0) {
          Attack = other.Attack;
        }
        if (other.Defense != 0) {
          Defense = other.Defense;
        }
        if (other.Exp != 0) {
          Exp = other.Exp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_soloDuelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _soloDuelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.stageId_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.enemyNo_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.level_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.fangId_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.hp_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.attack_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.defense_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.exp_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int StageId {
        get { return result.StageId; }
        set { SetStageId(value); }
      }
      public Builder SetStageId(int value) {
        PrepareBuilder();
        result.stageId_ = value;
        return this;
      }
      public Builder ClearStageId() {
        PrepareBuilder();
        result.stageId_ = 0;
        return this;
      }

      public int EnemyNo {
        get { return result.EnemyNo; }
        set { SetEnemyNo(value); }
      }
      public Builder SetEnemyNo(int value) {
        PrepareBuilder();
        result.enemyNo_ = value;
        return this;
      }
      public Builder ClearEnemyNo() {
        PrepareBuilder();
        result.enemyNo_ = 0;
        return this;
      }

      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.level_ = 0;
        return this;
      }

      public int FangId {
        get { return result.FangId; }
        set { SetFangId(value); }
      }
      public Builder SetFangId(int value) {
        PrepareBuilder();
        result.fangId_ = value;
        return this;
      }
      public Builder ClearFangId() {
        PrepareBuilder();
        result.fangId_ = 0;
        return this;
      }

      public int Hp {
        get { return result.Hp; }
        set { SetHp(value); }
      }
      public Builder SetHp(int value) {
        PrepareBuilder();
        result.hp_ = value;
        return this;
      }
      public Builder ClearHp() {
        PrepareBuilder();
        result.hp_ = 0;
        return this;
      }

      public int Attack {
        get { return result.Attack; }
        set { SetAttack(value); }
      }
      public Builder SetAttack(int value) {
        PrepareBuilder();
        result.attack_ = value;
        return this;
      }
      public Builder ClearAttack() {
        PrepareBuilder();
        result.attack_ = 0;
        return this;
      }

      public int Defense {
        get { return result.Defense; }
        set { SetDefense(value); }
      }
      public Builder SetDefense(int value) {
        PrepareBuilder();
        result.defense_ = value;
        return this;
      }
      public Builder ClearDefense() {
        PrepareBuilder();
        result.defense_ = 0;
        return this;
      }

      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.exp_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoomInfo : pb::GeneratedMessage<RoomInfo, RoomInfo.Builder> {
    public RoomInfo() { }
    private static readonly RoomInfo defaultInstance = new RoomInfo().MakeReadOnly();
    private static readonly string[] _roomInfoFieldNames = new string[] { "attribute", "direction", "height", "id", "width" };
    private static readonly uint[] _roomInfoFieldTags = new uint[] { 32, 40, 24, 10, 16 };
    public static RoomInfo DefaultInstance {
      get { return defaultInstance; }
    }

    public override RoomInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override RoomInfo ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_RoomInfo__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<RoomInfo, RoomInfo.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_RoomInfo__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int WidthFieldNumber = 2;
    private int width_;
    public int Width {
      get { return width_; }
      set { width_ = value; }
    }

    public const int HeightFieldNumber = 3;
    private int height_;
    public int Height {
      get { return height_; }
      set { height_ = value; }
    }

    public const int AttributeFieldNumber = 4;
    private int attribute_;
    public int Attribute {
      get { return attribute_; }
      set { attribute_ = value; }
    }

    public const int DirectionFieldNumber = 5;
    private int direction_;
    public int Direction {
      get { return direction_; }
      set { direction_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roomInfoFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[3], Id);
      }
      if (Width != 0) {
        output.WriteInt32(2, field_names[4], Width);
      }
      if (Height != 0) {
        output.WriteInt32(3, field_names[2], Height);
      }
      if (Attribute != 0) {
        output.WriteInt32(4, field_names[0], Attribute);
      }
      if (Direction != 0) {
        output.WriteInt32(5, field_names[1], Direction);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Width != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Width);
      }
      if (Height != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Height);
      }
      if (Attribute != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Attribute);
      }
      if (Direction != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Direction);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RoomInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoomInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoomInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoomInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoomInfo MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoomInfo prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RoomInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoomInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private RoomInfo result;

      private RoomInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          RoomInfo original = result;
          result = new RoomInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override RoomInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.RoomInfo.Descriptor; }
      }

      public override RoomInfo DefaultInstanceForType {
        get { return global::Master.RoomInfo.DefaultInstance; }
      }

      public override RoomInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoomInfo) {
          return MergeFrom((RoomInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(RoomInfo other) {
        if (other == global::Master.RoomInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Width != 0) {
          Width = other.Width;
        }
        if (other.Height != 0) {
          Height = other.Height;
        }
        if (other.Attribute != 0) {
          Attribute = other.Attribute;
        }
        if (other.Direction != 0) {
          Direction = other.Direction;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roomInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roomInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.width_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.height_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.attribute_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.direction_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.width_ = 0;
        return this;
      }

      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.height_ = 0;
        return this;
      }

      public int Attribute {
        get { return result.Attribute; }
        set { SetAttribute(value); }
      }
      public Builder SetAttribute(int value) {
        PrepareBuilder();
        result.attribute_ = value;
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_ = 0;
        return this;
      }

      public int Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(int value) {
        PrepareBuilder();
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.direction_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnemyAnim : pb::GeneratedMessage<EnemyAnim, EnemyAnim.Builder> {
    public EnemyAnim() { }
    private static readonly EnemyAnim defaultInstance = new EnemyAnim().MakeReadOnly();
    private static readonly string[] _enemyAnimFieldNames = new string[] { "attack_anim_id", "attack_distance_id", "duration", "height_offset", "id", "special_anim_id", "special_distance_id" };
    private static readonly uint[] _enemyAnimFieldTags = new uint[] { 24, 16, 53, 56, 8, 40, 32 };
    public static EnemyAnim DefaultInstance {
      get { return defaultInstance; }
    }

    public override EnemyAnim DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override EnemyAnim ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_EnemyAnim__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<EnemyAnim, EnemyAnim.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_EnemyAnim__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int AttackDistanceIdFieldNumber = 2;
    private int attackDistanceId_;
    public int AttackDistanceId {
      get { return attackDistanceId_; }
      set { attackDistanceId_ = value; }
    }

    public const int AttackAnimIdFieldNumber = 3;
    private int attackAnimId_;
    public int AttackAnimId {
      get { return attackAnimId_; }
      set { attackAnimId_ = value; }
    }

    public const int SpecialDistanceIdFieldNumber = 4;
    private int specialDistanceId_;
    public int SpecialDistanceId {
      get { return specialDistanceId_; }
      set { specialDistanceId_ = value; }
    }

    public const int SpecialAnimIdFieldNumber = 5;
    private int specialAnimId_;
    public int SpecialAnimId {
      get { return specialAnimId_; }
      set { specialAnimId_ = value; }
    }

    public const int DurationFieldNumber = 6;
    private float duration_;
    public float Duration {
      get { return duration_; }
      set { duration_ = value; }
    }

    public const int HeightOffsetFieldNumber = 7;
    private int heightOffset_;
    public int HeightOffset {
      get { return heightOffset_; }
      set { heightOffset_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _enemyAnimFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[4], Id);
      }
      if (AttackDistanceId != 0) {
        output.WriteInt32(2, field_names[1], AttackDistanceId);
      }
      if (AttackAnimId != 0) {
        output.WriteInt32(3, field_names[0], AttackAnimId);
      }
      if (SpecialDistanceId != 0) {
        output.WriteInt32(4, field_names[6], SpecialDistanceId);
      }
      if (SpecialAnimId != 0) {
        output.WriteInt32(5, field_names[5], SpecialAnimId);
      }
      if (Duration != 0F) {
        output.WriteFloat(6, field_names[2], Duration);
      }
      if (HeightOffset != 0) {
        output.WriteInt32(7, field_names[3], HeightOffset);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (AttackDistanceId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AttackDistanceId);
      }
      if (AttackAnimId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, AttackAnimId);
      }
      if (SpecialDistanceId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, SpecialDistanceId);
      }
      if (SpecialAnimId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, SpecialAnimId);
      }
      if (Duration != 0F) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, Duration);
      }
      if (HeightOffset != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, HeightOffset);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EnemyAnim ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnemyAnim ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnim ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnemyAnim ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnim ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnemyAnim ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnim ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EnemyAnim ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EnemyAnim ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnemyAnim ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EnemyAnim MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EnemyAnim prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EnemyAnim, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EnemyAnim cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private EnemyAnim result;

      private EnemyAnim PrepareBuilder() {
        if (resultIsReadOnly) {
          EnemyAnim original = result;
          result = new EnemyAnim();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override EnemyAnim MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.EnemyAnim.Descriptor; }
      }

      public override EnemyAnim DefaultInstanceForType {
        get { return global::Master.EnemyAnim.DefaultInstance; }
      }

      public override EnemyAnim BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EnemyAnim) {
          return MergeFrom((EnemyAnim) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(EnemyAnim other) {
        if (other == global::Master.EnemyAnim.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.AttackDistanceId != 0) {
          AttackDistanceId = other.AttackDistanceId;
        }
        if (other.AttackAnimId != 0) {
          AttackAnimId = other.AttackAnimId;
        }
        if (other.SpecialDistanceId != 0) {
          SpecialDistanceId = other.SpecialDistanceId;
        }
        if (other.SpecialAnimId != 0) {
          SpecialAnimId = other.SpecialAnimId;
        }
        if (other.Duration != 0F) {
          Duration = other.Duration;
        }
        if (other.HeightOffset != 0) {
          HeightOffset = other.HeightOffset;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enemyAnimFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enemyAnimFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.attackDistanceId_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.attackAnimId_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.specialDistanceId_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.specialAnimId_);
              break;
            }
            case 53: {
              input.ReadFloat(ref result.duration_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.heightOffset_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public int AttackDistanceId {
        get { return result.AttackDistanceId; }
        set { SetAttackDistanceId(value); }
      }
      public Builder SetAttackDistanceId(int value) {
        PrepareBuilder();
        result.attackDistanceId_ = value;
        return this;
      }
      public Builder ClearAttackDistanceId() {
        PrepareBuilder();
        result.attackDistanceId_ = 0;
        return this;
      }

      public int AttackAnimId {
        get { return result.AttackAnimId; }
        set { SetAttackAnimId(value); }
      }
      public Builder SetAttackAnimId(int value) {
        PrepareBuilder();
        result.attackAnimId_ = value;
        return this;
      }
      public Builder ClearAttackAnimId() {
        PrepareBuilder();
        result.attackAnimId_ = 0;
        return this;
      }

      public int SpecialDistanceId {
        get { return result.SpecialDistanceId; }
        set { SetSpecialDistanceId(value); }
      }
      public Builder SetSpecialDistanceId(int value) {
        PrepareBuilder();
        result.specialDistanceId_ = value;
        return this;
      }
      public Builder ClearSpecialDistanceId() {
        PrepareBuilder();
        result.specialDistanceId_ = 0;
        return this;
      }

      public int SpecialAnimId {
        get { return result.SpecialAnimId; }
        set { SetSpecialAnimId(value); }
      }
      public Builder SetSpecialAnimId(int value) {
        PrepareBuilder();
        result.specialAnimId_ = value;
        return this;
      }
      public Builder ClearSpecialAnimId() {
        PrepareBuilder();
        result.specialAnimId_ = 0;
        return this;
      }

      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.duration_ = 0F;
        return this;
      }

      public int HeightOffset {
        get { return result.HeightOffset; }
        set { SetHeightOffset(value); }
      }
      public Builder SetHeightOffset(int value) {
        PrepareBuilder();
        result.heightOffset_ = value;
        return this;
      }
      public Builder ClearHeightOffset() {
        PrepareBuilder();
        result.heightOffset_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnemyAnimDistance : pb::GeneratedMessage<EnemyAnimDistance, EnemyAnimDistance.Builder> {
    public EnemyAnimDistance() { }
    private static readonly EnemyAnimDistance defaultInstance = new EnemyAnimDistance().MakeReadOnly();
    private static readonly string[] _enemyAnimDistanceFieldNames = new string[] { "id", "table" };
    private static readonly uint[] _enemyAnimDistanceFieldTags = new uint[] { 8, 18 };
    public static EnemyAnimDistance DefaultInstance {
      get { return defaultInstance; }
    }

    public override EnemyAnimDistance DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override EnemyAnimDistance ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_EnemyAnimDistance__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<EnemyAnimDistance, EnemyAnimDistance.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_EnemyAnimDistance__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int TableFieldNumber = 2;
    private int tableMemoizedSerializedSize;
    private pbc::PopsicleList<int> table_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TableList {
      get { return pbc::Lists.AsReadOnly(table_); }
    }
    public int TableCount {
      get { return table_.Count; }
    }
    public int GetTable(int index) {
      return table_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _enemyAnimDistanceFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (table_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[1], tableMemoizedSerializedSize, table_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      {
        int dataSize = 0;
        foreach (int element in TableList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (table_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        tableMemoizedSerializedSize = dataSize;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EnemyAnimDistance ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnimDistance ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EnemyAnimDistance ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnemyAnimDistance ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EnemyAnimDistance MakeReadOnly() {
      table_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EnemyAnimDistance prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EnemyAnimDistance, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EnemyAnimDistance cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private EnemyAnimDistance result;

      private EnemyAnimDistance PrepareBuilder() {
        if (resultIsReadOnly) {
          EnemyAnimDistance original = result;
          result = new EnemyAnimDistance();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override EnemyAnimDistance MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.EnemyAnimDistance.Descriptor; }
      }

      public override EnemyAnimDistance DefaultInstanceForType {
        get { return global::Master.EnemyAnimDistance.DefaultInstance; }
      }

      public override EnemyAnimDistance BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EnemyAnimDistance) {
          return MergeFrom((EnemyAnimDistance) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(EnemyAnimDistance other) {
        if (other == global::Master.EnemyAnimDistance.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.table_.Count != 0) {
          result.table_.Add(other.table_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enemyAnimDistanceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enemyAnimDistanceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.table_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public pbc::IPopsicleList<int> TableList {
        get { return PrepareBuilder().table_; }
      }
      public int TableCount {
        get { return result.TableCount; }
      }
      public int GetTable(int index) {
        return result.GetTable(index);
      }
      public Builder SetTable(int index, int value) {
        PrepareBuilder();
        result.table_[index] = value;
        return this;
      }
      public Builder AddTable(int value) {
        PrepareBuilder();
        result.table_.Add(value);
        return this;
      }
      public Builder AddRangeTable(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.table_.Add(values);
        return this;
      }
      public Builder ClearTable() {
        PrepareBuilder();
        result.table_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnemyAnimSprite : pb::GeneratedMessage<EnemyAnimSprite, EnemyAnimSprite.Builder> {
    public EnemyAnimSprite() { }
    private static readonly EnemyAnimSprite defaultInstance = new EnemyAnimSprite().MakeReadOnly();
    private static readonly string[] _enemyAnimSpriteFieldNames = new string[] { "id", "table" };
    private static readonly uint[] _enemyAnimSpriteFieldTags = new uint[] { 8, 18 };
    public static EnemyAnimSprite DefaultInstance {
      get { return defaultInstance; }
    }

    public override EnemyAnimSprite DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override EnemyAnimSprite ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_EnemyAnimSprite__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<EnemyAnimSprite, EnemyAnimSprite.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_EnemyAnimSprite__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int TableFieldNumber = 2;
    private pbc::PopsicleList<string> table_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TableList {
      get { return pbc::Lists.AsReadOnly(table_); }
    }
    public int TableCount {
      get { return table_.Count; }
    }
    public string GetTable(int index) {
      return table_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _enemyAnimSpriteFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (table_.Count > 0) {
        output.WriteStringArray(2, field_names[1], table_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      {
        int dataSize = 0;
        foreach (string element in TableList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * table_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EnemyAnimSprite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EnemyAnimSprite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EnemyAnimSprite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnemyAnimSprite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EnemyAnimSprite MakeReadOnly() {
      table_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EnemyAnimSprite prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EnemyAnimSprite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EnemyAnimSprite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private EnemyAnimSprite result;

      private EnemyAnimSprite PrepareBuilder() {
        if (resultIsReadOnly) {
          EnemyAnimSprite original = result;
          result = new EnemyAnimSprite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override EnemyAnimSprite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.EnemyAnimSprite.Descriptor; }
      }

      public override EnemyAnimSprite DefaultInstanceForType {
        get { return global::Master.EnemyAnimSprite.DefaultInstance; }
      }

      public override EnemyAnimSprite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EnemyAnimSprite) {
          return MergeFrom((EnemyAnimSprite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(EnemyAnimSprite other) {
        if (other == global::Master.EnemyAnimSprite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.table_.Count != 0) {
          result.table_.Add(other.table_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enemyAnimSpriteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enemyAnimSpriteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.table_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public pbc::IPopsicleList<string> TableList {
        get { return PrepareBuilder().table_; }
      }
      public int TableCount {
        get { return result.TableCount; }
      }
      public string GetTable(int index) {
        return result.GetTable(index);
      }
      public Builder SetTable(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.table_[index] = value;
        return this;
      }
      public Builder AddTable(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.table_.Add(value);
        return this;
      }
      public Builder AddRangeTable(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.table_.Add(values);
        return this;
      }
      public Builder ClearTable() {
        PrepareBuilder();
        result.table_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ArmamentTemplate : pb::GeneratedMessage<ArmamentTemplate, ArmamentTemplate.Builder> {
    public ArmamentTemplate() { }
    private static readonly ArmamentTemplate defaultInstance = new ArmamentTemplate().MakeReadOnly();
    private static readonly string[] _armamentTemplateFieldNames = new string[] { "base_attack", "base_defense", "base_hp", "gold", "hit_effect", "id", "image_id", "kind", "max_level", "name", "open_slot_rate", "point", "property", "rarity", "soul_pattern", "status_distribute" };
    private static readonly uint[] _armamentTemplateFieldTags = new uint[] { 64, 72, 56, 104, 130, 8, 120, 34, 48, 18, 88, 96, 42, 24, 82, 112 };
    public static ArmamentTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override ArmamentTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ArmamentTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_ArmamentTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ArmamentTemplate, ArmamentTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_ArmamentTemplate__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int RarityFieldNumber = 3;
    private int rarity_;
    public int Rarity {
      get { return rarity_; }
      set { rarity_ = value; }
    }

    public const int KindFieldNumber = 4;
    private string kind_ = "";
    public string Kind {
      get { return kind_; }
      set { kind_ = value; }
    }

    public const int PropertyFieldNumber = 5;
    private string property_ = "";
    public string Property {
      get { return property_; }
      set { property_ = value; }
    }

    public const int MaxLevelFieldNumber = 6;
    private int maxLevel_;
    public int MaxLevel {
      get { return maxLevel_; }
      set { maxLevel_ = value; }
    }

    public const int BaseHpFieldNumber = 7;
    private int baseHp_;
    public int BaseHp {
      get { return baseHp_; }
      set { baseHp_ = value; }
    }

    public const int BaseAttackFieldNumber = 8;
    private int baseAttack_;
    public int BaseAttack {
      get { return baseAttack_; }
      set { baseAttack_ = value; }
    }

    public const int BaseDefenseFieldNumber = 9;
    private int baseDefense_;
    public int BaseDefense {
      get { return baseDefense_; }
      set { baseDefense_ = value; }
    }

    public const int SoulPatternFieldNumber = 10;
    private string soulPattern_ = "";
    public string SoulPattern {
      get { return soulPattern_; }
      set { soulPattern_ = value; }
    }

    public const int OpenSlotRateFieldNumber = 11;
    private int openSlotRate_;
    public int OpenSlotRate {
      get { return openSlotRate_; }
      set { openSlotRate_ = value; }
    }

    public const int PointFieldNumber = 12;
    private int point_;
    public int Point {
      get { return point_; }
      set { point_ = value; }
    }

    public const int GoldFieldNumber = 13;
    private int gold_;
    public int Gold {
      get { return gold_; }
      set { gold_ = value; }
    }

    public const int StatusDistributeFieldNumber = 14;
    private int statusDistribute_;
    public int StatusDistribute {
      get { return statusDistribute_; }
      set { statusDistribute_ = value; }
    }

    public const int ImageIdFieldNumber = 15;
    private int imageId_;
    public int ImageId {
      get { return imageId_; }
      set { imageId_ = value; }
    }

    public const int HitEffectFieldNumber = 16;
    private string hitEffect_ = "";
    public string HitEffect {
      get { return hitEffect_; }
      set { hitEffect_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _armamentTemplateFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[5], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[9], Name);
      }
      if (Rarity != 0) {
        output.WriteInt32(3, field_names[13], Rarity);
      }
      if (Kind != "") {
        output.WriteString(4, field_names[7], Kind);
      }
      if (Property != "") {
        output.WriteString(5, field_names[12], Property);
      }
      if (MaxLevel != 0) {
        output.WriteInt32(6, field_names[8], MaxLevel);
      }
      if (BaseHp != 0) {
        output.WriteInt32(7, field_names[2], BaseHp);
      }
      if (BaseAttack != 0) {
        output.WriteInt32(8, field_names[0], BaseAttack);
      }
      if (BaseDefense != 0) {
        output.WriteInt32(9, field_names[1], BaseDefense);
      }
      if (SoulPattern != "") {
        output.WriteString(10, field_names[14], SoulPattern);
      }
      if (OpenSlotRate != 0) {
        output.WriteInt32(11, field_names[10], OpenSlotRate);
      }
      if (Point != 0) {
        output.WriteInt32(12, field_names[11], Point);
      }
      if (Gold != 0) {
        output.WriteInt32(13, field_names[3], Gold);
      }
      if (StatusDistribute != 0) {
        output.WriteInt32(14, field_names[15], StatusDistribute);
      }
      if (ImageId != 0) {
        output.WriteInt32(15, field_names[6], ImageId);
      }
      if (HitEffect != "") {
        output.WriteString(16, field_names[4], HitEffect);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Rarity != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Rarity);
      }
      if (Kind != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Kind);
      }
      if (Property != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Property);
      }
      if (MaxLevel != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, MaxLevel);
      }
      if (BaseHp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, BaseHp);
      }
      if (BaseAttack != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, BaseAttack);
      }
      if (BaseDefense != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, BaseDefense);
      }
      if (SoulPattern != "") {
        size += pb::CodedOutputStream.ComputeStringSize(10, SoulPattern);
      }
      if (OpenSlotRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, OpenSlotRate);
      }
      if (Point != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, Point);
      }
      if (Gold != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Gold);
      }
      if (StatusDistribute != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, StatusDistribute);
      }
      if (ImageId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, ImageId);
      }
      if (HitEffect != "") {
        size += pb::CodedOutputStream.ComputeStringSize(16, HitEffect);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ArmamentTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ArmamentTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ArmamentTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArmamentTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ArmamentTemplate MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ArmamentTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ArmamentTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ArmamentTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ArmamentTemplate result;

      private ArmamentTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          ArmamentTemplate original = result;
          result = new ArmamentTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override ArmamentTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.ArmamentTemplate.Descriptor; }
      }

      public override ArmamentTemplate DefaultInstanceForType {
        get { return global::Master.ArmamentTemplate.DefaultInstance; }
      }

      public override ArmamentTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ArmamentTemplate) {
          return MergeFrom((ArmamentTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ArmamentTemplate other) {
        if (other == global::Master.ArmamentTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Rarity != 0) {
          Rarity = other.Rarity;
        }
        if (other.Kind != "") {
          Kind = other.Kind;
        }
        if (other.Property != "") {
          Property = other.Property;
        }
        if (other.MaxLevel != 0) {
          MaxLevel = other.MaxLevel;
        }
        if (other.BaseHp != 0) {
          BaseHp = other.BaseHp;
        }
        if (other.BaseAttack != 0) {
          BaseAttack = other.BaseAttack;
        }
        if (other.BaseDefense != 0) {
          BaseDefense = other.BaseDefense;
        }
        if (other.SoulPattern != "") {
          SoulPattern = other.SoulPattern;
        }
        if (other.OpenSlotRate != 0) {
          OpenSlotRate = other.OpenSlotRate;
        }
        if (other.Point != 0) {
          Point = other.Point;
        }
        if (other.Gold != 0) {
          Gold = other.Gold;
        }
        if (other.StatusDistribute != 0) {
          StatusDistribute = other.StatusDistribute;
        }
        if (other.ImageId != 0) {
          ImageId = other.ImageId;
        }
        if (other.HitEffect != "") {
          HitEffect = other.HitEffect;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_armamentTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _armamentTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.rarity_);
              break;
            }
            case 34: {
              input.ReadString(ref result.kind_);
              break;
            }
            case 42: {
              input.ReadString(ref result.property_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.maxLevel_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.baseHp_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.baseAttack_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.baseDefense_);
              break;
            }
            case 82: {
              input.ReadString(ref result.soulPattern_);
              break;
            }
            case 88: {
              input.ReadInt32(ref result.openSlotRate_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.point_);
              break;
            }
            case 104: {
              input.ReadInt32(ref result.gold_);
              break;
            }
            case 112: {
              input.ReadInt32(ref result.statusDistribute_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.imageId_);
              break;
            }
            case 130: {
              input.ReadString(ref result.hitEffect_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int Rarity {
        get { return result.Rarity; }
        set { SetRarity(value); }
      }
      public Builder SetRarity(int value) {
        PrepareBuilder();
        result.rarity_ = value;
        return this;
      }
      public Builder ClearRarity() {
        PrepareBuilder();
        result.rarity_ = 0;
        return this;
      }

      public string Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        PrepareBuilder();
        result.kind_ = "";
        return this;
      }

      public string Property {
        get { return result.Property; }
        set { SetProperty(value); }
      }
      public Builder SetProperty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.property_ = value;
        return this;
      }
      public Builder ClearProperty() {
        PrepareBuilder();
        result.property_ = "";
        return this;
      }

      public int MaxLevel {
        get { return result.MaxLevel; }
        set { SetMaxLevel(value); }
      }
      public Builder SetMaxLevel(int value) {
        PrepareBuilder();
        result.maxLevel_ = value;
        return this;
      }
      public Builder ClearMaxLevel() {
        PrepareBuilder();
        result.maxLevel_ = 0;
        return this;
      }

      public int BaseHp {
        get { return result.BaseHp; }
        set { SetBaseHp(value); }
      }
      public Builder SetBaseHp(int value) {
        PrepareBuilder();
        result.baseHp_ = value;
        return this;
      }
      public Builder ClearBaseHp() {
        PrepareBuilder();
        result.baseHp_ = 0;
        return this;
      }

      public int BaseAttack {
        get { return result.BaseAttack; }
        set { SetBaseAttack(value); }
      }
      public Builder SetBaseAttack(int value) {
        PrepareBuilder();
        result.baseAttack_ = value;
        return this;
      }
      public Builder ClearBaseAttack() {
        PrepareBuilder();
        result.baseAttack_ = 0;
        return this;
      }

      public int BaseDefense {
        get { return result.BaseDefense; }
        set { SetBaseDefense(value); }
      }
      public Builder SetBaseDefense(int value) {
        PrepareBuilder();
        result.baseDefense_ = value;
        return this;
      }
      public Builder ClearBaseDefense() {
        PrepareBuilder();
        result.baseDefense_ = 0;
        return this;
      }

      public string SoulPattern {
        get { return result.SoulPattern; }
        set { SetSoulPattern(value); }
      }
      public Builder SetSoulPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.soulPattern_ = value;
        return this;
      }
      public Builder ClearSoulPattern() {
        PrepareBuilder();
        result.soulPattern_ = "";
        return this;
      }

      public int OpenSlotRate {
        get { return result.OpenSlotRate; }
        set { SetOpenSlotRate(value); }
      }
      public Builder SetOpenSlotRate(int value) {
        PrepareBuilder();
        result.openSlotRate_ = value;
        return this;
      }
      public Builder ClearOpenSlotRate() {
        PrepareBuilder();
        result.openSlotRate_ = 0;
        return this;
      }

      public int Point {
        get { return result.Point; }
        set { SetPoint(value); }
      }
      public Builder SetPoint(int value) {
        PrepareBuilder();
        result.point_ = value;
        return this;
      }
      public Builder ClearPoint() {
        PrepareBuilder();
        result.point_ = 0;
        return this;
      }

      public int Gold {
        get { return result.Gold; }
        set { SetGold(value); }
      }
      public Builder SetGold(int value) {
        PrepareBuilder();
        result.gold_ = value;
        return this;
      }
      public Builder ClearGold() {
        PrepareBuilder();
        result.gold_ = 0;
        return this;
      }

      public int StatusDistribute {
        get { return result.StatusDistribute; }
        set { SetStatusDistribute(value); }
      }
      public Builder SetStatusDistribute(int value) {
        PrepareBuilder();
        result.statusDistribute_ = value;
        return this;
      }
      public Builder ClearStatusDistribute() {
        PrepareBuilder();
        result.statusDistribute_ = 0;
        return this;
      }

      public int ImageId {
        get { return result.ImageId; }
        set { SetImageId(value); }
      }
      public Builder SetImageId(int value) {
        PrepareBuilder();
        result.imageId_ = value;
        return this;
      }
      public Builder ClearImageId() {
        PrepareBuilder();
        result.imageId_ = 0;
        return this;
      }

      public string HitEffect {
        get { return result.HitEffect; }
        set { SetHitEffect(value); }
      }
      public Builder SetHitEffect(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hitEffect_ = value;
        return this;
      }
      public Builder ClearHitEffect() {
        PrepareBuilder();
        result.hitEffect_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AbilityTemplate : pb::GeneratedMessage<AbilityTemplate, AbilityTemplate.Builder> {
    public AbilityTemplate() { }
    private static readonly AbilityTemplate defaultInstance = new AbilityTemplate().MakeReadOnly();
    private static readonly string[] _abilityTemplateFieldNames = new string[] { "base_num", "desc", "desc2", "id", "json", "kind", "log_text_id", "max_level", "max_num", "name", "param", "rarity", "special", "turn", "type" };
    private static readonly uint[] _abilityTemplateFieldTags = new uint[] { 61, 82, 90, 8, 130, 138, 114, 72, 69, 18, 104, 24, 96, 120, 34 };
    public static AbilityTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public override AbilityTemplate DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override AbilityTemplate ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_AbilityTemplate__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AbilityTemplate, AbilityTemplate.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_AbilityTemplate__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Special {
        NONE_TYPE = 0,
        ATTACK_UP = 1,
        ON_ATTACK = 2,
        ON_KILLED = 3,
        ATTACK_UP_ABS = 4,
        DEFENSE_UP = 11,
        GUARD = 12,
        PROTECT = 13,
        ON_DAMAGE = 14,
        DEFENSE_UP_ABS = 15,
      }

      public enum Param {
        NONE_TARGET = 0,
        FIRE = 1,
        WATER = 2,
        TREE = 3,
        LIGHT = 4,
        DARK = 5,
        DEMON = 6,
        GOD = 7,
        DEMIHUMAN = 8,
        DRAGON = 9,
        SPIRIT = 10,
        HEAL = 11,
        BURST = 12,
        CHARGE_SKILLL = 13,
        SLEEP = 14,
        CONFUSE = 15,
        BLIND = 16,
        BIND = 17,
        POISON = 18,
        ACID = 19,
        SLOW = 20,
        SLEEP_PARALYSIS = 21,
        ALL = 22,
      }

    }
    #endregion

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int RarityFieldNumber = 3;
    private int rarity_;
    public int Rarity {
      get { return rarity_; }
      set { rarity_ = value; }
    }

    public const int TypeFieldNumber = 4;
    private string type_ = "";
    public string Type {
      get { return type_; }
      set { type_ = value; }
    }

    public const int BaseNumFieldNumber = 7;
    private float baseNum_;
    public float BaseNum {
      get { return baseNum_; }
      set { baseNum_ = value; }
    }

    public const int MaxNumFieldNumber = 8;
    private float maxNum_;
    public float MaxNum {
      get { return maxNum_; }
      set { maxNum_ = value; }
    }

    public const int MaxLevelFieldNumber = 9;
    private int maxLevel_;
    public int MaxLevel {
      get { return maxLevel_; }
      set { maxLevel_ = value; }
    }

    public const int DescFieldNumber = 10;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set { desc_ = value; }
    }

    public const int Desc2FieldNumber = 11;
    private string desc2_ = "";
    public string Desc2 {
      get { return desc2_; }
      set { desc2_ = value; }
    }

    public const int SpecialFieldNumber = 12;
    private global::Master.AbilityTemplate.Types.Special special_ = global::Master.AbilityTemplate.Types.Special.NONE_TYPE;
    public global::Master.AbilityTemplate.Types.Special Special {
      get { return special_; }
    }

    public const int ParamFieldNumber = 13;
    private global::Master.AbilityTemplate.Types.Param param_ = global::Master.AbilityTemplate.Types.Param.NONE_TARGET;
    public global::Master.AbilityTemplate.Types.Param Param {
      get { return param_; }
    }

    public const int LogTextIdFieldNumber = 14;
    private string logTextId_ = "";
    public string LogTextId {
      get { return logTextId_; }
      set { logTextId_ = value; }
    }

    public const int TurnFieldNumber = 15;
    private int turn_;
    public int Turn {
      get { return turn_; }
      set { turn_ = value; }
    }

    public const int JsonFieldNumber = 16;
    private string json_ = "";
    public string Json {
      get { return json_; }
      set { json_ = value; }
    }

    public const int KindFieldNumber = 17;
    private string kind_ = "";
    public string Kind {
      get { return kind_; }
      set { kind_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _abilityTemplateFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[3], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[9], Name);
      }
      if (Rarity != 0) {
        output.WriteInt32(3, field_names[11], Rarity);
      }
      if (Type != "") {
        output.WriteString(4, field_names[14], Type);
      }
      if (BaseNum != 0F) {
        output.WriteFloat(7, field_names[0], BaseNum);
      }
      if (MaxNum != 0F) {
        output.WriteFloat(8, field_names[8], MaxNum);
      }
      if (MaxLevel != 0) {
        output.WriteInt32(9, field_names[7], MaxLevel);
      }
      if (Desc != "") {
        output.WriteString(10, field_names[1], Desc);
      }
      if (Desc2 != "") {
        output.WriteString(11, field_names[2], Desc2);
      }
      if (Special != global::Master.AbilityTemplate.Types.Special.NONE_TYPE) {
        output.WriteEnum(12, field_names[12], (int) Special, Special);
      }
      if (Param != global::Master.AbilityTemplate.Types.Param.NONE_TARGET) {
        output.WriteEnum(13, field_names[10], (int) Param, Param);
      }
      if (LogTextId != "") {
        output.WriteString(14, field_names[6], LogTextId);
      }
      if (Turn != 0) {
        output.WriteInt32(15, field_names[13], Turn);
      }
      if (Json != "") {
        output.WriteString(16, field_names[4], Json);
      }
      if (Kind != "") {
        output.WriteString(17, field_names[5], Kind);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Rarity != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Rarity);
      }
      if (Type != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Type);
      }
      if (BaseNum != 0F) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, BaseNum);
      }
      if (MaxNum != 0F) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, MaxNum);
      }
      if (MaxLevel != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, MaxLevel);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(10, Desc);
      }
      if (Desc2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, Desc2);
      }
      if (Special != global::Master.AbilityTemplate.Types.Special.NONE_TYPE) {
        size += pb::CodedOutputStream.ComputeEnumSize(12, (int) Special);
      }
      if (Param != global::Master.AbilityTemplate.Types.Param.NONE_TARGET) {
        size += pb::CodedOutputStream.ComputeEnumSize(13, (int) Param);
      }
      if (LogTextId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(14, LogTextId);
      }
      if (Turn != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, Turn);
      }
      if (Json != "") {
        size += pb::CodedOutputStream.ComputeStringSize(16, Json);
      }
      if (Kind != "") {
        size += pb::CodedOutputStream.ComputeStringSize(17, Kind);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AbilityTemplate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AbilityTemplate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AbilityTemplate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AbilityTemplate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AbilityTemplate MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AbilityTemplate prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AbilityTemplate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AbilityTemplate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private AbilityTemplate result;

      private AbilityTemplate PrepareBuilder() {
        if (resultIsReadOnly) {
          AbilityTemplate original = result;
          result = new AbilityTemplate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override AbilityTemplate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.AbilityTemplate.Descriptor; }
      }

      public override AbilityTemplate DefaultInstanceForType {
        get { return global::Master.AbilityTemplate.DefaultInstance; }
      }

      public override AbilityTemplate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AbilityTemplate) {
          return MergeFrom((AbilityTemplate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(AbilityTemplate other) {
        if (other == global::Master.AbilityTemplate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.Rarity != 0) {
          Rarity = other.Rarity;
        }
        if (other.Type != "") {
          Type = other.Type;
        }
        if (other.BaseNum != 0F) {
          BaseNum = other.BaseNum;
        }
        if (other.MaxNum != 0F) {
          MaxNum = other.MaxNum;
        }
        if (other.MaxLevel != 0) {
          MaxLevel = other.MaxLevel;
        }
        if (other.Desc != "") {
          Desc = other.Desc;
        }
        if (other.Desc2 != "") {
          Desc2 = other.Desc2;
        }
        if (other.Special != global::Master.AbilityTemplate.Types.Special.NONE_TYPE) {
          Special = other.Special;
        }
        if (other.Param != global::Master.AbilityTemplate.Types.Param.NONE_TARGET) {
          Param = other.Param;
        }
        if (other.LogTextId != "") {
          LogTextId = other.LogTextId;
        }
        if (other.Turn != 0) {
          Turn = other.Turn;
        }
        if (other.Json != "") {
          Json = other.Json;
        }
        if (other.Kind != "") {
          Kind = other.Kind;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_abilityTemplateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _abilityTemplateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.rarity_);
              break;
            }
            case 34: {
              input.ReadString(ref result.type_);
              break;
            }
            case 61: {
              input.ReadFloat(ref result.baseNum_);
              break;
            }
            case 69: {
              input.ReadFloat(ref result.maxNum_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.maxLevel_);
              break;
            }
            case 82: {
              input.ReadString(ref result.desc_);
              break;
            }
            case 90: {
              input.ReadString(ref result.desc2_);
              break;
            }
            case 96: {
              object unknown;
              if(input.ReadEnum(ref result.special_, out unknown)) {
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(12, (ulong)(int)unknown);
              }
              break;
            }
            case 104: {
              object unknown;
              if(input.ReadEnum(ref result.param_, out unknown)) {
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(13, (ulong)(int)unknown);
              }
              break;
            }
            case 114: {
              input.ReadString(ref result.logTextId_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.turn_);
              break;
            }
            case 130: {
              input.ReadString(ref result.json_);
              break;
            }
            case 138: {
              input.ReadString(ref result.kind_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int Rarity {
        get { return result.Rarity; }
        set { SetRarity(value); }
      }
      public Builder SetRarity(int value) {
        PrepareBuilder();
        result.rarity_ = value;
        return this;
      }
      public Builder ClearRarity() {
        PrepareBuilder();
        result.rarity_ = 0;
        return this;
      }

      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.type_ = "";
        return this;
      }

      public float BaseNum {
        get { return result.BaseNum; }
        set { SetBaseNum(value); }
      }
      public Builder SetBaseNum(float value) {
        PrepareBuilder();
        result.baseNum_ = value;
        return this;
      }
      public Builder ClearBaseNum() {
        PrepareBuilder();
        result.baseNum_ = 0F;
        return this;
      }

      public float MaxNum {
        get { return result.MaxNum; }
        set { SetMaxNum(value); }
      }
      public Builder SetMaxNum(float value) {
        PrepareBuilder();
        result.maxNum_ = value;
        return this;
      }
      public Builder ClearMaxNum() {
        PrepareBuilder();
        result.maxNum_ = 0F;
        return this;
      }

      public int MaxLevel {
        get { return result.MaxLevel; }
        set { SetMaxLevel(value); }
      }
      public Builder SetMaxLevel(int value) {
        PrepareBuilder();
        result.maxLevel_ = value;
        return this;
      }
      public Builder ClearMaxLevel() {
        PrepareBuilder();
        result.maxLevel_ = 0;
        return this;
      }

      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.desc_ = "";
        return this;
      }

      public string Desc2 {
        get { return result.Desc2; }
        set { SetDesc2(value); }
      }
      public Builder SetDesc2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.desc2_ = value;
        return this;
      }
      public Builder ClearDesc2() {
        PrepareBuilder();
        result.desc2_ = "";
        return this;
      }

      public global::Master.AbilityTemplate.Types.Special Special {
        get { return result.Special; }
        set { SetSpecial(value); }
      }
      public Builder SetSpecial(global::Master.AbilityTemplate.Types.Special value) {
        PrepareBuilder();
        result.special_ = value;
        return this;
      }
      public Builder ClearSpecial() {
        PrepareBuilder();
        result.special_ = global::Master.AbilityTemplate.Types.Special.NONE_TYPE;
        return this;
      }

      public global::Master.AbilityTemplate.Types.Param Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(global::Master.AbilityTemplate.Types.Param value) {
        PrepareBuilder();
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.param_ = global::Master.AbilityTemplate.Types.Param.NONE_TARGET;
        return this;
      }

      public string LogTextId {
        get { return result.LogTextId; }
        set { SetLogTextId(value); }
      }
      public Builder SetLogTextId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.logTextId_ = value;
        return this;
      }
      public Builder ClearLogTextId() {
        PrepareBuilder();
        result.logTextId_ = "";
        return this;
      }

      public int Turn {
        get { return result.Turn; }
        set { SetTurn(value); }
      }
      public Builder SetTurn(int value) {
        PrepareBuilder();
        result.turn_ = value;
        return this;
      }
      public Builder ClearTurn() {
        PrepareBuilder();
        result.turn_ = 0;
        return this;
      }

      public string Json {
        get { return result.Json; }
        set { SetJson(value); }
      }
      public Builder SetJson(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.json_ = value;
        return this;
      }
      public Builder ClearJson() {
        PrepareBuilder();
        result.json_ = "";
        return this;
      }

      public string Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        PrepareBuilder();
        result.kind_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapAnimation : pb::GeneratedMessage<MapAnimation, MapAnimation.Builder> {
    public MapAnimation() { }
    private static readonly MapAnimation defaultInstance = new MapAnimation().MakeReadOnly();
    private static readonly string[] _mapAnimationFieldNames = new string[] { "animation", "eventAnimation", "id" };
    private static readonly uint[] _mapAnimationFieldTags = new uint[] { 18, 26, 10 };
    public static MapAnimation DefaultInstance {
      get { return defaultInstance; }
    }

    public override MapAnimation DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override MapAnimation ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_MapAnimation__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<MapAnimation, MapAnimation.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_MapAnimation__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Anim : pb::GeneratedMessage<Anim, Anim.Builder> {
        public Anim() { }
        private static readonly Anim defaultInstance = new Anim().MakeReadOnly();
        private static readonly string[] _animFieldNames = new string[] { "items" };
        private static readonly uint[] _animFieldTags = new uint[] { 10 };
        public static Anim DefaultInstance {
          get { return defaultInstance; }
        }

        public override Anim DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override Anim ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_MapAnimation_Anim__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Anim, Anim.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_MapAnimation_Anim__FieldAccessorTable; }
        }

        public const int ItemsFieldNumber = 1;
        private int itemsMemoizedSerializedSize;
        private pbc::PopsicleList<int> items_ = new pbc::PopsicleList<int>();
        public scg::IList<int> ItemsList {
          get { return pbc::Lists.AsReadOnly(items_); }
        }
        public int ItemsCount {
          get { return items_.Count; }
        }
        public int GetItems(int index) {
          return items_[index];
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _animFieldNames;
          if (items_.Count > 0) {
            output.WritePackedInt32Array(1, field_names[0], itemsMemoizedSerializedSize, items_);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          {
            int dataSize = 0;
            foreach (int element in ItemsList) {
              dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
            }
            size += dataSize;
            if (items_.Count != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
            }
            itemsMemoizedSerializedSize = dataSize;
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Anim ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Anim ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Anim ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Anim ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Anim ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Anim ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Anim ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Anim ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Anim ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Anim ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Anim MakeReadOnly() {
          items_.MakeReadOnly();
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Anim prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Anim, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Anim cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private Anim result;

          private Anim PrepareBuilder() {
            if (resultIsReadOnly) {
              Anim original = result;
              result = new Anim();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override Anim MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.MapAnimation.Types.Anim.Descriptor; }
          }

          public override Anim DefaultInstanceForType {
            get { return global::Master.MapAnimation.Types.Anim.DefaultInstance; }
          }

          public override Anim BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Anim) {
              return MergeFrom((Anim) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(Anim other) {
            if (other == global::Master.MapAnimation.Types.Anim.DefaultInstance) return this;
            PrepareBuilder();
            if (other.items_.Count != 0) {
              result.items_.Add(other.items_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_animFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _animFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10:
                case 8: {
                  input.ReadInt32Array(tag, field_name, result.items_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public pbc::IPopsicleList<int> ItemsList {
            get { return PrepareBuilder().items_; }
          }
          public int ItemsCount {
            get { return result.ItemsCount; }
          }
          public int GetItems(int index) {
            return result.GetItems(index);
          }
          public Builder SetItems(int index, int value) {
            PrepareBuilder();
            result.items_[index] = value;
            return this;
          }
          public Builder AddItems(int value) {
            PrepareBuilder();
            result.items_.Add(value);
            return this;
          }
          public Builder AddRangeItems(scg::IEnumerable<int> values) {
            PrepareBuilder();
            result.items_.Add(values);
            return this;
          }
          public Builder ClearItems() {
            PrepareBuilder();
            result.items_.Clear();
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AnimationEntry : pb::GeneratedMessage<AnimationEntry, AnimationEntry.Builder> {
        public AnimationEntry() { }
        private static readonly AnimationEntry defaultInstance = new AnimationEntry().MakeReadOnly();
        private static readonly string[] _animationEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _animationEntryFieldTags = new uint[] { 8, 18 };
        public static AnimationEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override AnimationEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override AnimationEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_MapAnimation_AnimationEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<AnimationEntry, AnimationEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_MapAnimation_AnimationEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private int key_;
        public int Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private global::Master.MapAnimation.Types.Anim value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public global::Master.MapAnimation.Types.Anim Value {
          get { return value_ ?? global::Master.MapAnimation.Types.Anim.DefaultInstance; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _animationEntryFieldNames;
          if (Key != 0) {
            output.WriteInt32(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteMessage(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
          }
          if (hasValue) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static AnimationEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AnimationEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AnimationEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AnimationEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AnimationEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AnimationEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AnimationEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AnimationEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AnimationEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AnimationEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AnimationEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AnimationEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AnimationEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AnimationEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private AnimationEntry result;

          private AnimationEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              AnimationEntry original = result;
              result = new AnimationEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override AnimationEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.MapAnimation.Types.AnimationEntry.Descriptor; }
          }

          public override AnimationEntry DefaultInstanceForType {
            get { return global::Master.MapAnimation.Types.AnimationEntry.DefaultInstance; }
          }

          public override AnimationEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AnimationEntry) {
              return MergeFrom((AnimationEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(AnimationEntry other) {
            if (other == global::Master.MapAnimation.Types.AnimationEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != 0) {
              Key = other.Key;
            }
            if (other.HasValue) {
              MergeValue(other.Value);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_animationEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _animationEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.key_);
                  break;
                }
                case 18: {
                  global::Master.MapAnimation.Types.Anim.Builder subBuilder = global::Master.MapAnimation.Types.Anim.CreateBuilder();
                  if (result.hasValue) {
                    subBuilder.MergeFrom(Value);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Value = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(int value) {
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = 0;
            return this;
          }

          public bool HasValue {
           get { return result.hasValue; }
          }
          public global::Master.MapAnimation.Types.Anim Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(global::Master.MapAnimation.Types.Anim value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder SetValue(global::Master.MapAnimation.Types.Anim.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = builderForValue.Build();
            return this;
          }
          public Builder MergeValue(global::Master.MapAnimation.Types.Anim value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasValue &&
                result.value_ != global::Master.MapAnimation.Types.Anim.DefaultInstance) {
                result.value_ = global::Master.MapAnimation.Types.Anim.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
            } else {
              result.value_ = value;
            }
            result.hasValue = true;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = null;
            return this;
          }
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EventAnimationEntry : pb::GeneratedMessage<EventAnimationEntry, EventAnimationEntry.Builder> {
        public EventAnimationEntry() { }
        private static readonly EventAnimationEntry defaultInstance = new EventAnimationEntry().MakeReadOnly();
        private static readonly string[] _eventAnimationEntryFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _eventAnimationEntryFieldTags = new uint[] { 8, 18 };
        public static EventAnimationEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public override EventAnimationEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override EventAnimationEntry ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::Master.Master.internal__static_Master_MapAnimation_EventAnimationEntry__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<EventAnimationEntry, EventAnimationEntry.Builder> InternalFieldAccessors {
          get { return global::Master.Master.internal__static_Master_MapAnimation_EventAnimationEntry__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private int key_;
        public int Key {
          get { return key_; }
          set { key_ = value; }
        }

        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private global::Master.MapAnimation.Types.Anim value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public global::Master.MapAnimation.Types.Anim Value {
          get { return value_ ?? global::Master.MapAnimation.Types.Anim.DefaultInstance; }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _eventAnimationEntryFieldNames;
          if (Key != 0) {
            output.WriteInt32(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteMessage(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (Key != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
          }
          if (hasValue) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static EventAnimationEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EventAnimationEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EventAnimationEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EventAnimationEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EventAnimationEntry MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EventAnimationEntry prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<EventAnimationEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EventAnimationEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private EventAnimationEntry result;

          private EventAnimationEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              EventAnimationEntry original = result;
              result = new EventAnimationEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return true; }
          }

          protected override EventAnimationEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Master.MapAnimation.Types.EventAnimationEntry.Descriptor; }
          }

          public override EventAnimationEntry DefaultInstanceForType {
            get { return global::Master.MapAnimation.Types.EventAnimationEntry.DefaultInstance; }
          }

          public override EventAnimationEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is EventAnimationEntry) {
              return MergeFrom((EventAnimationEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(EventAnimationEntry other) {
            if (other == global::Master.MapAnimation.Types.EventAnimationEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.Key != 0) {
              Key = other.Key;
            }
            if (other.HasValue) {
              MergeValue(other.Value);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_eventAnimationEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _eventAnimationEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  input.ReadInt32(ref result.key_);
                  break;
                }
                case 18: {
                  global::Master.MapAnimation.Types.Anim.Builder subBuilder = global::Master.MapAnimation.Types.Anim.CreateBuilder();
                  if (result.hasValue) {
                    subBuilder.MergeFrom(Value);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Value = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public int Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(int value) {
            PrepareBuilder();
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.key_ = 0;
            return this;
          }

          public bool HasValue {
           get { return result.hasValue; }
          }
          public global::Master.MapAnimation.Types.Anim Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(global::Master.MapAnimation.Types.Anim value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder SetValue(global::Master.MapAnimation.Types.Anim.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = builderForValue.Build();
            return this;
          }
          public Builder MergeValue(global::Master.MapAnimation.Types.Anim value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasValue &&
                result.value_ != global::Master.MapAnimation.Types.Anim.DefaultInstance) {
                result.value_ = global::Master.MapAnimation.Types.Anim.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
            } else {
              result.value_ = value;
            }
            result.hasValue = true;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = null;
            return this;
          }
        }
      }

    }
    #endregion

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int AnimationFieldNumber = 2;
    private pbc::PopsicleList<global::Master.MapAnimation.Types.AnimationEntry> animation_ = new pbc::PopsicleList<global::Master.MapAnimation.Types.AnimationEntry>();
    public scg::IList<global::Master.MapAnimation.Types.AnimationEntry> AnimationList {
      get { return animation_; }
    }
    public int AnimationCount {
      get { return animation_.Count; }
    }
    public global::Master.MapAnimation.Types.AnimationEntry GetAnimation(int index) {
      return animation_[index];
    }

    public const int EventAnimationFieldNumber = 3;
    private pbc::PopsicleList<global::Master.MapAnimation.Types.EventAnimationEntry> eventAnimation_ = new pbc::PopsicleList<global::Master.MapAnimation.Types.EventAnimationEntry>();
    public scg::IList<global::Master.MapAnimation.Types.EventAnimationEntry> EventAnimationList {
      get { return eventAnimation_; }
    }
    public int EventAnimationCount {
      get { return eventAnimation_.Count; }
    }
    public global::Master.MapAnimation.Types.EventAnimationEntry GetEventAnimation(int index) {
      return eventAnimation_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mapAnimationFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[2], Id);
      }
      if (animation_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], animation_);
      }
      if (eventAnimation_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], eventAnimation_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      foreach (global::Master.MapAnimation.Types.AnimationEntry element in AnimationList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::Master.MapAnimation.Types.EventAnimationEntry element in EventAnimationList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MapAnimation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapAnimation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapAnimation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapAnimation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapAnimation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapAnimation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapAnimation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapAnimation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapAnimation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapAnimation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapAnimation MakeReadOnly() {
      animation_.MakeReadOnly();
      eventAnimation_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapAnimation prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapAnimation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapAnimation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private MapAnimation result;

      private MapAnimation PrepareBuilder() {
        if (resultIsReadOnly) {
          MapAnimation original = result;
          result = new MapAnimation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override MapAnimation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.MapAnimation.Descriptor; }
      }

      public override MapAnimation DefaultInstanceForType {
        get { return global::Master.MapAnimation.DefaultInstance; }
      }

      public override MapAnimation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapAnimation) {
          return MergeFrom((MapAnimation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(MapAnimation other) {
        if (other == global::Master.MapAnimation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.animation_.Count != 0) {
          result.animation_.Add(other.animation_);
        }
        if (other.eventAnimation_.Count != 0) {
          result.eventAnimation_.Add(other.eventAnimation_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapAnimationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapAnimationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.animation_, global::Master.MapAnimation.Types.AnimationEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.eventAnimation_, global::Master.MapAnimation.Types.EventAnimationEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public pbc::IPopsicleList<global::Master.MapAnimation.Types.AnimationEntry> AnimationList {
        get { return PrepareBuilder().animation_; }
      }
      public int AnimationCount {
        get { return result.AnimationCount; }
      }
      public global::Master.MapAnimation.Types.AnimationEntry GetAnimation(int index) {
        return result.GetAnimation(index);
      }
      public Builder SetAnimation(int index, global::Master.MapAnimation.Types.AnimationEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.animation_[index] = value;
        return this;
      }
      public Builder SetAnimation(int index, global::Master.MapAnimation.Types.AnimationEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.animation_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAnimation(global::Master.MapAnimation.Types.AnimationEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.animation_.Add(value);
        return this;
      }
      public Builder AddAnimation(global::Master.MapAnimation.Types.AnimationEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.animation_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAnimation(scg::IEnumerable<global::Master.MapAnimation.Types.AnimationEntry> values) {
        PrepareBuilder();
        result.animation_.Add(values);
        return this;
      }
      public Builder ClearAnimation() {
        PrepareBuilder();
        result.animation_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.MapAnimation.Types.EventAnimationEntry> EventAnimationList {
        get { return PrepareBuilder().eventAnimation_; }
      }
      public int EventAnimationCount {
        get { return result.EventAnimationCount; }
      }
      public global::Master.MapAnimation.Types.EventAnimationEntry GetEventAnimation(int index) {
        return result.GetEventAnimation(index);
      }
      public Builder SetEventAnimation(int index, global::Master.MapAnimation.Types.EventAnimationEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eventAnimation_[index] = value;
        return this;
      }
      public Builder SetEventAnimation(int index, global::Master.MapAnimation.Types.EventAnimationEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eventAnimation_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEventAnimation(global::Master.MapAnimation.Types.EventAnimationEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eventAnimation_.Add(value);
        return this;
      }
      public Builder AddEventAnimation(global::Master.MapAnimation.Types.EventAnimationEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eventAnimation_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEventAnimation(scg::IEnumerable<global::Master.MapAnimation.Types.EventAnimationEntry> values) {
        PrepareBuilder();
        result.eventAnimation_.Add(values);
        return this;
      }
      public Builder ClearEventAnimation() {
        PrepareBuilder();
        result.eventAnimation_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapIndex : pb::GeneratedMessage<MapIndex, MapIndex.Builder> {
    public MapIndex() { }
    private static readonly MapIndex defaultInstance = new MapIndex().MakeReadOnly();
    private static readonly string[] _mapIndexFieldNames = new string[] { "filename", "stage_id" };
    private static readonly uint[] _mapIndexFieldTags = new uint[] { 18, 8 };
    public static MapIndex DefaultInstance {
      get { return defaultInstance; }
    }

    public override MapIndex DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override MapIndex ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_MapIndex__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<MapIndex, MapIndex.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_MapIndex__FieldAccessorTable; }
    }

    public const int StageIdFieldNumber = 1;
    private int stageId_;
    public int StageId {
      get { return stageId_; }
      set { stageId_ = value; }
    }

    public const int FilenameFieldNumber = 2;
    private pbc::PopsicleList<string> filename_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FilenameList {
      get { return pbc::Lists.AsReadOnly(filename_); }
    }
    public int FilenameCount {
      get { return filename_.Count; }
    }
    public string GetFilename(int index) {
      return filename_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mapIndexFieldNames;
      if (StageId != 0) {
        output.WriteInt32(1, field_names[1], StageId);
      }
      if (filename_.Count > 0) {
        output.WriteStringArray(2, field_names[0], filename_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (StageId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, StageId);
      }
      {
        int dataSize = 0;
        foreach (string element in FilenameList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * filename_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MapIndex ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapIndex ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapIndex ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapIndex ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapIndex ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapIndex ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapIndex ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapIndex ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapIndex ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapIndex ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapIndex MakeReadOnly() {
      filename_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapIndex prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapIndex, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapIndex cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private MapIndex result;

      private MapIndex PrepareBuilder() {
        if (resultIsReadOnly) {
          MapIndex original = result;
          result = new MapIndex();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override MapIndex MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.MapIndex.Descriptor; }
      }

      public override MapIndex DefaultInstanceForType {
        get { return global::Master.MapIndex.DefaultInstance; }
      }

      public override MapIndex BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapIndex) {
          return MergeFrom((MapIndex) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(MapIndex other) {
        if (other == global::Master.MapIndex.DefaultInstance) return this;
        PrepareBuilder();
        if (other.StageId != 0) {
          StageId = other.StageId;
        }
        if (other.filename_.Count != 0) {
          result.filename_.Add(other.filename_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapIndexFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapIndexFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.stageId_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.filename_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int StageId {
        get { return result.StageId; }
        set { SetStageId(value); }
      }
      public Builder SetStageId(int value) {
        PrepareBuilder();
        result.stageId_ = value;
        return this;
      }
      public Builder ClearStageId() {
        PrepareBuilder();
        result.stageId_ = 0;
        return this;
      }

      public pbc::IPopsicleList<string> FilenameList {
        get { return PrepareBuilder().filename_; }
      }
      public int FilenameCount {
        get { return result.FilenameCount; }
      }
      public string GetFilename(int index) {
        return result.GetFilename(index);
      }
      public Builder SetFilename(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filename_[index] = value;
        return this;
      }
      public Builder AddFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filename_.Add(value);
        return this;
      }
      public Builder AddRangeFilename(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.filename_.Add(values);
        return this;
      }
      public Builder ClearFilename() {
        PrepareBuilder();
        result.filename_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AreaData : pb::GeneratedMessage<AreaData, AreaData.Builder> {
    public AreaData() { }
    private static readonly AreaData defaultInstance = new AreaData().MakeReadOnly();
    private static readonly string[] _areaDataFieldNames = new string[] { "banner_height", "exchange_id", "id", "info_url", "kind", "max_dungeon", "name", "property", "require_stack_item_id", "season", "stack_item_id", "start_dungeon_id", "unlock_home_level", "unlock_stack_item_id", "unlock_stack_item_num", "unlock_time" };
    private static readonly uint[] _areaDataFieldTags = new uint[] { 120, 104, 8, 114, 50, 24, 18, 42, 80, 128, 56, 32, 96, 64, 72, 88 };
    public static AreaData DefaultInstance {
      get { return defaultInstance; }
    }

    public override AreaData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override AreaData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_AreaData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AreaData, AreaData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_AreaData__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set { name_ = value; }
    }

    public const int MaxDungeonFieldNumber = 3;
    private int maxDungeon_;
    public int MaxDungeon {
      get { return maxDungeon_; }
      set { maxDungeon_ = value; }
    }

    public const int StartDungeonIdFieldNumber = 4;
    private int startDungeonId_;
    public int StartDungeonId {
      get { return startDungeonId_; }
      set { startDungeonId_ = value; }
    }

    public const int PropertyFieldNumber = 5;
    private string property_ = "";
    public string Property {
      get { return property_; }
      set { property_ = value; }
    }

    public const int KindFieldNumber = 6;
    private string kind_ = "";
    public string Kind {
      get { return kind_; }
      set { kind_ = value; }
    }

    public const int StackItemIdFieldNumber = 7;
    private int stackItemId_;
    public int StackItemId {
      get { return stackItemId_; }
      set { stackItemId_ = value; }
    }

    public const int UnlockStackItemIdFieldNumber = 8;
    private int unlockStackItemId_;
    public int UnlockStackItemId {
      get { return unlockStackItemId_; }
      set { unlockStackItemId_ = value; }
    }

    public const int UnlockStackItemNumFieldNumber = 9;
    private int unlockStackItemNum_;
    public int UnlockStackItemNum {
      get { return unlockStackItemNum_; }
      set { unlockStackItemNum_ = value; }
    }

    public const int RequireStackItemIdFieldNumber = 10;
    private int requireStackItemId_;
    public int RequireStackItemId {
      get { return requireStackItemId_; }
      set { requireStackItemId_ = value; }
    }

    public const int UnlockTimeFieldNumber = 11;
    private int unlockTime_;
    public int UnlockTime {
      get { return unlockTime_; }
      set { unlockTime_ = value; }
    }

    public const int UnlockHomeLevelFieldNumber = 12;
    private int unlockHomeLevel_;
    public int UnlockHomeLevel {
      get { return unlockHomeLevel_; }
      set { unlockHomeLevel_ = value; }
    }

    public const int ExchangeIdFieldNumber = 13;
    private int exchangeId_;
    public int ExchangeId {
      get { return exchangeId_; }
      set { exchangeId_ = value; }
    }

    public const int InfoUrlFieldNumber = 14;
    private string infoUrl_ = "";
    public string InfoUrl {
      get { return infoUrl_; }
      set { infoUrl_ = value; }
    }

    public const int BannerHeightFieldNumber = 15;
    private int bannerHeight_;
    public int BannerHeight {
      get { return bannerHeight_; }
      set { bannerHeight_ = value; }
    }

    public const int SeasonFieldNumber = 16;
    private int season_;
    public int Season {
      get { return season_; }
      set { season_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _areaDataFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[2], Id);
      }
      if (Name != "") {
        output.WriteString(2, field_names[6], Name);
      }
      if (MaxDungeon != 0) {
        output.WriteInt32(3, field_names[5], MaxDungeon);
      }
      if (StartDungeonId != 0) {
        output.WriteInt32(4, field_names[11], StartDungeonId);
      }
      if (Property != "") {
        output.WriteString(5, field_names[7], Property);
      }
      if (Kind != "") {
        output.WriteString(6, field_names[4], Kind);
      }
      if (StackItemId != 0) {
        output.WriteInt32(7, field_names[10], StackItemId);
      }
      if (UnlockStackItemId != 0) {
        output.WriteInt32(8, field_names[13], UnlockStackItemId);
      }
      if (UnlockStackItemNum != 0) {
        output.WriteInt32(9, field_names[14], UnlockStackItemNum);
      }
      if (RequireStackItemId != 0) {
        output.WriteInt32(10, field_names[8], RequireStackItemId);
      }
      if (UnlockTime != 0) {
        output.WriteInt32(11, field_names[15], UnlockTime);
      }
      if (UnlockHomeLevel != 0) {
        output.WriteInt32(12, field_names[12], UnlockHomeLevel);
      }
      if (ExchangeId != 0) {
        output.WriteInt32(13, field_names[1], ExchangeId);
      }
      if (InfoUrl != "") {
        output.WriteString(14, field_names[3], InfoUrl);
      }
      if (BannerHeight != 0) {
        output.WriteInt32(15, field_names[0], BannerHeight);
      }
      if (Season != 0) {
        output.WriteInt32(16, field_names[9], Season);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (MaxDungeon != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MaxDungeon);
      }
      if (StartDungeonId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, StartDungeonId);
      }
      if (Property != "") {
        size += pb::CodedOutputStream.ComputeStringSize(5, Property);
      }
      if (Kind != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, Kind);
      }
      if (StackItemId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, StackItemId);
      }
      if (UnlockStackItemId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, UnlockStackItemId);
      }
      if (UnlockStackItemNum != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, UnlockStackItemNum);
      }
      if (RequireStackItemId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, RequireStackItemId);
      }
      if (UnlockTime != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, UnlockTime);
      }
      if (UnlockHomeLevel != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, UnlockHomeLevel);
      }
      if (ExchangeId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, ExchangeId);
      }
      if (InfoUrl != "") {
        size += pb::CodedOutputStream.ComputeStringSize(14, InfoUrl);
      }
      if (BannerHeight != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, BannerHeight);
      }
      if (Season != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, Season);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AreaData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AreaData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AreaData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AreaData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AreaData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AreaData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AreaData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AreaData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AreaData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AreaData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AreaData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AreaData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AreaData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AreaData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private AreaData result;

      private AreaData PrepareBuilder() {
        if (resultIsReadOnly) {
          AreaData original = result;
          result = new AreaData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override AreaData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.AreaData.Descriptor; }
      }

      public override AreaData DefaultInstanceForType {
        get { return global::Master.AreaData.DefaultInstance; }
      }

      public override AreaData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AreaData) {
          return MergeFrom((AreaData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(AreaData other) {
        if (other == global::Master.AreaData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Name != "") {
          Name = other.Name;
        }
        if (other.MaxDungeon != 0) {
          MaxDungeon = other.MaxDungeon;
        }
        if (other.StartDungeonId != 0) {
          StartDungeonId = other.StartDungeonId;
        }
        if (other.Property != "") {
          Property = other.Property;
        }
        if (other.Kind != "") {
          Kind = other.Kind;
        }
        if (other.StackItemId != 0) {
          StackItemId = other.StackItemId;
        }
        if (other.UnlockStackItemId != 0) {
          UnlockStackItemId = other.UnlockStackItemId;
        }
        if (other.UnlockStackItemNum != 0) {
          UnlockStackItemNum = other.UnlockStackItemNum;
        }
        if (other.RequireStackItemId != 0) {
          RequireStackItemId = other.RequireStackItemId;
        }
        if (other.UnlockTime != 0) {
          UnlockTime = other.UnlockTime;
        }
        if (other.UnlockHomeLevel != 0) {
          UnlockHomeLevel = other.UnlockHomeLevel;
        }
        if (other.ExchangeId != 0) {
          ExchangeId = other.ExchangeId;
        }
        if (other.InfoUrl != "") {
          InfoUrl = other.InfoUrl;
        }
        if (other.BannerHeight != 0) {
          BannerHeight = other.BannerHeight;
        }
        if (other.Season != 0) {
          Season = other.Season;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_areaDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _areaDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.maxDungeon_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.startDungeonId_);
              break;
            }
            case 42: {
              input.ReadString(ref result.property_);
              break;
            }
            case 50: {
              input.ReadString(ref result.kind_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.stackItemId_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.unlockStackItemId_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.unlockStackItemNum_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.requireStackItemId_);
              break;
            }
            case 88: {
              input.ReadInt32(ref result.unlockTime_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.unlockHomeLevel_);
              break;
            }
            case 104: {
              input.ReadInt32(ref result.exchangeId_);
              break;
            }
            case 114: {
              input.ReadString(ref result.infoUrl_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.bannerHeight_);
              break;
            }
            case 128: {
              input.ReadInt32(ref result.season_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_ = "";
        return this;
      }

      public int MaxDungeon {
        get { return result.MaxDungeon; }
        set { SetMaxDungeon(value); }
      }
      public Builder SetMaxDungeon(int value) {
        PrepareBuilder();
        result.maxDungeon_ = value;
        return this;
      }
      public Builder ClearMaxDungeon() {
        PrepareBuilder();
        result.maxDungeon_ = 0;
        return this;
      }

      public int StartDungeonId {
        get { return result.StartDungeonId; }
        set { SetStartDungeonId(value); }
      }
      public Builder SetStartDungeonId(int value) {
        PrepareBuilder();
        result.startDungeonId_ = value;
        return this;
      }
      public Builder ClearStartDungeonId() {
        PrepareBuilder();
        result.startDungeonId_ = 0;
        return this;
      }

      public string Property {
        get { return result.Property; }
        set { SetProperty(value); }
      }
      public Builder SetProperty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.property_ = value;
        return this;
      }
      public Builder ClearProperty() {
        PrepareBuilder();
        result.property_ = "";
        return this;
      }

      public string Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        PrepareBuilder();
        result.kind_ = "";
        return this;
      }

      public int StackItemId {
        get { return result.StackItemId; }
        set { SetStackItemId(value); }
      }
      public Builder SetStackItemId(int value) {
        PrepareBuilder();
        result.stackItemId_ = value;
        return this;
      }
      public Builder ClearStackItemId() {
        PrepareBuilder();
        result.stackItemId_ = 0;
        return this;
      }

      public int UnlockStackItemId {
        get { return result.UnlockStackItemId; }
        set { SetUnlockStackItemId(value); }
      }
      public Builder SetUnlockStackItemId(int value) {
        PrepareBuilder();
        result.unlockStackItemId_ = value;
        return this;
      }
      public Builder ClearUnlockStackItemId() {
        PrepareBuilder();
        result.unlockStackItemId_ = 0;
        return this;
      }

      public int UnlockStackItemNum {
        get { return result.UnlockStackItemNum; }
        set { SetUnlockStackItemNum(value); }
      }
      public Builder SetUnlockStackItemNum(int value) {
        PrepareBuilder();
        result.unlockStackItemNum_ = value;
        return this;
      }
      public Builder ClearUnlockStackItemNum() {
        PrepareBuilder();
        result.unlockStackItemNum_ = 0;
        return this;
      }

      public int RequireStackItemId {
        get { return result.RequireStackItemId; }
        set { SetRequireStackItemId(value); }
      }
      public Builder SetRequireStackItemId(int value) {
        PrepareBuilder();
        result.requireStackItemId_ = value;
        return this;
      }
      public Builder ClearRequireStackItemId() {
        PrepareBuilder();
        result.requireStackItemId_ = 0;
        return this;
      }

      public int UnlockTime {
        get { return result.UnlockTime; }
        set { SetUnlockTime(value); }
      }
      public Builder SetUnlockTime(int value) {
        PrepareBuilder();
        result.unlockTime_ = value;
        return this;
      }
      public Builder ClearUnlockTime() {
        PrepareBuilder();
        result.unlockTime_ = 0;
        return this;
      }

      public int UnlockHomeLevel {
        get { return result.UnlockHomeLevel; }
        set { SetUnlockHomeLevel(value); }
      }
      public Builder SetUnlockHomeLevel(int value) {
        PrepareBuilder();
        result.unlockHomeLevel_ = value;
        return this;
      }
      public Builder ClearUnlockHomeLevel() {
        PrepareBuilder();
        result.unlockHomeLevel_ = 0;
        return this;
      }

      public int ExchangeId {
        get { return result.ExchangeId; }
        set { SetExchangeId(value); }
      }
      public Builder SetExchangeId(int value) {
        PrepareBuilder();
        result.exchangeId_ = value;
        return this;
      }
      public Builder ClearExchangeId() {
        PrepareBuilder();
        result.exchangeId_ = 0;
        return this;
      }

      public string InfoUrl {
        get { return result.InfoUrl; }
        set { SetInfoUrl(value); }
      }
      public Builder SetInfoUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.infoUrl_ = value;
        return this;
      }
      public Builder ClearInfoUrl() {
        PrepareBuilder();
        result.infoUrl_ = "";
        return this;
      }

      public int BannerHeight {
        get { return result.BannerHeight; }
        set { SetBannerHeight(value); }
      }
      public Builder SetBannerHeight(int value) {
        PrepareBuilder();
        result.bannerHeight_ = value;
        return this;
      }
      public Builder ClearBannerHeight() {
        PrepareBuilder();
        result.bannerHeight_ = 0;
        return this;
      }

      public int Season {
        get { return result.Season; }
        set { SetSeason(value); }
      }
      public Builder SetSeason(int value) {
        PrepareBuilder();
        result.season_ = value;
        return this;
      }
      public Builder ClearSeason() {
        PrepareBuilder();
        result.season_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DungeonData : pb::GeneratedMessage<DungeonData, DungeonData.Builder> {
    public DungeonData() { }
    private static readonly DungeonData defaultInstance = new DungeonData().MakeReadOnly();
    private static readonly string[] _dungeonDataFieldNames = new string[] { "burst_rate", "button_name", "description", "difficulty", "exp", "gold_rate", "id", "max_exp", "max_gold", "max_satiety", "max_stage", "mission", "next_dungeon_id", "no_continue", "property", "pvp_unification_type", "recommend_level", "satiety", "stair", "stamina", "start_stage_id", "step_rate" };
    private static readonly uint[] _dungeonDataFieldTags = new uint[] { 88, 178, 18, 112, 64, 72, 8, 104, 96, 168, 32, 138, 24, 144, 50, 128, 120, 160, 154, 56, 40, 80 };
    public static DungeonData DefaultInstance {
      get { return defaultInstance; }
    }

    public override DungeonData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override DungeonData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_DungeonData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<DungeonData, DungeonData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_DungeonData__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set { description_ = value; }
    }

    public const int NextDungeonIdFieldNumber = 3;
    private int nextDungeonId_;
    public int NextDungeonId {
      get { return nextDungeonId_; }
      set { nextDungeonId_ = value; }
    }

    public const int MaxStageFieldNumber = 4;
    private int maxStage_;
    public int MaxStage {
      get { return maxStage_; }
      set { maxStage_ = value; }
    }

    public const int StartStageIdFieldNumber = 5;
    private int startStageId_;
    public int StartStageId {
      get { return startStageId_; }
      set { startStageId_ = value; }
    }

    public const int PropertyFieldNumber = 6;
    private string property_ = "";
    public string Property {
      get { return property_; }
      set { property_ = value; }
    }

    public const int StaminaFieldNumber = 7;
    private int stamina_;
    public int Stamina {
      get { return stamina_; }
      set { stamina_ = value; }
    }

    public const int ExpFieldNumber = 8;
    private int exp_;
    public int Exp {
      get { return exp_; }
      set { exp_ = value; }
    }

    public const int GoldRateFieldNumber = 9;
    private int goldRate_;
    public int GoldRate {
      get { return goldRate_; }
      set { goldRate_ = value; }
    }

    public const int StepRateFieldNumber = 10;
    private int stepRate_;
    public int StepRate {
      get { return stepRate_; }
      set { stepRate_ = value; }
    }

    public const int BurstRateFieldNumber = 11;
    private int burstRate_;
    public int BurstRate {
      get { return burstRate_; }
      set { burstRate_ = value; }
    }

    public const int MaxGoldFieldNumber = 12;
    private int maxGold_;
    public int MaxGold {
      get { return maxGold_; }
      set { maxGold_ = value; }
    }

    public const int MaxExpFieldNumber = 13;
    private int maxExp_;
    public int MaxExp {
      get { return maxExp_; }
      set { maxExp_ = value; }
    }

    public const int DifficultyFieldNumber = 14;
    private int difficulty_;
    public int Difficulty {
      get { return difficulty_; }
      set { difficulty_ = value; }
    }

    public const int RecommendLevelFieldNumber = 15;
    private int recommendLevel_;
    public int RecommendLevel {
      get { return recommendLevel_; }
      set { recommendLevel_ = value; }
    }

    public const int PvpUnificationTypeFieldNumber = 16;
    private int pvpUnificationType_;
    public int PvpUnificationType {
      get { return pvpUnificationType_; }
      set { pvpUnificationType_ = value; }
    }

    public const int MissionFieldNumber = 17;
    private string mission_ = "";
    public string Mission {
      get { return mission_; }
      set { mission_ = value; }
    }

    public const int NoContinueFieldNumber = 18;
    private bool noContinue_;
    public bool NoContinue {
      get { return noContinue_; }
      set { noContinue_ = value; }
    }

    public const int StairFieldNumber = 19;
    private string stair_ = "";
    public string Stair {
      get { return stair_; }
      set { stair_ = value; }
    }

    public const int SatietyFieldNumber = 20;
    private int satiety_;
    public int Satiety {
      get { return satiety_; }
      set { satiety_ = value; }
    }

    public const int MaxSatietyFieldNumber = 21;
    private int maxSatiety_;
    public int MaxSatiety {
      get { return maxSatiety_; }
      set { maxSatiety_ = value; }
    }

    public const int ButtonNameFieldNumber = 22;
    private string buttonName_ = "";
    public string ButtonName {
      get { return buttonName_; }
      set { buttonName_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _dungeonDataFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[6], Id);
      }
      if (Description != "") {
        output.WriteString(2, field_names[2], Description);
      }
      if (NextDungeonId != 0) {
        output.WriteInt32(3, field_names[12], NextDungeonId);
      }
      if (MaxStage != 0) {
        output.WriteInt32(4, field_names[10], MaxStage);
      }
      if (StartStageId != 0) {
        output.WriteInt32(5, field_names[20], StartStageId);
      }
      if (Property != "") {
        output.WriteString(6, field_names[14], Property);
      }
      if (Stamina != 0) {
        output.WriteInt32(7, field_names[19], Stamina);
      }
      if (Exp != 0) {
        output.WriteInt32(8, field_names[4], Exp);
      }
      if (GoldRate != 0) {
        output.WriteInt32(9, field_names[5], GoldRate);
      }
      if (StepRate != 0) {
        output.WriteInt32(10, field_names[21], StepRate);
      }
      if (BurstRate != 0) {
        output.WriteInt32(11, field_names[0], BurstRate);
      }
      if (MaxGold != 0) {
        output.WriteInt32(12, field_names[8], MaxGold);
      }
      if (MaxExp != 0) {
        output.WriteInt32(13, field_names[7], MaxExp);
      }
      if (Difficulty != 0) {
        output.WriteInt32(14, field_names[3], Difficulty);
      }
      if (RecommendLevel != 0) {
        output.WriteInt32(15, field_names[16], RecommendLevel);
      }
      if (PvpUnificationType != 0) {
        output.WriteInt32(16, field_names[15], PvpUnificationType);
      }
      if (Mission != "") {
        output.WriteString(17, field_names[11], Mission);
      }
      if (NoContinue != false) {
        output.WriteBool(18, field_names[13], NoContinue);
      }
      if (Stair != "") {
        output.WriteString(19, field_names[18], Stair);
      }
      if (Satiety != 0) {
        output.WriteInt32(20, field_names[17], Satiety);
      }
      if (MaxSatiety != 0) {
        output.WriteInt32(21, field_names[9], MaxSatiety);
      }
      if (ButtonName != "") {
        output.WriteString(22, field_names[1], ButtonName);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Description != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Description);
      }
      if (NextDungeonId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, NextDungeonId);
      }
      if (MaxStage != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, MaxStage);
      }
      if (StartStageId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, StartStageId);
      }
      if (Property != "") {
        size += pb::CodedOutputStream.ComputeStringSize(6, Property);
      }
      if (Stamina != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Stamina);
      }
      if (Exp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Exp);
      }
      if (GoldRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, GoldRate);
      }
      if (StepRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, StepRate);
      }
      if (BurstRate != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, BurstRate);
      }
      if (MaxGold != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, MaxGold);
      }
      if (MaxExp != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, MaxExp);
      }
      if (Difficulty != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, Difficulty);
      }
      if (RecommendLevel != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, RecommendLevel);
      }
      if (PvpUnificationType != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, PvpUnificationType);
      }
      if (Mission != "") {
        size += pb::CodedOutputStream.ComputeStringSize(17, Mission);
      }
      if (NoContinue != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, NoContinue);
      }
      if (Stair != "") {
        size += pb::CodedOutputStream.ComputeStringSize(19, Stair);
      }
      if (Satiety != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Satiety);
      }
      if (MaxSatiety != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, MaxSatiety);
      }
      if (ButtonName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(22, ButtonName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static DungeonData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DungeonData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DungeonData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DungeonData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DungeonData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DungeonData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DungeonData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DungeonData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DungeonData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DungeonData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DungeonData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DungeonData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DungeonData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DungeonData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private DungeonData result;

      private DungeonData PrepareBuilder() {
        if (resultIsReadOnly) {
          DungeonData original = result;
          result = new DungeonData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override DungeonData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.DungeonData.Descriptor; }
      }

      public override DungeonData DefaultInstanceForType {
        get { return global::Master.DungeonData.DefaultInstance; }
      }

      public override DungeonData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DungeonData) {
          return MergeFrom((DungeonData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(DungeonData other) {
        if (other == global::Master.DungeonData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.Description != "") {
          Description = other.Description;
        }
        if (other.NextDungeonId != 0) {
          NextDungeonId = other.NextDungeonId;
        }
        if (other.MaxStage != 0) {
          MaxStage = other.MaxStage;
        }
        if (other.StartStageId != 0) {
          StartStageId = other.StartStageId;
        }
        if (other.Property != "") {
          Property = other.Property;
        }
        if (other.Stamina != 0) {
          Stamina = other.Stamina;
        }
        if (other.Exp != 0) {
          Exp = other.Exp;
        }
        if (other.GoldRate != 0) {
          GoldRate = other.GoldRate;
        }
        if (other.StepRate != 0) {
          StepRate = other.StepRate;
        }
        if (other.BurstRate != 0) {
          BurstRate = other.BurstRate;
        }
        if (other.MaxGold != 0) {
          MaxGold = other.MaxGold;
        }
        if (other.MaxExp != 0) {
          MaxExp = other.MaxExp;
        }
        if (other.Difficulty != 0) {
          Difficulty = other.Difficulty;
        }
        if (other.RecommendLevel != 0) {
          RecommendLevel = other.RecommendLevel;
        }
        if (other.PvpUnificationType != 0) {
          PvpUnificationType = other.PvpUnificationType;
        }
        if (other.Mission != "") {
          Mission = other.Mission;
        }
        if (other.NoContinue != false) {
          NoContinue = other.NoContinue;
        }
        if (other.Stair != "") {
          Stair = other.Stair;
        }
        if (other.Satiety != 0) {
          Satiety = other.Satiety;
        }
        if (other.MaxSatiety != 0) {
          MaxSatiety = other.MaxSatiety;
        }
        if (other.ButtonName != "") {
          ButtonName = other.ButtonName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dungeonDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dungeonDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadString(ref result.description_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.nextDungeonId_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.maxStage_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.startStageId_);
              break;
            }
            case 50: {
              input.ReadString(ref result.property_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.stamina_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.exp_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.goldRate_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.stepRate_);
              break;
            }
            case 88: {
              input.ReadInt32(ref result.burstRate_);
              break;
            }
            case 96: {
              input.ReadInt32(ref result.maxGold_);
              break;
            }
            case 104: {
              input.ReadInt32(ref result.maxExp_);
              break;
            }
            case 112: {
              input.ReadInt32(ref result.difficulty_);
              break;
            }
            case 120: {
              input.ReadInt32(ref result.recommendLevel_);
              break;
            }
            case 128: {
              input.ReadInt32(ref result.pvpUnificationType_);
              break;
            }
            case 138: {
              input.ReadString(ref result.mission_);
              break;
            }
            case 144: {
              input.ReadBool(ref result.noContinue_);
              break;
            }
            case 154: {
              input.ReadString(ref result.stair_);
              break;
            }
            case 160: {
              input.ReadInt32(ref result.satiety_);
              break;
            }
            case 168: {
              input.ReadInt32(ref result.maxSatiety_);
              break;
            }
            case 178: {
              input.ReadString(ref result.buttonName_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.description_ = "";
        return this;
      }

      public int NextDungeonId {
        get { return result.NextDungeonId; }
        set { SetNextDungeonId(value); }
      }
      public Builder SetNextDungeonId(int value) {
        PrepareBuilder();
        result.nextDungeonId_ = value;
        return this;
      }
      public Builder ClearNextDungeonId() {
        PrepareBuilder();
        result.nextDungeonId_ = 0;
        return this;
      }

      public int MaxStage {
        get { return result.MaxStage; }
        set { SetMaxStage(value); }
      }
      public Builder SetMaxStage(int value) {
        PrepareBuilder();
        result.maxStage_ = value;
        return this;
      }
      public Builder ClearMaxStage() {
        PrepareBuilder();
        result.maxStage_ = 0;
        return this;
      }

      public int StartStageId {
        get { return result.StartStageId; }
        set { SetStartStageId(value); }
      }
      public Builder SetStartStageId(int value) {
        PrepareBuilder();
        result.startStageId_ = value;
        return this;
      }
      public Builder ClearStartStageId() {
        PrepareBuilder();
        result.startStageId_ = 0;
        return this;
      }

      public string Property {
        get { return result.Property; }
        set { SetProperty(value); }
      }
      public Builder SetProperty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.property_ = value;
        return this;
      }
      public Builder ClearProperty() {
        PrepareBuilder();
        result.property_ = "";
        return this;
      }

      public int Stamina {
        get { return result.Stamina; }
        set { SetStamina(value); }
      }
      public Builder SetStamina(int value) {
        PrepareBuilder();
        result.stamina_ = value;
        return this;
      }
      public Builder ClearStamina() {
        PrepareBuilder();
        result.stamina_ = 0;
        return this;
      }

      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.exp_ = 0;
        return this;
      }

      public int GoldRate {
        get { return result.GoldRate; }
        set { SetGoldRate(value); }
      }
      public Builder SetGoldRate(int value) {
        PrepareBuilder();
        result.goldRate_ = value;
        return this;
      }
      public Builder ClearGoldRate() {
        PrepareBuilder();
        result.goldRate_ = 0;
        return this;
      }

      public int StepRate {
        get { return result.StepRate; }
        set { SetStepRate(value); }
      }
      public Builder SetStepRate(int value) {
        PrepareBuilder();
        result.stepRate_ = value;
        return this;
      }
      public Builder ClearStepRate() {
        PrepareBuilder();
        result.stepRate_ = 0;
        return this;
      }

      public int BurstRate {
        get { return result.BurstRate; }
        set { SetBurstRate(value); }
      }
      public Builder SetBurstRate(int value) {
        PrepareBuilder();
        result.burstRate_ = value;
        return this;
      }
      public Builder ClearBurstRate() {
        PrepareBuilder();
        result.burstRate_ = 0;
        return this;
      }

      public int MaxGold {
        get { return result.MaxGold; }
        set { SetMaxGold(value); }
      }
      public Builder SetMaxGold(int value) {
        PrepareBuilder();
        result.maxGold_ = value;
        return this;
      }
      public Builder ClearMaxGold() {
        PrepareBuilder();
        result.maxGold_ = 0;
        return this;
      }

      public int MaxExp {
        get { return result.MaxExp; }
        set { SetMaxExp(value); }
      }
      public Builder SetMaxExp(int value) {
        PrepareBuilder();
        result.maxExp_ = value;
        return this;
      }
      public Builder ClearMaxExp() {
        PrepareBuilder();
        result.maxExp_ = 0;
        return this;
      }

      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        PrepareBuilder();
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        PrepareBuilder();
        result.difficulty_ = 0;
        return this;
      }

      public int RecommendLevel {
        get { return result.RecommendLevel; }
        set { SetRecommendLevel(value); }
      }
      public Builder SetRecommendLevel(int value) {
        PrepareBuilder();
        result.recommendLevel_ = value;
        return this;
      }
      public Builder ClearRecommendLevel() {
        PrepareBuilder();
        result.recommendLevel_ = 0;
        return this;
      }

      public int PvpUnificationType {
        get { return result.PvpUnificationType; }
        set { SetPvpUnificationType(value); }
      }
      public Builder SetPvpUnificationType(int value) {
        PrepareBuilder();
        result.pvpUnificationType_ = value;
        return this;
      }
      public Builder ClearPvpUnificationType() {
        PrepareBuilder();
        result.pvpUnificationType_ = 0;
        return this;
      }

      public string Mission {
        get { return result.Mission; }
        set { SetMission(value); }
      }
      public Builder SetMission(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mission_ = value;
        return this;
      }
      public Builder ClearMission() {
        PrepareBuilder();
        result.mission_ = "";
        return this;
      }

      public bool NoContinue {
        get { return result.NoContinue; }
        set { SetNoContinue(value); }
      }
      public Builder SetNoContinue(bool value) {
        PrepareBuilder();
        result.noContinue_ = value;
        return this;
      }
      public Builder ClearNoContinue() {
        PrepareBuilder();
        result.noContinue_ = false;
        return this;
      }

      public string Stair {
        get { return result.Stair; }
        set { SetStair(value); }
      }
      public Builder SetStair(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stair_ = value;
        return this;
      }
      public Builder ClearStair() {
        PrepareBuilder();
        result.stair_ = "";
        return this;
      }

      public int Satiety {
        get { return result.Satiety; }
        set { SetSatiety(value); }
      }
      public Builder SetSatiety(int value) {
        PrepareBuilder();
        result.satiety_ = value;
        return this;
      }
      public Builder ClearSatiety() {
        PrepareBuilder();
        result.satiety_ = 0;
        return this;
      }

      public int MaxSatiety {
        get { return result.MaxSatiety; }
        set { SetMaxSatiety(value); }
      }
      public Builder SetMaxSatiety(int value) {
        PrepareBuilder();
        result.maxSatiety_ = value;
        return this;
      }
      public Builder ClearMaxSatiety() {
        PrepareBuilder();
        result.maxSatiety_ = 0;
        return this;
      }

      public string ButtonName {
        get { return result.ButtonName; }
        set { SetButtonName(value); }
      }
      public Builder SetButtonName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buttonName_ = value;
        return this;
      }
      public Builder ClearButtonName() {
        PrepareBuilder();
        result.buttonName_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageData : pb::GeneratedMessage<StageData, StageData.Builder> {
    public StageData() { }
    private static readonly StageData defaultInstance = new StageData().MakeReadOnly();
    private static readonly string[] _stageDataFieldNames = new string[] { "animation_name", "base_name", "bgm_name", "driver_name", "driver_param", "dungeon_id", "enemy_set_id", "fixed_room_group_id", "floor_no", "goal_count", "goal_set_id", "id", "item_set_id", "mapchip_name", "mask_type", "next_stage_param", "random_room_group_id", "seeds", "stage_title", "step_sound_name", "texture_name", "trap_set_id" };
    private static readonly uint[] _stageDataFieldTags = new uint[] { 154, 138, 170, 98, 106, 16, 32, 114, 24, 64, 56, 8, 40, 146, 72, 82, 122, 130, 90, 178, 162, 48 };
    public static StageData DefaultInstance {
      get { return defaultInstance; }
    }

    public override StageData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StageData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_StageData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StageData, StageData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_StageData__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int DungeonIdFieldNumber = 2;
    private int dungeonId_;
    public int DungeonId {
      get { return dungeonId_; }
      set { dungeonId_ = value; }
    }

    public const int FloorNoFieldNumber = 3;
    private int floorNo_;
    public int FloorNo {
      get { return floorNo_; }
      set { floorNo_ = value; }
    }

    public const int EnemySetIdFieldNumber = 4;
    private int enemySetId_;
    public int EnemySetId {
      get { return enemySetId_; }
      set { enemySetId_ = value; }
    }

    public const int ItemSetIdFieldNumber = 5;
    private int itemSetId_;
    public int ItemSetId {
      get { return itemSetId_; }
      set { itemSetId_ = value; }
    }

    public const int TrapSetIdFieldNumber = 6;
    private int trapSetId_;
    public int TrapSetId {
      get { return trapSetId_; }
      set { trapSetId_ = value; }
    }

    public const int GoalSetIdFieldNumber = 7;
    private int goalSetId_;
    public int GoalSetId {
      get { return goalSetId_; }
      set { goalSetId_ = value; }
    }

    public const int GoalCountFieldNumber = 8;
    private int goalCount_;
    public int GoalCount {
      get { return goalCount_; }
      set { goalCount_ = value; }
    }

    public const int MaskTypeFieldNumber = 9;
    private int maskType_;
    public int MaskType {
      get { return maskType_; }
      set { maskType_ = value; }
    }

    public const int NextStageParamFieldNumber = 10;
    private string nextStageParam_ = "";
    public string NextStageParam {
      get { return nextStageParam_; }
      set { nextStageParam_ = value; }
    }

    public const int StageTitleFieldNumber = 11;
    private string stageTitle_ = "";
    public string StageTitle {
      get { return stageTitle_; }
      set { stageTitle_ = value; }
    }

    public const int DriverNameFieldNumber = 12;
    private string driverName_ = "";
    public string DriverName {
      get { return driverName_; }
      set { driverName_ = value; }
    }

    public const int DriverParamFieldNumber = 13;
    private string driverParam_ = "";
    public string DriverParam {
      get { return driverParam_; }
      set { driverParam_ = value; }
    }

    public const int FixedRoomGroupIdFieldNumber = 14;
    private string fixedRoomGroupId_ = "";
    public string FixedRoomGroupId {
      get { return fixedRoomGroupId_; }
      set { fixedRoomGroupId_ = value; }
    }

    public const int RandomRoomGroupIdFieldNumber = 15;
    private string randomRoomGroupId_ = "";
    public string RandomRoomGroupId {
      get { return randomRoomGroupId_; }
      set { randomRoomGroupId_ = value; }
    }

    public const int SeedsFieldNumber = 16;
    private string seeds_ = "";
    public string Seeds {
      get { return seeds_; }
      set { seeds_ = value; }
    }

    public const int BaseNameFieldNumber = 17;
    private string baseName_ = "";
    public string BaseName {
      get { return baseName_; }
      set { baseName_ = value; }
    }

    public const int MapchipNameFieldNumber = 18;
    private string mapchipName_ = "";
    public string MapchipName {
      get { return mapchipName_; }
      set { mapchipName_ = value; }
    }

    public const int AnimationNameFieldNumber = 19;
    private string animationName_ = "";
    public string AnimationName {
      get { return animationName_; }
      set { animationName_ = value; }
    }

    public const int TextureNameFieldNumber = 20;
    private string textureName_ = "";
    public string TextureName {
      get { return textureName_; }
      set { textureName_ = value; }
    }

    public const int BgmNameFieldNumber = 21;
    private string bgmName_ = "";
    public string BgmName {
      get { return bgmName_; }
      set { bgmName_ = value; }
    }

    public const int StepSoundNameFieldNumber = 22;
    private string stepSoundName_ = "";
    public string StepSoundName {
      get { return stepSoundName_; }
      set { stepSoundName_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stageDataFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[11], Id);
      }
      if (DungeonId != 0) {
        output.WriteInt32(2, field_names[5], DungeonId);
      }
      if (FloorNo != 0) {
        output.WriteInt32(3, field_names[8], FloorNo);
      }
      if (EnemySetId != 0) {
        output.WriteInt32(4, field_names[6], EnemySetId);
      }
      if (ItemSetId != 0) {
        output.WriteInt32(5, field_names[12], ItemSetId);
      }
      if (TrapSetId != 0) {
        output.WriteInt32(6, field_names[21], TrapSetId);
      }
      if (GoalSetId != 0) {
        output.WriteInt32(7, field_names[10], GoalSetId);
      }
      if (GoalCount != 0) {
        output.WriteInt32(8, field_names[9], GoalCount);
      }
      if (MaskType != 0) {
        output.WriteInt32(9, field_names[14], MaskType);
      }
      if (NextStageParam != "") {
        output.WriteString(10, field_names[15], NextStageParam);
      }
      if (StageTitle != "") {
        output.WriteString(11, field_names[18], StageTitle);
      }
      if (DriverName != "") {
        output.WriteString(12, field_names[3], DriverName);
      }
      if (DriverParam != "") {
        output.WriteString(13, field_names[4], DriverParam);
      }
      if (FixedRoomGroupId != "") {
        output.WriteString(14, field_names[7], FixedRoomGroupId);
      }
      if (RandomRoomGroupId != "") {
        output.WriteString(15, field_names[16], RandomRoomGroupId);
      }
      if (Seeds != "") {
        output.WriteString(16, field_names[17], Seeds);
      }
      if (BaseName != "") {
        output.WriteString(17, field_names[1], BaseName);
      }
      if (MapchipName != "") {
        output.WriteString(18, field_names[13], MapchipName);
      }
      if (AnimationName != "") {
        output.WriteString(19, field_names[0], AnimationName);
      }
      if (TextureName != "") {
        output.WriteString(20, field_names[20], TextureName);
      }
      if (BgmName != "") {
        output.WriteString(21, field_names[2], BgmName);
      }
      if (StepSoundName != "") {
        output.WriteString(22, field_names[19], StepSoundName);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (DungeonId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, DungeonId);
      }
      if (FloorNo != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, FloorNo);
      }
      if (EnemySetId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, EnemySetId);
      }
      if (ItemSetId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ItemSetId);
      }
      if (TrapSetId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, TrapSetId);
      }
      if (GoalSetId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, GoalSetId);
      }
      if (GoalCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, GoalCount);
      }
      if (MaskType != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, MaskType);
      }
      if (NextStageParam != "") {
        size += pb::CodedOutputStream.ComputeStringSize(10, NextStageParam);
      }
      if (StageTitle != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, StageTitle);
      }
      if (DriverName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(12, DriverName);
      }
      if (DriverParam != "") {
        size += pb::CodedOutputStream.ComputeStringSize(13, DriverParam);
      }
      if (FixedRoomGroupId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(14, FixedRoomGroupId);
      }
      if (RandomRoomGroupId != "") {
        size += pb::CodedOutputStream.ComputeStringSize(15, RandomRoomGroupId);
      }
      if (Seeds != "") {
        size += pb::CodedOutputStream.ComputeStringSize(16, Seeds);
      }
      if (BaseName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(17, BaseName);
      }
      if (MapchipName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(18, MapchipName);
      }
      if (AnimationName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(19, AnimationName);
      }
      if (TextureName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(20, TextureName);
      }
      if (BgmName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(21, BgmName);
      }
      if (StepSoundName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(22, StepSoundName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StageData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StageData result;

      private StageData PrepareBuilder() {
        if (resultIsReadOnly) {
          StageData original = result;
          result = new StageData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override StageData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.StageData.Descriptor; }
      }

      public override StageData DefaultInstanceForType {
        get { return global::Master.StageData.DefaultInstance; }
      }

      public override StageData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageData) {
          return MergeFrom((StageData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StageData other) {
        if (other == global::Master.StageData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.DungeonId != 0) {
          DungeonId = other.DungeonId;
        }
        if (other.FloorNo != 0) {
          FloorNo = other.FloorNo;
        }
        if (other.EnemySetId != 0) {
          EnemySetId = other.EnemySetId;
        }
        if (other.ItemSetId != 0) {
          ItemSetId = other.ItemSetId;
        }
        if (other.TrapSetId != 0) {
          TrapSetId = other.TrapSetId;
        }
        if (other.GoalSetId != 0) {
          GoalSetId = other.GoalSetId;
        }
        if (other.GoalCount != 0) {
          GoalCount = other.GoalCount;
        }
        if (other.MaskType != 0) {
          MaskType = other.MaskType;
        }
        if (other.NextStageParam != "") {
          NextStageParam = other.NextStageParam;
        }
        if (other.StageTitle != "") {
          StageTitle = other.StageTitle;
        }
        if (other.DriverName != "") {
          DriverName = other.DriverName;
        }
        if (other.DriverParam != "") {
          DriverParam = other.DriverParam;
        }
        if (other.FixedRoomGroupId != "") {
          FixedRoomGroupId = other.FixedRoomGroupId;
        }
        if (other.RandomRoomGroupId != "") {
          RandomRoomGroupId = other.RandomRoomGroupId;
        }
        if (other.Seeds != "") {
          Seeds = other.Seeds;
        }
        if (other.BaseName != "") {
          BaseName = other.BaseName;
        }
        if (other.MapchipName != "") {
          MapchipName = other.MapchipName;
        }
        if (other.AnimationName != "") {
          AnimationName = other.AnimationName;
        }
        if (other.TextureName != "") {
          TextureName = other.TextureName;
        }
        if (other.BgmName != "") {
          BgmName = other.BgmName;
        }
        if (other.StepSoundName != "") {
          StepSoundName = other.StepSoundName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.dungeonId_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.floorNo_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.enemySetId_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.itemSetId_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.trapSetId_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.goalSetId_);
              break;
            }
            case 64: {
              input.ReadInt32(ref result.goalCount_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.maskType_);
              break;
            }
            case 82: {
              input.ReadString(ref result.nextStageParam_);
              break;
            }
            case 90: {
              input.ReadString(ref result.stageTitle_);
              break;
            }
            case 98: {
              input.ReadString(ref result.driverName_);
              break;
            }
            case 106: {
              input.ReadString(ref result.driverParam_);
              break;
            }
            case 114: {
              input.ReadString(ref result.fixedRoomGroupId_);
              break;
            }
            case 122: {
              input.ReadString(ref result.randomRoomGroupId_);
              break;
            }
            case 130: {
              input.ReadString(ref result.seeds_);
              break;
            }
            case 138: {
              input.ReadString(ref result.baseName_);
              break;
            }
            case 146: {
              input.ReadString(ref result.mapchipName_);
              break;
            }
            case 154: {
              input.ReadString(ref result.animationName_);
              break;
            }
            case 162: {
              input.ReadString(ref result.textureName_);
              break;
            }
            case 170: {
              input.ReadString(ref result.bgmName_);
              break;
            }
            case 178: {
              input.ReadString(ref result.stepSoundName_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public int DungeonId {
        get { return result.DungeonId; }
        set { SetDungeonId(value); }
      }
      public Builder SetDungeonId(int value) {
        PrepareBuilder();
        result.dungeonId_ = value;
        return this;
      }
      public Builder ClearDungeonId() {
        PrepareBuilder();
        result.dungeonId_ = 0;
        return this;
      }

      public int FloorNo {
        get { return result.FloorNo; }
        set { SetFloorNo(value); }
      }
      public Builder SetFloorNo(int value) {
        PrepareBuilder();
        result.floorNo_ = value;
        return this;
      }
      public Builder ClearFloorNo() {
        PrepareBuilder();
        result.floorNo_ = 0;
        return this;
      }

      public int EnemySetId {
        get { return result.EnemySetId; }
        set { SetEnemySetId(value); }
      }
      public Builder SetEnemySetId(int value) {
        PrepareBuilder();
        result.enemySetId_ = value;
        return this;
      }
      public Builder ClearEnemySetId() {
        PrepareBuilder();
        result.enemySetId_ = 0;
        return this;
      }

      public int ItemSetId {
        get { return result.ItemSetId; }
        set { SetItemSetId(value); }
      }
      public Builder SetItemSetId(int value) {
        PrepareBuilder();
        result.itemSetId_ = value;
        return this;
      }
      public Builder ClearItemSetId() {
        PrepareBuilder();
        result.itemSetId_ = 0;
        return this;
      }

      public int TrapSetId {
        get { return result.TrapSetId; }
        set { SetTrapSetId(value); }
      }
      public Builder SetTrapSetId(int value) {
        PrepareBuilder();
        result.trapSetId_ = value;
        return this;
      }
      public Builder ClearTrapSetId() {
        PrepareBuilder();
        result.trapSetId_ = 0;
        return this;
      }

      public int GoalSetId {
        get { return result.GoalSetId; }
        set { SetGoalSetId(value); }
      }
      public Builder SetGoalSetId(int value) {
        PrepareBuilder();
        result.goalSetId_ = value;
        return this;
      }
      public Builder ClearGoalSetId() {
        PrepareBuilder();
        result.goalSetId_ = 0;
        return this;
      }

      public int GoalCount {
        get { return result.GoalCount; }
        set { SetGoalCount(value); }
      }
      public Builder SetGoalCount(int value) {
        PrepareBuilder();
        result.goalCount_ = value;
        return this;
      }
      public Builder ClearGoalCount() {
        PrepareBuilder();
        result.goalCount_ = 0;
        return this;
      }

      public int MaskType {
        get { return result.MaskType; }
        set { SetMaskType(value); }
      }
      public Builder SetMaskType(int value) {
        PrepareBuilder();
        result.maskType_ = value;
        return this;
      }
      public Builder ClearMaskType() {
        PrepareBuilder();
        result.maskType_ = 0;
        return this;
      }

      public string NextStageParam {
        get { return result.NextStageParam; }
        set { SetNextStageParam(value); }
      }
      public Builder SetNextStageParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nextStageParam_ = value;
        return this;
      }
      public Builder ClearNextStageParam() {
        PrepareBuilder();
        result.nextStageParam_ = "";
        return this;
      }

      public string StageTitle {
        get { return result.StageTitle; }
        set { SetStageTitle(value); }
      }
      public Builder SetStageTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stageTitle_ = value;
        return this;
      }
      public Builder ClearStageTitle() {
        PrepareBuilder();
        result.stageTitle_ = "";
        return this;
      }

      public string DriverName {
        get { return result.DriverName; }
        set { SetDriverName(value); }
      }
      public Builder SetDriverName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.driverName_ = value;
        return this;
      }
      public Builder ClearDriverName() {
        PrepareBuilder();
        result.driverName_ = "";
        return this;
      }

      public string DriverParam {
        get { return result.DriverParam; }
        set { SetDriverParam(value); }
      }
      public Builder SetDriverParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.driverParam_ = value;
        return this;
      }
      public Builder ClearDriverParam() {
        PrepareBuilder();
        result.driverParam_ = "";
        return this;
      }

      public string FixedRoomGroupId {
        get { return result.FixedRoomGroupId; }
        set { SetFixedRoomGroupId(value); }
      }
      public Builder SetFixedRoomGroupId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fixedRoomGroupId_ = value;
        return this;
      }
      public Builder ClearFixedRoomGroupId() {
        PrepareBuilder();
        result.fixedRoomGroupId_ = "";
        return this;
      }

      public string RandomRoomGroupId {
        get { return result.RandomRoomGroupId; }
        set { SetRandomRoomGroupId(value); }
      }
      public Builder SetRandomRoomGroupId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.randomRoomGroupId_ = value;
        return this;
      }
      public Builder ClearRandomRoomGroupId() {
        PrepareBuilder();
        result.randomRoomGroupId_ = "";
        return this;
      }

      public string Seeds {
        get { return result.Seeds; }
        set { SetSeeds(value); }
      }
      public Builder SetSeeds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seeds_ = value;
        return this;
      }
      public Builder ClearSeeds() {
        PrepareBuilder();
        result.seeds_ = "";
        return this;
      }

      public string BaseName {
        get { return result.BaseName; }
        set { SetBaseName(value); }
      }
      public Builder SetBaseName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.baseName_ = value;
        return this;
      }
      public Builder ClearBaseName() {
        PrepareBuilder();
        result.baseName_ = "";
        return this;
      }

      public string MapchipName {
        get { return result.MapchipName; }
        set { SetMapchipName(value); }
      }
      public Builder SetMapchipName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mapchipName_ = value;
        return this;
      }
      public Builder ClearMapchipName() {
        PrepareBuilder();
        result.mapchipName_ = "";
        return this;
      }

      public string AnimationName {
        get { return result.AnimationName; }
        set { SetAnimationName(value); }
      }
      public Builder SetAnimationName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.animationName_ = value;
        return this;
      }
      public Builder ClearAnimationName() {
        PrepareBuilder();
        result.animationName_ = "";
        return this;
      }

      public string TextureName {
        get { return result.TextureName; }
        set { SetTextureName(value); }
      }
      public Builder SetTextureName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.textureName_ = value;
        return this;
      }
      public Builder ClearTextureName() {
        PrepareBuilder();
        result.textureName_ = "";
        return this;
      }

      public string BgmName {
        get { return result.BgmName; }
        set { SetBgmName(value); }
      }
      public Builder SetBgmName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bgmName_ = value;
        return this;
      }
      public Builder ClearBgmName() {
        PrepareBuilder();
        result.bgmName_ = "";
        return this;
      }

      public string StepSoundName {
        get { return result.StepSoundName; }
        set { SetStepSoundName(value); }
      }
      public Builder SetStepSoundName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stepSoundName_ = value;
        return this;
      }
      public Builder ClearStepSoundName() {
        PrepareBuilder();
        result.stepSoundName_ = "";
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoomData : pb::GeneratedMessage<RoomData, RoomData.Builder> {
    public RoomData() { }
    private static readonly RoomData defaultInstance = new RoomData().MakeReadOnly();
    private static readonly string[] _roomDataFieldNames = new string[] { "attribute", "direction", "enemy_lots_count", "event_command", "group_id", "height", "item_lots_count", "tmx_file_name", "trap_lots_count", "width" };
    private static readonly uint[] _roomDataFieldTags = new uint[] { 80, 72, 24, 66, 8, 56, 32, 18, 40, 48 };
    public static RoomData DefaultInstance {
      get { return defaultInstance; }
    }

    public override RoomData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override RoomData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_RoomData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<RoomData, RoomData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_RoomData__FieldAccessorTable; }
    }

    public const int GroupIdFieldNumber = 1;
    private int groupId_;
    public int GroupId {
      get { return groupId_; }
      set { groupId_ = value; }
    }

    public const int TmxFileNameFieldNumber = 2;
    private string tmxFileName_ = "";
    public string TmxFileName {
      get { return tmxFileName_; }
      set { tmxFileName_ = value; }
    }

    public const int EnemyLotsCountFieldNumber = 3;
    private int enemyLotsCount_;
    public int EnemyLotsCount {
      get { return enemyLotsCount_; }
      set { enemyLotsCount_ = value; }
    }

    public const int ItemLotsCountFieldNumber = 4;
    private int itemLotsCount_;
    public int ItemLotsCount {
      get { return itemLotsCount_; }
      set { itemLotsCount_ = value; }
    }

    public const int TrapLotsCountFieldNumber = 5;
    private int trapLotsCount_;
    public int TrapLotsCount {
      get { return trapLotsCount_; }
      set { trapLotsCount_ = value; }
    }

    public const int WidthFieldNumber = 6;
    private int width_;
    public int Width {
      get { return width_; }
      set { width_ = value; }
    }

    public const int HeightFieldNumber = 7;
    private int height_;
    public int Height {
      get { return height_; }
      set { height_ = value; }
    }

    public const int EventCommandFieldNumber = 8;
    private string eventCommand_ = "";
    public string EventCommand {
      get { return eventCommand_; }
      set { eventCommand_ = value; }
    }

    public const int DirectionFieldNumber = 9;
    private int direction_;
    public int Direction {
      get { return direction_; }
      set { direction_ = value; }
    }

    public const int AttributeFieldNumber = 10;
    private int attribute_;
    public int Attribute {
      get { return attribute_; }
      set { attribute_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roomDataFieldNames;
      if (GroupId != 0) {
        output.WriteInt32(1, field_names[4], GroupId);
      }
      if (TmxFileName != "") {
        output.WriteString(2, field_names[7], TmxFileName);
      }
      if (EnemyLotsCount != 0) {
        output.WriteInt32(3, field_names[2], EnemyLotsCount);
      }
      if (ItemLotsCount != 0) {
        output.WriteInt32(4, field_names[6], ItemLotsCount);
      }
      if (TrapLotsCount != 0) {
        output.WriteInt32(5, field_names[8], TrapLotsCount);
      }
      if (Width != 0) {
        output.WriteInt32(6, field_names[9], Width);
      }
      if (Height != 0) {
        output.WriteInt32(7, field_names[5], Height);
      }
      if (EventCommand != "") {
        output.WriteString(8, field_names[3], EventCommand);
      }
      if (Direction != 0) {
        output.WriteInt32(9, field_names[1], Direction);
      }
      if (Attribute != 0) {
        output.WriteInt32(10, field_names[0], Attribute);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (GroupId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, GroupId);
      }
      if (TmxFileName != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, TmxFileName);
      }
      if (EnemyLotsCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, EnemyLotsCount);
      }
      if (ItemLotsCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, ItemLotsCount);
      }
      if (TrapLotsCount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, TrapLotsCount);
      }
      if (Width != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Width);
      }
      if (Height != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Height);
      }
      if (EventCommand != "") {
        size += pb::CodedOutputStream.ComputeStringSize(8, EventCommand);
      }
      if (Direction != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Direction);
      }
      if (Attribute != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Attribute);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RoomData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoomData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoomData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoomData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoomData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoomData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RoomData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoomData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private RoomData result;

      private RoomData PrepareBuilder() {
        if (resultIsReadOnly) {
          RoomData original = result;
          result = new RoomData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override RoomData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.RoomData.Descriptor; }
      }

      public override RoomData DefaultInstanceForType {
        get { return global::Master.RoomData.DefaultInstance; }
      }

      public override RoomData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoomData) {
          return MergeFrom((RoomData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(RoomData other) {
        if (other == global::Master.RoomData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.GroupId != 0) {
          GroupId = other.GroupId;
        }
        if (other.TmxFileName != "") {
          TmxFileName = other.TmxFileName;
        }
        if (other.EnemyLotsCount != 0) {
          EnemyLotsCount = other.EnemyLotsCount;
        }
        if (other.ItemLotsCount != 0) {
          ItemLotsCount = other.ItemLotsCount;
        }
        if (other.TrapLotsCount != 0) {
          TrapLotsCount = other.TrapLotsCount;
        }
        if (other.Width != 0) {
          Width = other.Width;
        }
        if (other.Height != 0) {
          Height = other.Height;
        }
        if (other.EventCommand != "") {
          EventCommand = other.EventCommand;
        }
        if (other.Direction != 0) {
          Direction = other.Direction;
        }
        if (other.Attribute != 0) {
          Attribute = other.Attribute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roomDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roomDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.groupId_);
              break;
            }
            case 18: {
              input.ReadString(ref result.tmxFileName_);
              break;
            }
            case 24: {
              input.ReadInt32(ref result.enemyLotsCount_);
              break;
            }
            case 32: {
              input.ReadInt32(ref result.itemLotsCount_);
              break;
            }
            case 40: {
              input.ReadInt32(ref result.trapLotsCount_);
              break;
            }
            case 48: {
              input.ReadInt32(ref result.width_);
              break;
            }
            case 56: {
              input.ReadInt32(ref result.height_);
              break;
            }
            case 66: {
              input.ReadString(ref result.eventCommand_);
              break;
            }
            case 72: {
              input.ReadInt32(ref result.direction_);
              break;
            }
            case 80: {
              input.ReadInt32(ref result.attribute_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(int value) {
        PrepareBuilder();
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.groupId_ = 0;
        return this;
      }

      public string TmxFileName {
        get { return result.TmxFileName; }
        set { SetTmxFileName(value); }
      }
      public Builder SetTmxFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tmxFileName_ = value;
        return this;
      }
      public Builder ClearTmxFileName() {
        PrepareBuilder();
        result.tmxFileName_ = "";
        return this;
      }

      public int EnemyLotsCount {
        get { return result.EnemyLotsCount; }
        set { SetEnemyLotsCount(value); }
      }
      public Builder SetEnemyLotsCount(int value) {
        PrepareBuilder();
        result.enemyLotsCount_ = value;
        return this;
      }
      public Builder ClearEnemyLotsCount() {
        PrepareBuilder();
        result.enemyLotsCount_ = 0;
        return this;
      }

      public int ItemLotsCount {
        get { return result.ItemLotsCount; }
        set { SetItemLotsCount(value); }
      }
      public Builder SetItemLotsCount(int value) {
        PrepareBuilder();
        result.itemLotsCount_ = value;
        return this;
      }
      public Builder ClearItemLotsCount() {
        PrepareBuilder();
        result.itemLotsCount_ = 0;
        return this;
      }

      public int TrapLotsCount {
        get { return result.TrapLotsCount; }
        set { SetTrapLotsCount(value); }
      }
      public Builder SetTrapLotsCount(int value) {
        PrepareBuilder();
        result.trapLotsCount_ = value;
        return this;
      }
      public Builder ClearTrapLotsCount() {
        PrepareBuilder();
        result.trapLotsCount_ = 0;
        return this;
      }

      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.width_ = 0;
        return this;
      }

      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.height_ = 0;
        return this;
      }

      public string EventCommand {
        get { return result.EventCommand; }
        set { SetEventCommand(value); }
      }
      public Builder SetEventCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eventCommand_ = value;
        return this;
      }
      public Builder ClearEventCommand() {
        PrepareBuilder();
        result.eventCommand_ = "";
        return this;
      }

      public int Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(int value) {
        PrepareBuilder();
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.direction_ = 0;
        return this;
      }

      public int Attribute {
        get { return result.Attribute; }
        set { SetAttribute(value); }
      }
      public Builder SetAttribute(int value) {
        PrepareBuilder();
        result.attribute_ = value;
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GoalSetData : pb::GeneratedMessage<GoalSetData, GoalSetData.Builder> {
    public GoalSetData() { }
    private static readonly GoalSetData defaultInstance = new GoalSetData().MakeReadOnly();
    private static readonly string[] _goalSetDataFieldNames = new string[] { "id", "params" };
    private static readonly uint[] _goalSetDataFieldTags = new uint[] { 8, 18 };
    public static GoalSetData DefaultInstance {
      get { return defaultInstance; }
    }

    public override GoalSetData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override GoalSetData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_GoalSetData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<GoalSetData, GoalSetData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_GoalSetData__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int ParamsFieldNumber = 2;
    private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParamsList {
      get { return pbc::Lists.AsReadOnly(params_); }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public string GetParams(int index) {
      return params_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _goalSetDataFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (params_.Count > 0) {
        output.WriteStringArray(2, field_names[1], params_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      {
        int dataSize = 0;
        foreach (string element in ParamsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * params_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GoalSetData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GoalSetData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GoalSetData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GoalSetData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GoalSetData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GoalSetData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GoalSetData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GoalSetData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GoalSetData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GoalSetData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GoalSetData MakeReadOnly() {
      params_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GoalSetData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GoalSetData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GoalSetData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private GoalSetData result;

      private GoalSetData PrepareBuilder() {
        if (resultIsReadOnly) {
          GoalSetData original = result;
          result = new GoalSetData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override GoalSetData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.GoalSetData.Descriptor; }
      }

      public override GoalSetData DefaultInstanceForType {
        get { return global::Master.GoalSetData.DefaultInstance; }
      }

      public override GoalSetData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GoalSetData) {
          return MergeFrom((GoalSetData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(GoalSetData other) {
        if (other == global::Master.GoalSetData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_goalSetDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _goalSetDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.params_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public pbc::IPopsicleList<string> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public string GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder AddParams(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageSetItem : pb::GeneratedMessage<StageSetItem, StageSetItem.Builder> {
    public StageSetItem() { }
    private static readonly StageSetItem defaultInstance = new StageSetItem().MakeReadOnly();
    private static readonly string[] _stageSetItemFieldNames = new string[] { "id", "num" };
    private static readonly uint[] _stageSetItemFieldTags = new uint[] { 10, 16 };
    public static StageSetItem DefaultInstance {
      get { return defaultInstance; }
    }

    public override StageSetItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StageSetItem ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_StageSetItem__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StageSetItem, StageSetItem.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_StageSetItem__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int NumFieldNumber = 2;
    private int num_;
    public int Num {
      get { return num_; }
      set { num_ = value; }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stageSetItemFieldNames;
      if (Id != "") {
        output.WriteString(1, field_names[0], Id);
      }
      if (Num != 0) {
        output.WriteInt32(2, field_names[1], Num);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Num != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StageSetItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageSetItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageSetItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageSetItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageSetItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageSetItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageSetItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageSetItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageSetItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageSetItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageSetItem MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageSetItem prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageSetItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageSetItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StageSetItem result;

      private StageSetItem PrepareBuilder() {
        if (resultIsReadOnly) {
          StageSetItem original = result;
          result = new StageSetItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override StageSetItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.StageSetItem.Descriptor; }
      }

      public override StageSetItem DefaultInstanceForType {
        get { return global::Master.StageSetItem.DefaultInstance; }
      }

      public override StageSetItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageSetItem) {
          return MergeFrom((StageSetItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StageSetItem other) {
        if (other == global::Master.StageSetItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != "") {
          Id = other.Id;
        }
        if (other.Num != 0) {
          Num = other.Num;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageSetItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageSetItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              input.ReadInt32(ref result.num_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = "";
        return this;
      }

      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.num_ = 0;
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageSetList : pb::GeneratedMessage<StageSetList, StageSetList.Builder> {
    public StageSetList() { }
    private static readonly StageSetList defaultInstance = new StageSetList().MakeReadOnly();
    private static readonly string[] _stageSetListFieldNames = new string[] { "items", "total" };
    private static readonly uint[] _stageSetListFieldTags = new uint[] { 18, 8 };
    public static StageSetList DefaultInstance {
      get { return defaultInstance; }
    }

    public override StageSetList DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StageSetList ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_StageSetList__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StageSetList, StageSetList.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_StageSetList__FieldAccessorTable; }
    }

    public const int TotalFieldNumber = 1;
    private int total_;
    public int Total {
      get { return total_; }
      set { total_ = value; }
    }

    public const int ItemsFieldNumber = 2;
    private pbc::PopsicleList<global::Master.StageSetItem> items_ = new pbc::PopsicleList<global::Master.StageSetItem>();
    public scg::IList<global::Master.StageSetItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::Master.StageSetItem GetItems(int index) {
      return items_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stageSetListFieldNames;
      if (Total != 0) {
        output.WriteInt32(1, field_names[1], Total);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], items_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Total != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Total);
      }
      foreach (global::Master.StageSetItem element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StageSetList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageSetList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageSetList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageSetList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageSetList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageSetList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageSetList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageSetList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageSetList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageSetList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageSetList MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageSetList prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageSetList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageSetList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StageSetList result;

      private StageSetList PrepareBuilder() {
        if (resultIsReadOnly) {
          StageSetList original = result;
          result = new StageSetList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override StageSetList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.StageSetList.Descriptor; }
      }

      public override StageSetList DefaultInstanceForType {
        get { return global::Master.StageSetList.DefaultInstance; }
      }

      public override StageSetList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageSetList) {
          return MergeFrom((StageSetList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StageSetList other) {
        if (other == global::Master.StageSetList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Total != 0) {
          Total = other.Total;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageSetListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageSetListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.total_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.items_, global::Master.StageSetItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Total {
        get { return result.Total; }
        set { SetTotal(value); }
      }
      public Builder SetTotal(int value) {
        PrepareBuilder();
        result.total_ = value;
        return this;
      }
      public Builder ClearTotal() {
        PrepareBuilder();
        result.total_ = 0;
        return this;
      }

      public pbc::IPopsicleList<global::Master.StageSetItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::Master.StageSetItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::Master.StageSetItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::Master.StageSetItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::Master.StageSetItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::Master.StageSetItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::Master.StageSetItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageSetData : pb::GeneratedMessage<StageSetData, StageSetData.Builder> {
    public StageSetData() { }
    private static readonly StageSetData defaultInstance = new StageSetData().MakeReadOnly();
    private static readonly string[] _stageSetDataFieldNames = new string[] { "enemy_sets", "id", "item_sets", "trap_sets" };
    private static readonly uint[] _stageSetDataFieldTags = new uint[] { 18, 8, 26, 34 };
    public static StageSetData DefaultInstance {
      get { return defaultInstance; }
    }

    public override StageSetData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override StageSetData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Master.Master.internal__static_Master_StageSetData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<StageSetData, StageSetData.Builder> InternalFieldAccessors {
      get { return global::Master.Master.internal__static_Master_StageSetData__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set { id_ = value; }
    }

    public const int EnemySetsFieldNumber = 2;
    private pbc::PopsicleList<global::Master.StageSetList> enemySets_ = new pbc::PopsicleList<global::Master.StageSetList>();
    public scg::IList<global::Master.StageSetList> EnemySetsList {
      get { return enemySets_; }
    }
    public int EnemySetsCount {
      get { return enemySets_.Count; }
    }
    public global::Master.StageSetList GetEnemySets(int index) {
      return enemySets_[index];
    }

    public const int ItemSetsFieldNumber = 3;
    private pbc::PopsicleList<global::Master.StageSetList> itemSets_ = new pbc::PopsicleList<global::Master.StageSetList>();
    public scg::IList<global::Master.StageSetList> ItemSetsList {
      get { return itemSets_; }
    }
    public int ItemSetsCount {
      get { return itemSets_.Count; }
    }
    public global::Master.StageSetList GetItemSets(int index) {
      return itemSets_[index];
    }

    public const int TrapSetsFieldNumber = 4;
    private pbc::PopsicleList<global::Master.StageSetList> trapSets_ = new pbc::PopsicleList<global::Master.StageSetList>();
    public scg::IList<global::Master.StageSetList> TrapSetsList {
      get { return trapSets_; }
    }
    public int TrapSetsCount {
      get { return trapSets_.Count; }
    }
    public global::Master.StageSetList GetTrapSets(int index) {
      return trapSets_[index];
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stageSetDataFieldNames;
      if (Id != 0) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (enemySets_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], enemySets_);
      }
      if (itemSets_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], itemSets_);
      }
      if (trapSets_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], trapSets_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      foreach (global::Master.StageSetList element in EnemySetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::Master.StageSetList element in ItemSetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::Master.StageSetList element in TrapSetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StageSetData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageSetData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageSetData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StageSetData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StageSetData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageSetData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StageSetData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StageSetData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StageSetData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StageSetData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StageSetData MakeReadOnly() {
      enemySets_.MakeReadOnly();
      itemSets_.MakeReadOnly();
      trapSets_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StageSetData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StageSetData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StageSetData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private StageSetData result;

      private StageSetData PrepareBuilder() {
        if (resultIsReadOnly) {
          StageSetData original = result;
          result = new StageSetData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return true; }
      }

      protected override StageSetData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Master.StageSetData.Descriptor; }
      }

      public override StageSetData DefaultInstanceForType {
        get { return global::Master.StageSetData.DefaultInstance; }
      }

      public override StageSetData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StageSetData) {
          return MergeFrom((StageSetData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(StageSetData other) {
        if (other == global::Master.StageSetData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.Id != 0) {
          Id = other.Id;
        }
        if (other.enemySets_.Count != 0) {
          result.enemySets_.Add(other.enemySets_);
        }
        if (other.itemSets_.Count != 0) {
          result.itemSets_.Add(other.itemSets_);
        }
        if (other.trapSets_.Count != 0) {
          result.trapSets_.Add(other.trapSets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stageSetDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stageSetDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.enemySets_, global::Master.StageSetList.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.itemSets_, global::Master.StageSetList.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.trapSets_, global::Master.StageSetList.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_ = 0;
        return this;
      }

      public pbc::IPopsicleList<global::Master.StageSetList> EnemySetsList {
        get { return PrepareBuilder().enemySets_; }
      }
      public int EnemySetsCount {
        get { return result.EnemySetsCount; }
      }
      public global::Master.StageSetList GetEnemySets(int index) {
        return result.GetEnemySets(index);
      }
      public Builder SetEnemySets(int index, global::Master.StageSetList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemySets_[index] = value;
        return this;
      }
      public Builder SetEnemySets(int index, global::Master.StageSetList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.enemySets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEnemySets(global::Master.StageSetList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.enemySets_.Add(value);
        return this;
      }
      public Builder AddEnemySets(global::Master.StageSetList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.enemySets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEnemySets(scg::IEnumerable<global::Master.StageSetList> values) {
        PrepareBuilder();
        result.enemySets_.Add(values);
        return this;
      }
      public Builder ClearEnemySets() {
        PrepareBuilder();
        result.enemySets_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.StageSetList> ItemSetsList {
        get { return PrepareBuilder().itemSets_; }
      }
      public int ItemSetsCount {
        get { return result.ItemSetsCount; }
      }
      public global::Master.StageSetList GetItemSets(int index) {
        return result.GetItemSets(index);
      }
      public Builder SetItemSets(int index, global::Master.StageSetList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemSets_[index] = value;
        return this;
      }
      public Builder SetItemSets(int index, global::Master.StageSetList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.itemSets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItemSets(global::Master.StageSetList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemSets_.Add(value);
        return this;
      }
      public Builder AddItemSets(global::Master.StageSetList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.itemSets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItemSets(scg::IEnumerable<global::Master.StageSetList> values) {
        PrepareBuilder();
        result.itemSets_.Add(values);
        return this;
      }
      public Builder ClearItemSets() {
        PrepareBuilder();
        result.itemSets_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Master.StageSetList> TrapSetsList {
        get { return PrepareBuilder().trapSets_; }
      }
      public int TrapSetsCount {
        get { return result.TrapSetsCount; }
      }
      public global::Master.StageSetList GetTrapSets(int index) {
        return result.GetTrapSets(index);
      }
      public Builder SetTrapSets(int index, global::Master.StageSetList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.trapSets_[index] = value;
        return this;
      }
      public Builder SetTrapSets(int index, global::Master.StageSetList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.trapSets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTrapSets(global::Master.StageSetList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.trapSets_.Add(value);
        return this;
      }
      public Builder AddTrapSets(global::Master.StageSetList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.trapSets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTrapSets(scg::IEnumerable<global::Master.StageSetList> values) {
        PrepareBuilder();
        result.trapSets_.Add(values);
        return this;
      }
      public Builder ClearTrapSets() {
        PrepareBuilder();
        result.trapSets_.Clear();
        return this;
      }
    }
  }

  #endregion

}

#endregion Designer generated code
