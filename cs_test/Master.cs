// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace Master {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Master {

  }
  #region Enums
  public enum Property {
    NONE = 0,
    FIRE = 1,
    WATER = 2,
    TREE = 3,
    LIGHT = 4,
    DARK = 5,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PbxHeader : pb.IMessage {
    public PbxHeader() { }
    private static readonly PbxHeader defaultInstance = new PbxHeader();
    public static PbxHeader DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class IntIndexEntry : pb.IMessage {
        public IntIndexEntry() { }
        private static readonly IntIndexEntry defaultInstance = new IntIndexEntry();
        public static IntIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public int Key;

        public int Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          IntIndexEntry other = obj as IntIndexEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Key);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Value);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StringIndexEntry : pb.IMessage {
        public StringIndexEntry() { }
        private static readonly StringIndexEntry defaultInstance = new StringIndexEntry();
        public static StringIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public string Key = "";

        public int Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          StringIndexEntry other = obj as StringIndexEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadString(ref this.Key);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Value);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

    public global::Master.PbxHeader.Types.IntIndexEntry[] IntIndex;

    public global::Master.PbxHeader.Types.StringIndexEntry[] StringIndex;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PbxHeader other = obj as PbxHeader;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, out this.IntIndex);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, out this.StringIndex);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PresentCommand : pb.IMessage {
    public PresentCommand() { }
    private static readonly PresentCommand defaultInstance = new PresentCommand();
    public static PresentCommand DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StackItem : pb.IMessage {
        public StackItem() { }
        private static readonly StackItem defaultInstance = new StackItem();
        public static StackItem DefaultInstance {
          get { return defaultInstance; }
        }

        public int Id;

        public int Num;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          StackItem other = obj as StackItem;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Id);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Num);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Fang : pb.IMessage {
        public Fang() { }
        private static readonly Fang defaultInstance = new Fang();
        public static Fang DefaultInstance {
          get { return defaultInstance; }
        }

        public int CardId;

        public int Level;

        public int Num;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          Fang other = obj as Fang;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.CardId);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Level);
                break;
              }
              case 24: {
                input.ReadInt32(ref this.Num);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Armament : pb.IMessage {
        public Armament() { }
        private static readonly Armament defaultInstance = new Armament();
        public static Armament DefaultInstance {
          get { return defaultInstance; }
        }

        public int ArmId;

        public int Level;

        public int FixedHp;

        public int FixedAttack;

        public int FixedDefense;

        public int SoulId0;

        public int SoulLevel0;

        public int SlotNum;

        public int Num;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          Armament other = obj as Armament;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.ArmId);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Level);
                break;
              }
              case 24: {
                input.ReadInt32(ref this.FixedHp);
                break;
              }
              case 32: {
                input.ReadInt32(ref this.FixedAttack);
                break;
              }
              case 40: {
                input.ReadInt32(ref this.FixedDefense);
                break;
              }
              case 48: {
                input.ReadInt32(ref this.SoulId0);
                break;
              }
              case 56: {
                input.ReadInt32(ref this.SoulLevel0);
                break;
              }
              case 64: {
                input.ReadInt32(ref this.SlotNum);
                break;
              }
              case 72: {
                input.ReadInt32(ref this.Num);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

    public int Emerald;

    public int Gold;

    public int Scale;

    public global::Master.PresentCommand.Types.StackItem[] StackItems;

    public global::Master.PresentCommand.Types.Fang[] Cards;

    public global::Master.PresentCommand.Types.Armament[] Arms;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PresentCommand other = obj as PresentCommand;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Emerald);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Gold);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Scale);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, out this.StackItems);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, out this.Cards);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, out this.Arms);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FangTemplate : pb.IMessage {
    public FangTemplate() { }
    private static readonly FangTemplate defaultInstance = new FangTemplate();
    public static FangTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StackItemBonus : pb.IMessage {
        public StackItemBonus() { }
        private static readonly StackItemBonus defaultInstance = new StackItemBonus();
        public static StackItemBonus DefaultInstance {
          get { return defaultInstance; }
        }

        public int Dummy;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          StackItemBonus other = obj as StackItemBonus;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Dummy);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StackItemBonusEntry : pb.IMessage {
        public StackItemBonusEntry() { }
        private static readonly StackItemBonusEntry defaultInstance = new StackItemBonusEntry();
        public static StackItemBonusEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public string Key = "";

        public float Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          StackItemBonusEntry other = obj as StackItemBonusEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadString(ref this.Key);
                break;
              }
              case 21: {
                input.ReadFloat(ref this.Value);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DropStackItemBonusEntry : pb.IMessage {
        public DropStackItemBonusEntry() { }
        private static readonly DropStackItemBonusEntry defaultInstance = new DropStackItemBonusEntry();
        public static DropStackItemBonusEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public string Key = "";

        public float Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          DropStackItemBonusEntry other = obj as DropStackItemBonusEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadString(ref this.Key);
                break;
              }
              case 21: {
                input.ReadFloat(ref this.Value);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

    public int Id;

    public string Name = "";

    public int Rarity;

    public int GrowthType;

    public int EnemyNo;

    public string Property = "";

    public int BraveGuage;

    public int BaseHp;

    public int BaseAttack;

    public int BaseDefense;

    public int MaxLevel;

    public int MaxHp;

    public int MaxAttack;

    public int MaxDefense;

    public int BurstHpRate;

    public int SkillId;

    public int PskillId;

    public int PvpSkillId;

    public int PvpSoulId;

    public int Gold;

    public int PlusExp;

    public string Serif = "";

    public int Cost;

    public int BurstCost;

    public bool Unuse;

    public List<string> LimitBreakType = new List<string>();

    public int LimitBreakItem;

    public int DefaultPlusHp;

    public int DefaultPlusAttack;

    public int DefaultPlusDefense;

    public string SpecialText = "";

    public int PlusSkillExp;

    public int PlusSkillRarity;

    public bool NoPlusSkillPropertyBonus;

    public List<string> Attribute = new List<string>();

    public global::Master.FangTemplate.Types.StackItemBonusEntry[] StackItemBonus;

    public global::Master.FangTemplate.Types.DropStackItemBonusEntry[] DropStackItemBonus;

    public string OpenAt = "";

    public string SpecialLabel = "";

    public int PlusLuck;

    public int WeaponAbilityId;

    public int ShieldAbilityId;

    public int Point;

    public string PvpAttribute0 = "";

    public string PvpAttribute1 = "";

    public string PvpAttribute2 = "";

    public string PvpAttribute3 = "";

    public string PvpAttribute4 = "";

    public List<string> AutoType = new List<string>();

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      FangTemplate other = obj as FangTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Rarity);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.GrowthType);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.EnemyNo);
            break;
          }
          case 50: {
            input.ReadString(ref this.Property);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.BraveGuage);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.BaseHp);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.BaseAttack);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.BaseDefense);
            break;
          }
          case 88: {
            input.ReadInt32(ref this.MaxLevel);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.MaxHp);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.MaxAttack);
            break;
          }
          case 112: {
            input.ReadInt32(ref this.MaxDefense);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.BurstHpRate);
            break;
          }
          case 128: {
            input.ReadInt32(ref this.SkillId);
            break;
          }
          case 136: {
            input.ReadInt32(ref this.PskillId);
            break;
          }
          case 144: {
            input.ReadInt32(ref this.PvpSkillId);
            break;
          }
          case 152: {
            input.ReadInt32(ref this.PvpSoulId);
            break;
          }
          case 160: {
            input.ReadInt32(ref this.Gold);
            break;
          }
          case 168: {
            input.ReadInt32(ref this.PlusExp);
            break;
          }
          case 178: {
            input.ReadString(ref this.Serif);
            break;
          }
          case 184: {
            input.ReadInt32(ref this.Cost);
            break;
          }
          case 192: {
            input.ReadInt32(ref this.BurstCost);
            break;
          }
          case 200: {
            input.ReadBool(ref this.Unuse);
            break;
          }
          case 210: {
            input.ReadStringArray(tag, this.LimitBreakType);
            break;
          }
          case 216: {
            input.ReadInt32(ref this.LimitBreakItem);
            break;
          }
          case 224: {
            input.ReadInt32(ref this.DefaultPlusHp);
            break;
          }
          case 232: {
            input.ReadInt32(ref this.DefaultPlusAttack);
            break;
          }
          case 240: {
            input.ReadInt32(ref this.DefaultPlusDefense);
            break;
          }
          case 250: {
            input.ReadString(ref this.SpecialText);
            break;
          }
          case 256: {
            input.ReadInt32(ref this.PlusSkillExp);
            break;
          }
          case 264: {
            input.ReadInt32(ref this.PlusSkillRarity);
            break;
          }
          case 272: {
            input.ReadBool(ref this.NoPlusSkillPropertyBonus);
            break;
          }
          case 282: {
            input.ReadStringArray(tag, this.Attribute);
            break;
          }
          case 290: {
            input.ReadMessageArray(tag, out this.StackItemBonus);
            break;
          }
          case 298: {
            input.ReadMessageArray(tag, out this.DropStackItemBonus);
            break;
          }
          case 306: {
            input.ReadString(ref this.OpenAt);
            break;
          }
          case 314: {
            input.ReadString(ref this.SpecialLabel);
            break;
          }
          case 320: {
            input.ReadInt32(ref this.PlusLuck);
            break;
          }
          case 328: {
            input.ReadInt32(ref this.WeaponAbilityId);
            break;
          }
          case 336: {
            input.ReadInt32(ref this.ShieldAbilityId);
            break;
          }
          case 344: {
            input.ReadInt32(ref this.Point);
            break;
          }
          case 354: {
            input.ReadString(ref this.PvpAttribute0);
            break;
          }
          case 362: {
            input.ReadString(ref this.PvpAttribute1);
            break;
          }
          case 370: {
            input.ReadString(ref this.PvpAttribute2);
            break;
          }
          case 378: {
            input.ReadString(ref this.PvpAttribute3);
            break;
          }
          case 386: {
            input.ReadString(ref this.PvpAttribute4);
            break;
          }
          case 394: {
            input.ReadStringArray(tag, this.AutoType);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionSkill : pb.IMessage {
    public ActionSkill() { }
    private static readonly ActionSkill defaultInstance = new ActionSkill();
    public static ActionSkill DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public string Param = "";

    public string BurstParam = "";

    public int BaseTurn;

    public int LevelMax;

    public int SkillLevelRate;

    public int SkillLevelRate2;

    public string Desc = "";

    public string BurstDesc = "";

    public string Desc2 = "";

    public string BurstDesc2 = "";

    public string Memo1 = "";

    public string Memo2 = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      ActionSkill other = obj as ActionSkill;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Param);
            break;
          }
          case 34: {
            input.ReadString(ref this.BurstParam);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.BaseTurn);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.LevelMax);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.SkillLevelRate);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.SkillLevelRate2);
            break;
          }
          case 74: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 82: {
            input.ReadString(ref this.BurstDesc);
            break;
          }
          case 90: {
            input.ReadString(ref this.Desc2);
            break;
          }
          case 98: {
            input.ReadString(ref this.BurstDesc2);
            break;
          }
          case 106: {
            input.ReadString(ref this.Memo1);
            break;
          }
          case 114: {
            input.ReadString(ref this.Memo2);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PassiveSkill : pb.IMessage {
    public PassiveSkill() { }
    private static readonly PassiveSkill defaultInstance = new PassiveSkill();
    public static PassiveSkill DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public bool IsJson;

    public string Type = "";

    public string Param = "";

    public int Pow;

    public string BurstParam = "";

    public int BurstPow;

    public int PvpSoulNo;

    public string Desc = "";

    public string BurstDesc = "";

    public string Desc2 = "";

    public string BurstDesc2 = "";

    public string Memo1 = "";

    public string Memo2 = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PassiveSkill other = obj as PassiveSkill;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadBool(ref this.IsJson);
            break;
          }
          case 34: {
            input.ReadString(ref this.Type);
            break;
          }
          case 42: {
            input.ReadString(ref this.Param);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Pow);
            break;
          }
          case 58: {
            input.ReadString(ref this.BurstParam);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.BurstPow);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.PvpSoulNo);
            break;
          }
          case 82: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 90: {
            input.ReadString(ref this.BurstDesc);
            break;
          }
          case 98: {
            input.ReadString(ref this.Desc2);
            break;
          }
          case 106: {
            input.ReadString(ref this.BurstDesc2);
            break;
          }
          case 114: {
            input.ReadString(ref this.Memo1);
            break;
          }
          case 122: {
            input.ReadString(ref this.Memo2);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpSkill : pb.IMessage {
    public PvpSkill() { }
    private static readonly PvpSkill defaultInstance = new PvpSkill();
    public static PvpSkill DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public string Param = "";

    public int Charge;

    public int ChargeTurn;

    public string SkillTypeIcon = "";

    public string SkillType = "";

    public string GiveTarget = "";

    public int GiveAmount;

    public string Desc = "";

    public string Desc2 = "";

    public string Memo1 = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PvpSkill other = obj as PvpSkill;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Param);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Charge);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.ChargeTurn);
            break;
          }
          case 50: {
            input.ReadString(ref this.SkillTypeIcon);
            break;
          }
          case 58: {
            input.ReadString(ref this.SkillType);
            break;
          }
          case 66: {
            input.ReadString(ref this.GiveTarget);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.GiveAmount);
            break;
          }
          case 82: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 90: {
            input.ReadString(ref this.Desc2);
            break;
          }
          case 98: {
            input.ReadString(ref this.Memo1);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpSoul : pb.IMessage {
    public PvpSoul() { }
    private static readonly PvpSoul defaultInstance = new PvpSoul();
    public static PvpSoul DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public string Param = "";

    public string Target = "";

    public int Prob;

    public bool IsJewel;

    public string Desc = "";

    public string Desc2 = "";

    public string GameDesc = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PvpSoul other = obj as PvpSoul;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Param);
            break;
          }
          case 34: {
            input.ReadString(ref this.Target);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Prob);
            break;
          }
          case 48: {
            input.ReadBool(ref this.IsJewel);
            break;
          }
          case 58: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 66: {
            input.ReadString(ref this.Desc2);
            break;
          }
          case 74: {
            input.ReadString(ref this.GameDesc);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpAttribute : pb.IMessage {
    public PvpAttribute() { }
    private static readonly PvpAttribute defaultInstance = new PvpAttribute();
    public static PvpAttribute DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Name = "";

    public string Desc = "";

    public string Image = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PvpAttribute other = obj as PvpAttribute;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 34: {
            input.ReadString(ref this.Image);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HomeLevel : pb.IMessage {
    public HomeLevel() { }
    private static readonly HomeLevel defaultInstance = new HomeLevel();
    public static HomeLevel DefaultInstance {
      get { return defaultInstance; }
    }

    public int Level;

    public int Exp;

    public int StaminaMax;

    public int CostMax;

    public int ImageBase;

    public int ImageObject;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      HomeLevel other = obj as HomeLevel;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Level);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Exp);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.StaminaMax);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.CostMax);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.ImageBase);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.ImageObject);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MonsterLevel : pb.IMessage {
    public MonsterLevel() { }
    private static readonly MonsterLevel defaultInstance = new MonsterLevel();
    public static MonsterLevel DefaultInstance {
      get { return defaultInstance; }
    }

    public int Level;

    public int Exp;

    public int Dummy;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      MonsterLevel other = obj as MonsterLevel;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Level);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Exp);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Dummy);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FangDrop : pb.IMessage {
    public FangDrop() { }
    private static readonly FangDrop defaultInstance = new FangDrop();
    public static FangDrop DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string EnemyId0 = "";

    public int Level0;

    public int Rate0;

    public string EnemyId1 = "";

    public int Level1;

    public int Rate1;

    public string EnemyId2 = "";

    public int Level2;

    public int Rate2;

    public string EnemyId3 = "";

    public int Level3;

    public int Rate3;

    public string EnemyId4 = "";

    public int Level4;

    public int Rate4;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      FangDrop other = obj as FangDrop;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.EnemyId0);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Level0);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Rate0);
            break;
          }
          case 42: {
            input.ReadString(ref this.EnemyId1);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Level1);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Rate1);
            break;
          }
          case 66: {
            input.ReadString(ref this.EnemyId2);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.Level2);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.Rate2);
            break;
          }
          case 90: {
            input.ReadString(ref this.EnemyId3);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.Level3);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.Rate3);
            break;
          }
          case 114: {
            input.ReadString(ref this.EnemyId4);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.Level4);
            break;
          }
          case 128: {
            input.ReadInt32(ref this.Rate4);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LimitBreakType : pb.IMessage {
    public LimitBreakType() { }
    private static readonly LimitBreakType defaultInstance = new LimitBreakType();
    public static LimitBreakType DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Name = "";

    public List<int> Hp = new List<int>();

    public List<int> Attack = new List<int>();

    public List<int> Defense = new List<int>();

    public List<int> Items0 = new List<int>();

    public List<int> Items1 = new List<int>();

    public List<int> Items2 = new List<int>();

    public List<int> Items3 = new List<int>();

    public List<int> Items4 = new List<int>();

    public List<int> Items5 = new List<int>();

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      LimitBreakType other = obj as LimitBreakType;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26:
          case 24: {
            input.ReadInt32Array(tag, this.Hp);
            break;
          }
          case 34:
          case 32: {
            input.ReadInt32Array(tag, this.Attack);
            break;
          }
          case 42:
          case 40: {
            input.ReadInt32Array(tag, this.Defense);
            break;
          }
          case 50:
          case 48: {
            input.ReadInt32Array(tag, this.Items0);
            break;
          }
          case 58:
          case 56: {
            input.ReadInt32Array(tag, this.Items1);
            break;
          }
          case 66:
          case 64: {
            input.ReadInt32Array(tag, this.Items2);
            break;
          }
          case 74:
          case 72: {
            input.ReadInt32Array(tag, this.Items3);
            break;
          }
          case 82:
          case 80: {
            input.ReadInt32Array(tag, this.Items4);
            break;
          }
          case 90:
          case 88: {
            input.ReadInt32Array(tag, this.Items5);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StackItemTemplate : pb.IMessage {
    public StackItemTemplate() { }
    private static readonly StackItemTemplate defaultInstance = new StackItemTemplate();
    public static StackItemTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Type = "";

    public string Special = "";

    public int Param;

    public string Name = "";

    public string Desc = "";

    public int Order;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      StackItemTemplate other = obj as StackItemTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Type);
            break;
          }
          case 26: {
            input.ReadString(ref this.Special);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Param);
            break;
          }
          case 42: {
            input.ReadString(ref this.Name);
            break;
          }
          case 50: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Order);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExchangeShop : pb.IMessage {
    public ExchangeShop() { }
    private static readonly ExchangeShop defaultInstance = new ExchangeShop();
    public static ExchangeShop DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int Season;

    public string Name = "";

    public int StackItemId;

    public string Desc = "";

    public string Option = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      ExchangeShop other = obj as ExchangeShop;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Season);
            break;
          }
          case 26: {
            input.ReadString(ref this.Name);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.StackItemId);
            break;
          }
          case 42: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 50: {
            input.ReadString(ref this.Option);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExchangeItem : pb.IMessage {
    public ExchangeItem() { }
    private static readonly ExchangeItem defaultInstance = new ExchangeItem();
    public static ExchangeItem DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int ExchangeShopId;

    public string Name = "";

    public string Image = "";

    public string Action = "";

    public int Price;

    public int Limit;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      ExchangeItem other = obj as ExchangeItem;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.ExchangeShopId);
            break;
          }
          case 26: {
            input.ReadString(ref this.Name);
            break;
          }
          case 34: {
            input.ReadString(ref this.Image);
            break;
          }
          case 42: {
            input.ReadString(ref this.Action);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Price);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Limit);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EmeraldShopItem : pb.IMessage {
    public EmeraldShopItem() { }
    private static readonly EmeraldShopItem defaultInstance = new EmeraldShopItem();
    public static EmeraldShopItem DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Name = "";

    public string Desc = "";

    public int StackItemId;

    public int Order;

    public int Price;

    public int RequireHomeLevel;

    public string Action = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      EmeraldShopItem other = obj as EmeraldShopItem;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.StackItemId);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Order);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Price);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.RequireHomeLevel);
            break;
          }
          case 66: {
            input.ReadString(ref this.Action);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PackItem : pb.IMessage {
    public PackItem() { }
    private static readonly PackItem defaultInstance = new PackItem();
    public static PackItem DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string ProductId = "";

    public string Name = "";

    public string Image = "";

    public int Price;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PackItem other = obj as PackItem;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.ProductId);
            break;
          }
          case 26: {
            input.ReadString(ref this.Name);
            break;
          }
          case 34: {
            input.ReadString(ref this.Image);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Price);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PresentTemplate : pb.IMessage {
    public PresentTemplate() { }
    private static readonly PresentTemplate defaultInstance = new PresentTemplate();
    public static PresentTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Name = "";

    public string Message = "";

    public string Action = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PresentTemplate other = obj as PresentTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Message);
            break;
          }
          case 34: {
            input.ReadString(ref this.Action);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpLeague : pb.IMessage {
    public PvpLeague() { }
    private static readonly PvpLeague defaultInstance = new PvpLeague();
    public static PvpLeague DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PvpLeague other = obj as PvpLeague;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpGrade : pb.IMessage {
    public PvpGrade() { }
    private static readonly PvpGrade defaultInstance = new PvpGrade();
    public static PvpGrade DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public int Plate;

    public int PromotePoint;

    public int DepromotePoint;

    public global::Master.PresentCommand Reward;

    public string RewardDesc = "";

    public int MatchingUp;

    public int CoinWin;

    public int CoinLose;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PvpGrade other = obj as PvpGrade;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Plate);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.PromotePoint);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.DepromotePoint);
            break;
          }
          case 50: {
            global::Master.PresentCommand builder = new global::Master.PresentCommand();
            input.ReadMessage(builder);
            Reward = builder;
            break;
          }
          case 58: {
            input.ReadString(ref this.RewardDesc);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.MatchingUp);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.CoinWin);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.CoinLose);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PvpUnificationRule : pb.IMessage {
    public PvpUnificationRule() { }
    private static readonly PvpUnificationRule defaultInstance = new PvpUnificationRule();
    public static PvpUnificationRule DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public string Cond = "";

    public int PvpSoulNo;

    public string Effect = "";

    public int OverrideId;

    public bool Anywhere;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      PvpUnificationRule other = obj as PvpUnificationRule;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Cond);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.PvpSoulNo);
            break;
          }
          case 42: {
            input.ReadString(ref this.Effect);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.OverrideId);
            break;
          }
          case 56: {
            input.ReadBool(ref this.Anywhere);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QuestTemplate : pb.IMessage {
    public QuestTemplate() { }
    private static readonly QuestTemplate defaultInstance = new QuestTemplate();
    public static QuestTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Kind = "";

    public string Title = "";

    public string Desc = "";

    public string CondStat = "";

    public int CondNum;

    public int RequireId;

    public int Effect;

    public string OverrideUrl = "";

    public bool JumpAnytime;

    public global::Master.PresentCommand Reward;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      QuestTemplate other = obj as QuestTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Kind);
            break;
          }
          case 26: {
            input.ReadString(ref this.Title);
            break;
          }
          case 34: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 42: {
            input.ReadString(ref this.CondStat);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.CondNum);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.RequireId);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.Effect);
            break;
          }
          case 74: {
            input.ReadString(ref this.OverrideUrl);
            break;
          }
          case 80: {
            input.ReadBool(ref this.JumpAnytime);
            break;
          }
          case 90: {
            global::Master.PresentCommand builder = new global::Master.PresentCommand();
            input.ReadMessage(builder);
            Reward = builder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserStatTemplate : pb.IMessage {
    public UserStatTemplate() { }
    private static readonly UserStatTemplate defaultInstance = new UserStatTemplate();
    public static UserStatTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public string Desc = "";

    public string Url = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      UserStatTemplate other = obj as UserStatTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 34: {
            input.ReadString(ref this.Url);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginSheet : pb.IMessage {
    public LoginSheet() { }
    private static readonly LoginSheet defaultInstance = new LoginSheet();
    public static LoginSheet DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Name = "";

    public int Order;

    public string DisabledAt = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      LoginSheet other = obj as LoginSheet;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Order);
            break;
          }
          case 34: {
            input.ReadString(ref this.DisabledAt);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginBonus : pb.IMessage {
    public LoginBonus() { }
    private static readonly LoginBonus defaultInstance = new LoginBonus();
    public static LoginBonus DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string SheetId = "";

    public string Message = "";

    public global::Master.PresentCommand Action;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      LoginBonus other = obj as LoginBonus;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.SheetId);
            break;
          }
          case 26: {
            input.ReadString(ref this.Message);
            break;
          }
          case 34: {
            global::Master.PresentCommand builder = new global::Master.PresentCommand();
            input.ReadMessage(builder);
            Action = builder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpecialCutinOption : pb.IMessage {
    public SpecialCutinOption() { }
    private static readonly SpecialCutinOption defaultInstance = new SpecialCutinOption();
    public static SpecialCutinOption DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Title = "";

    public string Message = "";

    public string MoveTo = "";

    public int Pose;

    public string NextUrl = "";

    public string OptionStr = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      SpecialCutinOption other = obj as SpecialCutinOption;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Title);
            break;
          }
          case 26: {
            input.ReadString(ref this.Message);
            break;
          }
          case 34: {
            input.ReadString(ref this.MoveTo);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Pose);
            break;
          }
          case 50: {
            input.ReadString(ref this.NextUrl);
            break;
          }
          case 58: {
            input.ReadString(ref this.OptionStr);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SoundList : pb.IMessage {
    public SoundList() { }
    private static readonly SoundList defaultInstance = new SoundList();
    public static SoundList DefaultInstance {
      get { return defaultInstance; }
    }

    public string Name = "";

    public string Filename = "";

    public string VolumeType = "";

    public int Volume;

    public int Pitch;

    public bool Preload;

    public bool Loop;

    public string DestroyType = "";

    public string OverlapType = "";

    public bool PreloadSceneTitle;

    public bool PreloadSceneHome;

    public bool PreloadSceneGame;

    public bool PreloadSceneResult;

    public bool PreloadScenePvp;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      SoundList other = obj as SoundList;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Name);
            break;
          }
          case 18: {
            input.ReadString(ref this.Filename);
            break;
          }
          case 26: {
            input.ReadString(ref this.VolumeType);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Volume);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Pitch);
            break;
          }
          case 48: {
            input.ReadBool(ref this.Preload);
            break;
          }
          case 56: {
            input.ReadBool(ref this.Loop);
            break;
          }
          case 66: {
            input.ReadString(ref this.DestroyType);
            break;
          }
          case 74: {
            input.ReadString(ref this.OverlapType);
            break;
          }
          case 80: {
            input.ReadBool(ref this.PreloadSceneTitle);
            break;
          }
          case 88: {
            input.ReadBool(ref this.PreloadSceneHome);
            break;
          }
          case 96: {
            input.ReadBool(ref this.PreloadSceneGame);
            break;
          }
          case 104: {
            input.ReadBool(ref this.PreloadSceneResult);
            break;
          }
          case 112: {
            input.ReadBool(ref this.PreloadScenePvp);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Enemy : pb.IMessage {
    public Enemy() { }
    private static readonly Enemy defaultInstance = new Enemy();
    public static Enemy DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public int CardId;

    public string RaceType = "";

    public string Attribute = "";

    public string DriverParam = "";

    public int HitPoint;

    public int Agility;

    public int AttackRate;

    public int AttackDice;

    public int AttackCount;

    public int AttackAdjust;

    public string AttackSoundName = "";

    public int CriticalDamageRate;

    public string EnchantAttackName = "";

    public int EnchantAttackStatusRate;

    public string EnchantAttackCommand = "";

    public string EnchantAttackSoundName = "";

    public string SkillAttackName = "";

    public int SkillAttackRate;

    public string SkillAttackCommand = "";

    public string SkillAttackSoundName = "";

    public int DefenseDice;

    public int DefenseCount;

    public int DefenseAdjust;

    public string DefenseSoundName = "";

    public string EnchantDefenseName = "";

    public int EnchantDefenseStatusRate;

    public string EnchantDefenseCommand = "";

    public string EnchantDefenseSoundName = "";

    public int CriticalLotsCount;

    public int CriticalHitRate;

    public int Experience;

    public string DeadSoundName = "";

    public string DropItem255 = "";

    public string DropFang255 = "";

    public string DropGold = "";

    public int SleepRate;

    public int DeepsleepRate;

    public int MoveWaitCounter;

    public int MoveAdditonalTacticalPoint;

    public int AttackAdditionalTacticalPoint;

    public int PrefabId;

    public string Property = "";

    public string ExtraData = "";

    public int HaveItemNo;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      Enemy other = obj as Enemy;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.CardId);
            break;
          }
          case 34: {
            input.ReadString(ref this.RaceType);
            break;
          }
          case 42: {
            input.ReadString(ref this.Attribute);
            break;
          }
          case 50: {
            input.ReadString(ref this.DriverParam);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.HitPoint);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.Agility);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.AttackRate);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.AttackDice);
            break;
          }
          case 88: {
            input.ReadInt32(ref this.AttackCount);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.AttackAdjust);
            break;
          }
          case 106: {
            input.ReadString(ref this.AttackSoundName);
            break;
          }
          case 112: {
            input.ReadInt32(ref this.CriticalDamageRate);
            break;
          }
          case 122: {
            input.ReadString(ref this.EnchantAttackName);
            break;
          }
          case 128: {
            input.ReadInt32(ref this.EnchantAttackStatusRate);
            break;
          }
          case 138: {
            input.ReadString(ref this.EnchantAttackCommand);
            break;
          }
          case 146: {
            input.ReadString(ref this.EnchantAttackSoundName);
            break;
          }
          case 154: {
            input.ReadString(ref this.SkillAttackName);
            break;
          }
          case 160: {
            input.ReadInt32(ref this.SkillAttackRate);
            break;
          }
          case 170: {
            input.ReadString(ref this.SkillAttackCommand);
            break;
          }
          case 178: {
            input.ReadString(ref this.SkillAttackSoundName);
            break;
          }
          case 184: {
            input.ReadInt32(ref this.DefenseDice);
            break;
          }
          case 192: {
            input.ReadInt32(ref this.DefenseCount);
            break;
          }
          case 200: {
            input.ReadInt32(ref this.DefenseAdjust);
            break;
          }
          case 210: {
            input.ReadString(ref this.DefenseSoundName);
            break;
          }
          case 218: {
            input.ReadString(ref this.EnchantDefenseName);
            break;
          }
          case 224: {
            input.ReadInt32(ref this.EnchantDefenseStatusRate);
            break;
          }
          case 234: {
            input.ReadString(ref this.EnchantDefenseCommand);
            break;
          }
          case 242: {
            input.ReadString(ref this.EnchantDefenseSoundName);
            break;
          }
          case 248: {
            input.ReadInt32(ref this.CriticalLotsCount);
            break;
          }
          case 256: {
            input.ReadInt32(ref this.CriticalHitRate);
            break;
          }
          case 264: {
            input.ReadInt32(ref this.Experience);
            break;
          }
          case 274: {
            input.ReadString(ref this.DeadSoundName);
            break;
          }
          case 282: {
            input.ReadString(ref this.DropItem255);
            break;
          }
          case 290: {
            input.ReadString(ref this.DropFang255);
            break;
          }
          case 298: {
            input.ReadString(ref this.DropGold);
            break;
          }
          case 304: {
            input.ReadInt32(ref this.SleepRate);
            break;
          }
          case 312: {
            input.ReadInt32(ref this.DeepsleepRate);
            break;
          }
          case 320: {
            input.ReadInt32(ref this.MoveWaitCounter);
            break;
          }
          case 328: {
            input.ReadInt32(ref this.MoveAdditonalTacticalPoint);
            break;
          }
          case 336: {
            input.ReadInt32(ref this.AttackAdditionalTacticalPoint);
            break;
          }
          case 344: {
            input.ReadInt32(ref this.PrefabId);
            break;
          }
          case 354: {
            input.ReadString(ref this.Property);
            break;
          }
          case 362: {
            input.ReadString(ref this.ExtraData);
            break;
          }
          case 368: {
            input.ReadInt32(ref this.HaveItemNo);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Item : pb.IMessage {
    public Item() { }
    private static readonly Item defaultInstance = new Item();
    public static Item DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int SortId;

    public string ItemCode = "";

    public string Mapchip = "";

    public string Name = "";

    public string Type = "";

    public string FittingType = "";

    public string Attribute = "";

    public string Param = "";

    public int AttackAdjust;

    public int DefenseAdjust;

    public int CirticalHitRate;

    public int Durability;

    public int MergeCount;

    public int Rarity;

    public int Price;

    public string SoundName = "";

    public bool IsPickup;

    public bool IsSwing;

    public bool IsUse;

    public bool IsDrop;

    public bool IsExclusive;

    public string ExtraType = "";

    public string Description = "";

    public int StackItemId;

    public int StackItemNum;

    public int DummyItemNameNo;

    public bool IsInExItem;

    public bool IsShot;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      Item other = obj as Item;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.SortId);
            break;
          }
          case 26: {
            input.ReadString(ref this.ItemCode);
            break;
          }
          case 34: {
            input.ReadString(ref this.Mapchip);
            break;
          }
          case 42: {
            input.ReadString(ref this.Name);
            break;
          }
          case 50: {
            input.ReadString(ref this.Type);
            break;
          }
          case 58: {
            input.ReadString(ref this.FittingType);
            break;
          }
          case 66: {
            input.ReadString(ref this.Attribute);
            break;
          }
          case 74: {
            input.ReadString(ref this.Param);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.AttackAdjust);
            break;
          }
          case 88: {
            input.ReadInt32(ref this.DefenseAdjust);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.CirticalHitRate);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.Durability);
            break;
          }
          case 112: {
            input.ReadInt32(ref this.MergeCount);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.Rarity);
            break;
          }
          case 128: {
            input.ReadInt32(ref this.Price);
            break;
          }
          case 138: {
            input.ReadString(ref this.SoundName);
            break;
          }
          case 144: {
            input.ReadBool(ref this.IsPickup);
            break;
          }
          case 152: {
            input.ReadBool(ref this.IsSwing);
            break;
          }
          case 160: {
            input.ReadBool(ref this.IsUse);
            break;
          }
          case 168: {
            input.ReadBool(ref this.IsDrop);
            break;
          }
          case 176: {
            input.ReadBool(ref this.IsExclusive);
            break;
          }
          case 186: {
            input.ReadString(ref this.ExtraType);
            break;
          }
          case 194: {
            input.ReadString(ref this.Description);
            break;
          }
          case 200: {
            input.ReadInt32(ref this.StackItemId);
            break;
          }
          case 208: {
            input.ReadInt32(ref this.StackItemNum);
            break;
          }
          case 216: {
            input.ReadInt32(ref this.DummyItemNameNo);
            break;
          }
          case 224: {
            input.ReadBool(ref this.IsInExItem);
            break;
          }
          case 232: {
            input.ReadBool(ref this.IsShot);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ItemName : pb.IMessage {
    public ItemName() { }
    private static readonly ItemName defaultInstance = new ItemName();
    public static ItemName DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      ItemName other = obj as ItemName;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ItemNameDict : pb.IMessage {
    public ItemNameDict() { }
    private static readonly ItemNameDict defaultInstance = new ItemNameDict();
    public static ItemNameDict DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class List : pb.IMessage {
        public List() { }
        private static readonly List defaultInstance = new List();
        public static List DefaultInstance {
          get { return defaultInstance; }
        }

        public global::Master.ItemName[] List_;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          List other = obj as List;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadMessageArray(tag, out this.List_);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DictEntry : pb.IMessage {
        public DictEntry() { }
        private static readonly DictEntry defaultInstance = new DictEntry();
        public static DictEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public string Key = "";

        public global::Master.ItemNameDict.Types.List Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          DictEntry other = obj as DictEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadString(ref this.Key);
                break;
              }
              case 18: {
                global::Master.ItemNameDict.Types.List builder = new global::Master.ItemNameDict.Types.List();
                input.ReadMessage(builder);
                Value = builder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

    public global::Master.ItemNameDict.Types.DictEntry[] Dict;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      ItemNameDict other = obj as ItemNameDict;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, out this.Dict);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Trap : pb.IMessage {
    public Trap() { }
    private static readonly Trap defaultInstance = new Trap();
    public static Trap DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string TrapCode = "";

    public string Name = "";

    public string DriverName = "";

    public string DriverParameter = "";

    public int Probability;

    public string SoundName = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      Trap other = obj as Trap;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.TrapCode);
            break;
          }
          case 34: {
            input.ReadString(ref this.DriverName);
            break;
          }
          case 42: {
            input.ReadString(ref this.DriverParameter);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Probability);
            break;
          }
          case 58: {
            input.ReadString(ref this.SoundName);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StringData : pb.IMessage {
    public StringData() { }
    private static readonly StringData defaultInstance = new StringData();
    public static StringData DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Text = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      StringData other = obj as StringData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Text);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SoloDuel : pb.IMessage {
    public SoloDuel() { }
    private static readonly SoloDuel defaultInstance = new SoloDuel();
    public static SoloDuel DefaultInstance {
      get { return defaultInstance; }
    }

    public int StageId;

    public int EnemyNo;

    public int Level;

    public int FangId;

    public int Hp;

    public int Attack;

    public int Defense;

    public int Exp;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      SoloDuel other = obj as SoloDuel;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.StageId);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.EnemyNo);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Level);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.FangId);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Hp);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Attack);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Defense);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.Exp);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoomInfo : pb.IMessage {
    public RoomInfo() { }
    private static readonly RoomInfo defaultInstance = new RoomInfo();
    public static RoomInfo DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public int Width;

    public int Height;

    public int Attribute;

    public int Direction;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      RoomInfo other = obj as RoomInfo;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Width);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Height);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.Attribute);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Direction);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnemyAnim : pb.IMessage {
    public EnemyAnim() { }
    private static readonly EnemyAnim defaultInstance = new EnemyAnim();
    public static EnemyAnim DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int AttackDistanceId;

    public int AttackAnimId;

    public int SpecialDistanceId;

    public int SpecialAnimId;

    public float Duration;

    public int HeightOffset;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      EnemyAnim other = obj as EnemyAnim;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.AttackDistanceId);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.AttackAnimId);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.SpecialDistanceId);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.SpecialAnimId);
            break;
          }
          case 53: {
            input.ReadFloat(ref this.Duration);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.HeightOffset);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnemyAnimDistance : pb.IMessage {
    public EnemyAnimDistance() { }
    private static readonly EnemyAnimDistance defaultInstance = new EnemyAnimDistance();
    public static EnemyAnimDistance DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public List<int> Table = new List<int>();

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      EnemyAnimDistance other = obj as EnemyAnimDistance;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18:
          case 16: {
            input.ReadInt32Array(tag, this.Table);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnemyAnimSprite : pb.IMessage {
    public EnemyAnimSprite() { }
    private static readonly EnemyAnimSprite defaultInstance = new EnemyAnimSprite();
    public static EnemyAnimSprite DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public List<string> Table = new List<string>();

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      EnemyAnimSprite other = obj as EnemyAnimSprite;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, this.Table);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ArmamentTemplate : pb.IMessage {
    public ArmamentTemplate() { }
    private static readonly ArmamentTemplate defaultInstance = new ArmamentTemplate();
    public static ArmamentTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public int Rarity;

    public string Kind = "";

    public string Property = "";

    public int MaxLevel;

    public int BaseHp;

    public int BaseAttack;

    public int BaseDefense;

    public string SoulPattern = "";

    public int OpenSlotRate;

    public int Point;

    public int Gold;

    public int StatusDistribute;

    public int ImageId;

    public string HitEffect = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      ArmamentTemplate other = obj as ArmamentTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Rarity);
            break;
          }
          case 34: {
            input.ReadString(ref this.Kind);
            break;
          }
          case 42: {
            input.ReadString(ref this.Property);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.MaxLevel);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.BaseHp);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.BaseAttack);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.BaseDefense);
            break;
          }
          case 82: {
            input.ReadString(ref this.SoulPattern);
            break;
          }
          case 88: {
            input.ReadInt32(ref this.OpenSlotRate);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.Point);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.Gold);
            break;
          }
          case 112: {
            input.ReadInt32(ref this.StatusDistribute);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.ImageId);
            break;
          }
          case 130: {
            input.ReadString(ref this.HitEffect);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AbilityTemplate : pb.IMessage {
    public AbilityTemplate() { }
    private static readonly AbilityTemplate defaultInstance = new AbilityTemplate();
    public static AbilityTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Special {
        NONE_TYPE = 0,
        ATTACK_UP = 1,
        ON_ATTACK = 2,
        ON_KILLED = 3,
        ATTACK_UP_ABS = 4,
        DEFENSE_UP = 11,
        GUARD = 12,
        PROTECT = 13,
        ON_DAMAGE = 14,
        DEFENSE_UP_ABS = 15,
      }

      public enum Param {
        NONE_TARGET = 0,
        FIRE = 1,
        WATER = 2,
        TREE = 3,
        LIGHT = 4,
        DARK = 5,
        DEMON = 6,
        GOD = 7,
        DEMIHUMAN = 8,
        DRAGON = 9,
        SPIRIT = 10,
        HEAL = 11,
        BURST = 12,
        CHARGE_SKILLL = 13,
        SLEEP = 14,
        CONFUSE = 15,
        BLIND = 16,
        BIND = 17,
        POISON = 18,
        ACID = 19,
        SLOW = 20,
        SLEEP_PARALYSIS = 21,
        ALL = 22,
      }

    }
    #endregion

    public int Id;

    public string Name = "";

    public int Rarity;

    public string Type = "";

    public float BaseNum;

    public float MaxNum;

    public int MaxLevel;

    public string Desc = "";

    public string Desc2 = "";

    public global::Master.AbilityTemplate.Types.Special Special = global::Master.AbilityTemplate.Types.Special.NONE_TYPE;

    public global::Master.AbilityTemplate.Types.Param Param = global::Master.AbilityTemplate.Types.Param.NONE_TARGET;

    public string LogTextId = "";

    public int Turn;

    public string Json = "";

    public string Kind = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      AbilityTemplate other = obj as AbilityTemplate;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.Rarity);
            break;
          }
          case 34: {
            input.ReadString(ref this.Type);
            break;
          }
          case 61: {
            input.ReadFloat(ref this.BaseNum);
            break;
          }
          case 69: {
            input.ReadFloat(ref this.MaxNum);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.MaxLevel);
            break;
          }
          case 82: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 90: {
            input.ReadString(ref this.Desc2);
            break;
          }
          case 96: {
            input.ReadEnum(ref this.Special);
            break;
          }
          case 104: {
            input.ReadEnum(ref this.Param);
            break;
          }
          case 114: {
            input.ReadString(ref this.LogTextId);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.Turn);
            break;
          }
          case 130: {
            input.ReadString(ref this.Json);
            break;
          }
          case 138: {
            input.ReadString(ref this.Kind);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapAnimation : pb.IMessage {
    public MapAnimation() { }
    private static readonly MapAnimation defaultInstance = new MapAnimation();
    public static MapAnimation DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Anim : pb.IMessage {
        public Anim() { }
        private static readonly Anim defaultInstance = new Anim();
        public static Anim DefaultInstance {
          get { return defaultInstance; }
        }

        public List<int> Items = new List<int>();

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          Anim other = obj as Anim;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10:
              case 8: {
                input.ReadInt32Array(tag, this.Items);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AnimationEntry : pb.IMessage {
        public AnimationEntry() { }
        private static readonly AnimationEntry defaultInstance = new AnimationEntry();
        public static AnimationEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public int Key;

        public global::Master.MapAnimation.Types.Anim Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          AnimationEntry other = obj as AnimationEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Key);
                break;
              }
              case 18: {
                global::Master.MapAnimation.Types.Anim builder = new global::Master.MapAnimation.Types.Anim();
                input.ReadMessage(builder);
                Value = builder;
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EventAnimationEntry : pb.IMessage {
        public EventAnimationEntry() { }
        private static readonly EventAnimationEntry defaultInstance = new EventAnimationEntry();
        public static EventAnimationEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public int Key;

        public global::Master.MapAnimation.Types.Anim Value;

        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          EventAnimationEntry other = obj as EventAnimationEntry;
          if (other == null) return false;
          return true;
        }

        #endregion

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Key);
                break;
              }
              case 18: {
                global::Master.MapAnimation.Types.Anim builder = new global::Master.MapAnimation.Types.Anim();
                input.ReadMessage(builder);
                Value = builder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

    public string Id = "";

    public global::Master.MapAnimation.Types.AnimationEntry[] Animation;

    public global::Master.MapAnimation.Types.EventAnimationEntry[] EventAnimation;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      MapAnimation other = obj as MapAnimation;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, out this.Animation);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, out this.EventAnimation);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapIndex : pb.IMessage {
    public MapIndex() { }
    private static readonly MapIndex defaultInstance = new MapIndex();
    public static MapIndex DefaultInstance {
      get { return defaultInstance; }
    }

    public int StageId;

    public List<string> Filename = new List<string>();

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      MapIndex other = obj as MapIndex;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.StageId);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, this.Filename);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AreaData : pb.IMessage {
    public AreaData() { }
    private static readonly AreaData defaultInstance = new AreaData();
    public static AreaData DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Name = "";

    public int MaxDungeon;

    public int StartDungeonId;

    public string Property = "";

    public string Kind = "";

    public int StackItemId;

    public int UnlockStackItemId;

    public int UnlockStackItemNum;

    public int RequireStackItemId;

    public int UnlockTime;

    public int UnlockHomeLevel;

    public int ExchangeId;

    public string InfoUrl = "";

    public int BannerHeight;

    public int Season;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      AreaData other = obj as AreaData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.MaxDungeon);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.StartDungeonId);
            break;
          }
          case 42: {
            input.ReadString(ref this.Property);
            break;
          }
          case 50: {
            input.ReadString(ref this.Kind);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.StackItemId);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.UnlockStackItemId);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.UnlockStackItemNum);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.RequireStackItemId);
            break;
          }
          case 88: {
            input.ReadInt32(ref this.UnlockTime);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.UnlockHomeLevel);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.ExchangeId);
            break;
          }
          case 114: {
            input.ReadString(ref this.InfoUrl);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.BannerHeight);
            break;
          }
          case 128: {
            input.ReadInt32(ref this.Season);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DungeonData : pb.IMessage {
    public DungeonData() { }
    private static readonly DungeonData defaultInstance = new DungeonData();
    public static DungeonData DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Description = "";

    public int NextDungeonId;

    public int MaxStage;

    public int StartStageId;

    public string Property = "";

    public int Stamina;

    public int Exp;

    public int GoldRate;

    public int StepRate;

    public int BurstRate;

    public int MaxGold;

    public int MaxExp;

    public int Difficulty;

    public int RecommendLevel;

    public int PvpUnificationType;

    public string Mission = "";

    public bool NoContinue;

    public string Stair = "";

    public int Satiety;

    public int MaxSatiety;

    public string ButtonName = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      DungeonData other = obj as DungeonData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Description);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.NextDungeonId);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.MaxStage);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.StartStageId);
            break;
          }
          case 50: {
            input.ReadString(ref this.Property);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Stamina);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.Exp);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.GoldRate);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.StepRate);
            break;
          }
          case 88: {
            input.ReadInt32(ref this.BurstRate);
            break;
          }
          case 96: {
            input.ReadInt32(ref this.MaxGold);
            break;
          }
          case 104: {
            input.ReadInt32(ref this.MaxExp);
            break;
          }
          case 112: {
            input.ReadInt32(ref this.Difficulty);
            break;
          }
          case 120: {
            input.ReadInt32(ref this.RecommendLevel);
            break;
          }
          case 128: {
            input.ReadInt32(ref this.PvpUnificationType);
            break;
          }
          case 138: {
            input.ReadString(ref this.Mission);
            break;
          }
          case 144: {
            input.ReadBool(ref this.NoContinue);
            break;
          }
          case 154: {
            input.ReadString(ref this.Stair);
            break;
          }
          case 160: {
            input.ReadInt32(ref this.Satiety);
            break;
          }
          case 168: {
            input.ReadInt32(ref this.MaxSatiety);
            break;
          }
          case 178: {
            input.ReadString(ref this.ButtonName);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageData : pb.IMessage {
    public StageData() { }
    private static readonly StageData defaultInstance = new StageData();
    public static StageData DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public int DungeonId;

    public int FloorNo;

    public int EnemySetId;

    public int ItemSetId;

    public int TrapSetId;

    public int GoalSetId;

    public int GoalCount;

    public int MaskType;

    public string NextStageParam = "";

    public string StageTitle = "";

    public string DriverName = "";

    public string DriverParam = "";

    public string FixedRoomGroupId = "";

    public string RandomRoomGroupId = "";

    public string Seeds = "";

    public string BaseName = "";

    public string MapchipName = "";

    public string AnimationName = "";

    public string TextureName = "";

    public string BgmName = "";

    public string StepSoundName = "";

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      StageData other = obj as StageData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.DungeonId);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.FloorNo);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.EnemySetId);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.ItemSetId);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.TrapSetId);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.GoalSetId);
            break;
          }
          case 64: {
            input.ReadInt32(ref this.GoalCount);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.MaskType);
            break;
          }
          case 82: {
            input.ReadString(ref this.NextStageParam);
            break;
          }
          case 90: {
            input.ReadString(ref this.StageTitle);
            break;
          }
          case 98: {
            input.ReadString(ref this.DriverName);
            break;
          }
          case 106: {
            input.ReadString(ref this.DriverParam);
            break;
          }
          case 114: {
            input.ReadString(ref this.FixedRoomGroupId);
            break;
          }
          case 122: {
            input.ReadString(ref this.RandomRoomGroupId);
            break;
          }
          case 130: {
            input.ReadString(ref this.Seeds);
            break;
          }
          case 138: {
            input.ReadString(ref this.BaseName);
            break;
          }
          case 146: {
            input.ReadString(ref this.MapchipName);
            break;
          }
          case 154: {
            input.ReadString(ref this.AnimationName);
            break;
          }
          case 162: {
            input.ReadString(ref this.TextureName);
            break;
          }
          case 170: {
            input.ReadString(ref this.BgmName);
            break;
          }
          case 178: {
            input.ReadString(ref this.StepSoundName);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoomData : pb.IMessage {
    public RoomData() { }
    private static readonly RoomData defaultInstance = new RoomData();
    public static RoomData DefaultInstance {
      get { return defaultInstance; }
    }

    public int GroupId;

    public string TmxFileName = "";

    public int EnemyLotsCount;

    public int ItemLotsCount;

    public int TrapLotsCount;

    public int Width;

    public int Height;

    public string EventCommand = "";

    public int Direction;

    public int Attribute;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      RoomData other = obj as RoomData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.GroupId);
            break;
          }
          case 18: {
            input.ReadString(ref this.TmxFileName);
            break;
          }
          case 24: {
            input.ReadInt32(ref this.EnemyLotsCount);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.ItemLotsCount);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.TrapLotsCount);
            break;
          }
          case 48: {
            input.ReadInt32(ref this.Width);
            break;
          }
          case 56: {
            input.ReadInt32(ref this.Height);
            break;
          }
          case 66: {
            input.ReadString(ref this.EventCommand);
            break;
          }
          case 72: {
            input.ReadInt32(ref this.Direction);
            break;
          }
          case 80: {
            input.ReadInt32(ref this.Attribute);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GoalSetData : pb.IMessage {
    public GoalSetData() { }
    private static readonly GoalSetData defaultInstance = new GoalSetData();
    public static GoalSetData DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public List<string> Params = new List<string>();

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      GoalSetData other = obj as GoalSetData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, this.Params);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageSetItem : pb.IMessage {
    public StageSetItem() { }
    private static readonly StageSetItem defaultInstance = new StageSetItem();
    public static StageSetItem DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public int Num;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      StageSetItem other = obj as StageSetItem;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Num);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageSetList : pb.IMessage {
    public StageSetList() { }
    private static readonly StageSetList defaultInstance = new StageSetList();
    public static StageSetList DefaultInstance {
      get { return defaultInstance; }
    }

    public int Total;

    public global::Master.StageSetItem[] Items;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      StageSetList other = obj as StageSetList;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Total);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, out this.Items);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StageSetData : pb.IMessage {
    public StageSetData() { }
    private static readonly StageSetData defaultInstance = new StageSetData();
    public static StageSetData DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public global::Master.StageSetList[] EnemySets;

    public global::Master.StageSetList[] ItemSets;

    public global::Master.StageSetList[] TrapSets;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      StageSetData other = obj as StageSetData;
      if (other == null) return false;
      return true;
    }

    #endregion

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, out this.EnemySets);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, out this.ItemSets);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, out this.TrapSets);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
