// Code generated by protoc-gen-tdcs. DO NOT EDIT.
// source: imported.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code


using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using ByteString = global::Google.ProtocolBuffers.ByteString;
using scg = global::System.Collections.Generic;
using System;

namespace TestImported {
public sealed partial class ImportedMessage: pb.Message {
public Int32 I = 0;

public ImportedMessage() { }
public static ImportedMessage CreateInstance() { var obj = new ImportedMessage(); obj.Finish(); return obj; }
public static ImportedMessage CreateEmpty() { return new ImportedMessage(); }
private static readonly ImportedMessage defaultInstance = new ImportedMessage();
public static ImportedMessage DefaultInstance {
  get { return defaultInstance; }
}
public override void Init() {
}
public override void Finish() {
}
public static ImportedMessage ParseFrom(byte[] data) {
var mes = CreateInstance(); mes.MergeFrom(data); return mes;
}
public static ImportedMessage ParseFrom(global::System.IO.Stream input) {
var mes = CreateInstance(); mes.MergeFrom(input); return mes;
}
public static ImportedMessage ParseFrom(pb::CodedInputStream input) {
var mes = CreateInstance(); mes.MergeFrom(input); return mes;
}

public override void MergeFrom(pb::CodedInputStream input) {
uint tag;
int sharedNum = 0;
while (input.ReadTag(out tag)) {
switch (tag) {
case 0: {
throw pb::InvalidProtocolBufferException.InvalidTag();
}
default: {
if (pb::WireFormat.IsEndGroupTag(tag)) {
return;
}
UnityEngine.Debug.Log("unknown field " + tag);
input.SkipField(); // unknown field
break;
}
case 8: {
input.ReadInt32(ref this.I);
break;
}
}
}
}
public override void WriteTo(pb::CodedOutputStream output) {
if( I!=0) {
output.WriteInt32(1,I);
}
}
public override int SerializedSize {
get {
return CalcSerializedSize();
}
}

private int CalcSerializedSize() {
int size = 0;
if( I!=0) {
size += pb::CodedOutputStream.ComputeInt32Size(1,I);
}
return size;
}
}

}
#endregion Designer generated code
