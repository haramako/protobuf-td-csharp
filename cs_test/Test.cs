// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace Test {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Test {

  }
  #region Enums
  public enum TestEnum {
    FOO = 0,
    BAR = 1,
    BAZ = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestMessage : pb.Message {
    public TestMessage() { }
    private static readonly TestMessage defaultInstance = new TestMessage();
    public static TestMessage DefaultInstance {
      get { return defaultInstance; }
    }

    public int Int32Value;

    public long Int64Value;

    public string StringValue = "";

    public global::Test.TestEnum EnumValue = global::Test.TestEnum.FOO;

    public global::Test.EmbedMessage MessageValue;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      TestMessage other = obj as TestMessage;
      if (other == null) return false;
      return true;
    }

    #endregion

    public static TestMessage CreateInstance() {
      return new TestMessage();
    }
    public static TestMessage ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static TestMessage ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static TestMessage ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Int32Value);
            break;
          }
          case 16: {
            input.ReadInt64(ref this.Int64Value);
            break;
          }
          case 26: {
            input.ReadString(ref this.StringValue);
            break;
          }
          case 32: {
            input.ReadEnum(ref this.EnumValue);
            break;
          }
          case 42: {
            global::Test.EmbedMessage builder = new global::Test.EmbedMessage();
            input.ReadMessage(builder);
            MessageValue = builder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EmbedMessage : pb.Message {
    public EmbedMessage() { }
    private static readonly EmbedMessage defaultInstance = new EmbedMessage();
    public static EmbedMessage DefaultInstance {
      get { return defaultInstance; }
    }

    public int Val;

    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      EmbedMessage other = obj as EmbedMessage;
      if (other == null) return false;
      return true;
    }

    #endregion

    public static EmbedMessage CreateInstance() {
      return new EmbedMessage();
    }
    public static EmbedMessage ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static EmbedMessage ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static EmbedMessage ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Val);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
